[{"lecture": "31624_26_course_video", "Timestamps": [{"text": "  In diesem Video werden wir uns mit Aufgabe 1 des Hausaufgabenblattes 5 befassen.  Dabei geht es im Allgemeinen um dynamische Programmierung und wie man in einem Stream  Palindromenteilfolgen findet.  Bevor wir uns allerdings mit dynamischer Programmierung beschaeftigen, wollen wir  uns einmal kurz mit der Rekursion befassen.", "start": 0.0, "end": 25.080000000000002}, {"text": "  Die Rekursion ist ein Prinzip, bei der sich die Funktion immer wieder selber aufruft.  Die Rueckgabe der Funktion enthaelt dann meistens die Ergebnisse des Aufrufes.  Wir rufen unsere Funktion also immer selbst auf, veraendern dabei immer wieder uns ein  Eingabeparameter, bis wir irgendwann an einem Punkt angekommen sind, wo wir bereits bekannte  Informationen bzw. Standardwerte haben.", "start": 25.84, "end": 45.56}, {"text": "  Diesen Punkt nennen wir dann Rekursionsanker.  Als erstes wollen wir uns das Prinzip der Rekursion an einem sehr einfachen Beispiel angucken.  Dazu stellen wir uns folgendes Spiel vor.  Gespielt wird mit mehreren Personen, die sich in einem Raum befinden und es muessen  zwei Spielregeln befolgt werden.", "start": 45.56, "end": 68.84}, {"text": " Jeder Spieler kann nur die Person zu seiner Rechten befragen und jeder Spieler darf nur  der Person zu seiner linken antworten.  Uebertraegt man das Ganze auf die Rekursion entspricht der erste Teil, also nur die Person  zu seiner rechten Fragen, die Funktionen erneut mit veraenderten Parametern aufzurufen.  Dass man der Person zu seiner linken antwortet, entspricht dann dem Return der Funktion.", "start": 68.84, "end": 89.28}, {"text": "  Spielen wir das ganze Mal anhand dieses sehr einfachen Beispiels durch.  Wir haben hier eine riklusive Funktion, die heisst wie viele und wir uebergeben ein Integer  n.  Unser Rekursionsanker, den sehen wir hier oben, wenn wir naemlich n gleich 1 erreicht haben,  dann geben wir den Wert 1 zurueck.", "start": 89.28, "end": 112.16}, {"text": " Solange wir noch nicht unseren Rekursionsanker erreicht haben, geben wir 1 plus das Ergebnis  der Funktion fuer n-1 zurueck.  An dieser Stelle sieht man den Rekursiven Aufruf mit veraenderten Parametern.  Algorithmisch ergibt dieses Programm keinen Sinn, weil es am Ende nur die Zahl n zurueckgibt,  es zeigt aber sehr gut das Prinzip der Rekursion.", "start": 112.16, "end": 130.16}, {"text": "  Wenden wir dieses Beispiel einmal auf unsere Spielregeln an.  Wir haben hier 3 Personen im Raum.  Wir fragen die 1. Person, wie viele Leute sind im Raum.  Das bedeutet, wir rufen die riklusive Funktion wie viele das 1. Mal auf.  Die 1. Person ueberprueft ist der Rekursionsanker erreicht, ist er nicht, das heisst er fragt  die naechste Person, wie viele sind es denn.", "start": 130.76, "end": 154.4}, {"text": "  Dass sich bei der Person noch nicht um die letzte Person handelt, ist der Rekursionsanker  noch nicht erreicht und die Funktion wird erneut aufgerufen.  Das heisst, diese Person fragt die Person zu seiner Rechten.  Auch diese Person ist noch nicht die letzte Person, das heisst sie fragt die Person zu  ihrer Rechten, wie viele.", "start": 154.4, "end": 173.8}, {"text": "  Diese Person ist nur die letzte Person, das heisst wir haben unseren Rekursionsanker erreicht  und wir geben den Wert 1 zurueck.  1 zurueckgeben heisst hierbei wir antworten der Person zu unserer Linken.  Diese Person nimmt nun den Rueckgabewert, addiert 1 oben drauf und gibt den Aber meist zurueck.  Das gleiche macht die letzte Person.  Wir erhalten also als Rueckgabewert den Wert 3.", "start": 173.8, "end": 198.96}, {"text": "  Schauen wir uns das ganze allerdings einmal an einem praktischeren Beispiel an.  Wir haben hier die riklusive Definition einer Funktion, die die Fakultaet von n berechnet.  Die Fakultaet von n berechnet sich durch n mal der Fakultaet von n-1.  Weiterhin wissen wir, dass die Fakultaet von n-1 ist, das ist unser Rekursionsanker.  Nun wenden wir das ganze mal auf unser Beispiel an.", "start": 198.96, "end": 225.04}, {"text": "  Wir rufen die Fakultaetfunktion mit dem Wert 2 auf.  Wir haben hier unseren Rekursionsanker noch nicht erreicht, das heisst wir rufen die Funktion  erneut mit veraenderten Parametern auf, in dem Fall n-1, also 1.  Auch hier ist der Rekursionsanker noch nicht erreicht, das heisst wir rufen die Funktion  erneut auf mit n-1, also 0.", "start": 225.04, "end": 247.08}, {"text": "  Nun haben wir den Rekursionsanker erreicht, das heisst an dieser Stelle koennen wir 1 zurueckgeben.  Dieser Rueckgabe Wert 1 wird dann mit meinem bisherigen n multipliziert in dem Falle 1  und ich halte wieder 1, gebe diesen Wert zurueck und hier multipliziere ich nun die 2 mit meinem  Rueckgabe Wert 1 und erhalte 2.  Fuer eine Rekursion gibt es im Allgemeinen 2 Ansaetze.", "start": 247.08, "end": 270.0}, {"text": "  Beim Top-Down Ansatz wird die Anfrage von oben nach unten durchgereicht.  Das geht so lange bis die definierten Rekursionsanker erreicht sind.  Hat man einmal diesen Rekursionsanker erreicht, kann man dann beginnen die Berechnung von  unten nach oben durchzufuehren.  Das Bottom-Up-Verfahren funktioniert in der genau entgegengesetzten Richtung.", "start": 270.76, "end": 292.0}, {"text": "  Hierbei beginnen wir die Berechnung direkt von unten nach oben, da sowieso alle Werte  gebraucht werden.  Bei unserem Beispiel mit der Fakultaet wuerde das heissen, dass wir die Berechnung beginnen  indem wir die Fakultaet von 0 berechnen, dann die Fakultaet von 1, dann die Fakultaet  von 2 und so weiter.", "start": 292.0, "end": 313.44}, {"text": " Nun faellt uns allerdings auf, dass wenn wir die Fakultaet von beispielsweise 5 berechnen  wollen, wird das vorherige Ergebnis, also die Fakultaet von 4 benoetigen.  Wir muessen uns bei diesem Verfahren also Zwischenergebnisse speichern.  An dieser Stelle kommt die dynamische Programmierung ins Spiel.  Bei der dynamischen Programmierung zerlegen wir das Problem in kleinere Teilprobleme.", "start": 313.44, "end": 330.76}, {"text": "  Diese Teilprobleme koennen wir dann einfacher loesen und deren Ergebnisse zwischenspeichern.  Die gesamte Loesung ergibt sich dann aus den einzelnen Loesungen der Teilprobleme.  Anwenden kann man das ganze zum Beispiel im Bottom-Up-Verfahren.  Schauen wir uns nun das spezielle Beispiel in Aufgabe 1 an.  Hier ist die Aufgabe die laengste Teilfolge in einem Wort zu finden, die ein Palindrom  ist.", "start": 330.76, "end": 355.88}, {"text": "  Ein Palindrom ist definiert als ein Wort, das von hinten und vorne gelesen das Gleiche  ergibt.  Die Teilfolge muss dabei nicht an einem Stueck vorkommen.  Beispiele sind wir hier an dem Wort Datenstrukturen.  Die laengste Teilfolge, die gleichzeitig ein Palindrom ist, seht ihr in der ersten Zeile.  Wir nehmen das e, das r, das u, dann das t und anschliessend wieder u, r, e.", "start": 355.88, "end": 379.71999999999997}, {"text": "  Somit ergibt sich das folgende Palindrom.  In Datenstrukturen sind noch andere Palindrome enthalten, wie ihr hier seht.  Diese sind allerdings kuerzer.  Ausserdem sind das hier nicht alle Teilfolgen, die ein Palindrom bilden.  Jeder Buchstabe fuer sich zum Beispiel ist ein Palindrom der Laenge 1.  Schauen wir uns aber nun an, wie man dieses Problem loesen kann.", "start": 379.71999999999997, "end": 403.79999999999995}, {"text": "  Eine Moeglichkeit waere, einfach alle Moeglichkeiten, die es gibt, durchzuprobieren.  Die sogenannte Brute Force Methode.  Das ganze habe ich hier einmal an dem Beispiel des Wortes Otto gezeigt.  Moechte man alle moeglichen Teilfolgen des Wortes erzeugen, wuerde sich dieser Baum hier ergeben.  Damit ergebe sich eine Laufzeit von o, von n mal 2 hoch n.", "start": 403.79999999999995, "end": 428.76000000000005}, {"text": "  Fuer sehr grosse Woerter waere die Laufzeit also viel zu hoch, um das effizient auszufuehren.  Wir muessen uns also ueberlegen, wie wir dieses Problem reduzieren koennen.  Schauen wir uns diesen Baum genauer an, faellt uns auf, dass gewisse Teile des Baumes identisch sind.  Das sind zum Beispiel diese hier.  Wir ueberpruefen hier in zwei Teilbaeumen genau das gleiche.", "start": 428.76000000000005, "end": 451.12}, {"text": "  Das ist ein bekanntes Problem, zudem es beim Top Down Ansatz kommen kann.  Schauen wir uns also alternativ einmal an, wie man das ganze im Bottom-Up-Verfahren mit dynamischer Programmierung loesen kann.  Der Ansatz ist hier wie folgt.  Wir wissen per Definition, dass jede Teilfolge der Laenge 1 ein Palindrom ist.  Nun kann man im Bottom-Up-Verfahren die Laenge der Teilfolgen immer weiter erhoehen.", "start": 451.12, "end": 476.08000000000004}, {"text": "  Jede neue Uebereinstimmung erhoeht dann die Laenge des Palindromes.  Um sich die bisherigen Ergebnisse zu merken, speichern wir uns die Sinn einer Matrix.  Fuer das Beispiel Otto koennte das also so aussehen.  Wir haben hier auf der Diagonalen die Initialwerte, also die Werte fuer Teilfolgen der Laenge 1.  Anschliessend koennen wir diese Werte dann benutzen, um weitere Teilfolgen zu untersuchen.", "start": 476.08000000000004, "end": 502.76}, {"text": "  Da wir nach Ausfuehren dieser Matrix die optimale Loesung gefunden haben,  beschraenkt sich die Laufzeit hier auf o von n\u00b2.  Damit ist es fuer grosse Woerter deutlich schneller als der Top Down Ansatz.  Wir haben nun also gesehen, ein wichtiger Teil der dynamischen Programmierung ist es,  eine Datenstruktur zu finden, in der man Zwischenergebnisse effizienten speichern kann.", "start": 502.76, "end": 525.48}, {"text": "  In unserem Beispiel hier ist das die folgende Matrix.  Der zweite wichtige Teil der dynamischen Programmierung ist es,  ein Weg zu finden, diese Matrix zu fuellen.  Hier kommt die sogenannte Obfunktion ins Spiel.  Diese gibt mir fuer jedes Feld in der Matrix mit dem Index i und j eine Regel, wie dieses zu befuellen ist.", "start": 525.48, "end": 551.24}, {"text": " Hier sind oft Regeln fuer die Initialisierung enthalten,  in dem Fall hier die erste Zeile, wo wir sehen, dass die Diagonale,  wo i gleich j ist, mit einer 1 befuellt ist, und Regeln, die darauf aufbauen.  Die Initialisierung kann man sich dabei vorstellen als Rekursionsanker,  die Regeln, die darauf aufbauen als Rekursiven Aufruf.", "start": 551.24, "end": 569.72}, {"text": "  Hat man die Datenstruktur und die Obfunktion fuer ein solches Problem gefunden,  so laesst es sich schnell auch fuer andere Werte loesen.  Das Ganze wollen wir nun einmal an diesem Beispiel ausprobieren.  Wir haben hier den String T, A, G, A, G, T, G und moechten hier die laengste Palindrom-Teilfolge finden.", "start": 569.72, "end": 593.28}, {"text": "  Dazu erstelle ich erneut so eine Matrix, wo ich entlang der Zeilen das Wort schreibe und entlang der Spalten.  Die Obfunktion zur Loesung dieses Problems habe ich euch ja bereits gegeben.  Probiert doch einmal selbst das Ganze damit zu loesen und anschliessend zeige ich euch die Loesung.  Wir haben hier nun noch einmal unsere Matrix und unsere Obfunktion, um die Matrix zu befuellen.", "start": 593.28, "end": 616.36}, {"text": "  Der Index der Spalten unserer Matrix ist j, der Index der Zeilen unserer Matrix ist i.  Nun beginnen wir mit der Initialisierung.  Die Initialisierung entspricht hier dem ersten Fall unserer Obfunktion, weil auf der Diagonalen der Index i gleich dem Index j ist.  Das bedeutet, ich fuelle meine gesamte Diagonale, wo i gleich j ist, mit einer 1.", "start": 616.36, "end": 642.36}, {"text": "  Nachdem wir die Matrix initialisiert haben, beginnen wir damit, die naechste Diagonale zu fuellen.  Hier schaue ich nun fuer jedes Feld, welcher der weiteren drei Faelle zugtrift.  Beginn werden wir mit diesem Feld.  Hier ist der String an der Stelle i, also t, ungleich dem String an der Stelle j, also a.  Somit trifft auch Fall 2 und Fall 3 nicht zu.", "start": 642.36, "end": 671.36}, {"text": "  Wir landen also in Fall 4 und dieser besagt, dass sich das Feld fuellen soll mit dem Maximum von der Obfunktion an der Stelle i und j-1  und der Obfunktion an der Stelle i plus 1 und j.  Ich bilde also das Maximum aus diesem Feld und diesem Feld, also den beiden anliegenden Feldern.  Das Maximum aus 1 und 1 ist 1, also trage ich auch in dieses Feld eine 1.  Machen wir mit diesem Feld weiter.", "start": 671.36, "end": 698.36}, {"text": "  Auch hier ist Stelle i und Stelle j das String nicht gleich, wir haben das g und das a.  Also landen wir wieder in Fall 4 und nehmen das Maximum aus diesem Feld und diesem Feld und das ist in dem Falle wieder 1.  Das Gleiche trifft auch auf das naechste Feld zu, die Strings an den Stellen sind wieder ungleich.  Wir nehmen also das Maximum aus den beiden anliegenden Feldern 1 und 1 und das ist 1.", "start": 698.36, "end": 725.36}, {"text": "  Im naechsten Feld haben wir ein g und ein a, die Strings an den Stellen sind also nicht gleich.  Wir nehmen das Maximum aus den beiden anliegenden Feldern 1 und 1 und das ist 1.  Das Gleiche trifft auch auf dieses Feld und auf dieses Feld zu.  Damit haben wir diese Diagonale abgeschlossen.  Schauen wir uns also nun die naechste Diagonale an.  Diese beginnt mit dem Feld hier oben.", "start": 725.36, "end": 747.36}, {"text": "  Wir schauen wieder, sind die Strings an diesen Stellen gleich?  Das sind sie nicht.  Also kommen wir wieder in den vierten Fall.  Wir schauen uns dieses Feld an, dieses Feld an, nehmen das Maximum, das ist in dem Falle 1.  Nun schauen wir uns dieses Feld an.  Nun sind die Strings gleich.  Wir schauen, ist i plus 1 gleich j, das waere der zweite Fall.", "start": 747.36, "end": 774.36}, {"text": "  i plus 1 waere 2, j ist allerdings 3, wenn wir mit nullbasierten Indizes arbeiten.  Die beiden sind also nicht gleich.  Somit kommen wir in den dritten Fall.  i ist gleich string j.  Ich nehme also das Optimum von i plus 1 und j minus 1, also dieses Feld hier, und addiere 2 obendrauf.  Ich nehme dieses Feld, die 1 plus 2 ergibt also 3.  Machen wir das Ganze noch einmal mit dem naechsten Feld.", "start": 774.36, "end": 803.36}, {"text": "  Auch hier haben wir an den Strings wieder ein g und ein g.  Die beiden Stellen in den Strings sind also gleich.  Ich muss also nur ueberpruefen, ist i plus 1 gleich j.  j an dieser Stelle hier ist 0, 1, 2, 3, 4.  Und i an der Stelle ist 0, 1, 2.  i plus 1 ist also nicht gleich j.  Somit landen wir im dritten Fall.  Nehmen also wieder das Feld links unten und addieren 2 obendrauf.", "start": 803.36, "end": 841.36}, {"text": "  Gehen wir zum naechsten Schritt.  Hier sind die Strings nun wieder nicht gleich.  Wir haben ein t und ein a.  Somit kommen wir in den vierten Fall.  Nehmen das Maximum aus dieser 1 und dieser 1 und somit haben wir ein Maximum von 1.  Widmen wir uns nun noch dem letzten Feld der Diagonalen.  Das ist dieses hier.  Hier ist das String an den Stellen wieder gleich.  Wir haben g und g.", "start": 841.36, "end": 871.36}, {"text": "  i plus 1 ist 5, j ist 6, das heisst Fall 2 tritt nicht ein.  Somit landen wir in Fall 3.  Wir nehmen also wieder das Feld links unten, unsere 1 und addieren 2 obendrauf.  Landen somit bei 3.  Damit ist die Diagonale abgeschlossen und wir schauen uns die naechste Diagonale an.  Warum machen wir das ueberhaupt diagonalerweise?  Schauen wir uns zum Beispiel einmal dieses Feld hier an.", "start": 871.36, "end": 893.36}, {"text": "  Dort haben wir g und t.  Die Strings sind also nicht gleich, somit landen wir in Fall 4.  Wir muessen also das Maximum aus diesem Feld und aus diesem Feld bilden.  Diese beiden Felder haben wir allerdings noch nicht befuellt, das heisst wir koennen auch dieses Feld noch nicht befuellen.  Deswegen gehen wir immer Diagonale fuer Diagonale vor.  Machen wir also mit der naechsten Diagonalen weiter.", "start": 893.36, "end": 918.36}, {"text": "  a ist ungleich t, somit landen wir in Fall 4  Wir muessen das Maximum aus diesem Feld und diesem Feld bilden, das waere in dem Fall 3.  Hier haben wir a und g, a und g sind auch nicht gleich, das heisst ich nehme wieder das Maximum aus diesem Feld und diesem Feld.  Also 3.", "start": 918.36, "end": 943.36}, {"text": "  Hier haben wir t und g, t und g sind auch nicht gleich, ich nehme also das Maximum aus diesem Feld und aus diesem Feld, das waeren 3.  Und hier haben wir g und a, g und a sind auch nicht gleich, ich nehme also das Maximum aus diesem Feld und diesem Feld also 3.  Die Diagonale ist damit fertig, wir koennen also die naechste Diagonale beginnen.", "start": 943.36, "end": 964.36}, {"text": "  Hier haben wir g und t, g und t sind nicht gleich, das heisst ich nehme wieder das Maximum aus diesen beiden, das ist 3.  Hier haben wir t und a, t und a sind auch nicht gleich, das heisst ich nehme wieder das Maximum aus diesen beiden, also 3.", "start": 964.36, "end": 986.36}, {"text": "  Hier haben wir nun g und g, g und g sind gleich, das heisst ich ueberpruefe ist i plus 1 gleich j, i plus 1 sind 3, j ist 6, also nein, das heisst ich lande im Fall 3.  Ich nehme also von links unten das Feld, die 1 und addiere 2 obendrauf, lande somit bei 3.", "start": 986.36, "end": 1007.36}, {"text": "  Nun widmen wir uns der naechsten Diagonale, das ist diese, t und t sind gleich, i plus 1 ist 1, j ist 5, die sind also nicht gleich, somit landen wir in Fall 3.  Ich nehme also wieder dieses Feld hier, links unten und addiere 2 obendrauf, womit ich bei 5 lande.", "start": 1007.36, "end": 1029.3600000000001}, {"text": "  Nun schauen wir uns dieses Feld an, hier haben wir g und a, g und a sind nicht gleich, das heisst ich lande in Fall 4, nehme also wieder das Maximum aus dieser 3 und dieser 3 lande somit bei 3.", "start": 1029.3600000000001, "end": 1045.3600000000001}, {"text": "  Nun schauen wir uns noch diese Diagonale an, die hat nur noch ein Feld, hier haben wir ein g und ein t, g und t sind nicht gleich, somit lande ich wieder in Fall 4, nehme also das Maximum aus 5 und 3 und das ist 5.  Unser Endergebnis steht dann hier oben rechts in diesem Feld.  Das bedeutet, die laengste Palindromteilfolge in unserem Wort hat die Laenge 5.", "start": 1045.36, "end": 1057.36}]}]