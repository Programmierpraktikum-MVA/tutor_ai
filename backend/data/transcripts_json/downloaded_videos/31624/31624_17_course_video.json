[{"lecture": "31624_17_course_video", "Timestamps": [{"text": "  Schauen wir uns in diesem Video nun abschliessend die Hausaufgabe zu dieser Woche an.  In dieser Hausaufgabe erhalten wir als Eingabe ein Bild und moechten nun bestimmte Algorithmen auf diesem Bild ausfuehren.  Damit die folgenden Aufgaben verstaendlicher werden, moechte ich erst einmal die Repraesentation des Bildes erklaeren.  In unserem Beispiel repraesentieren wir das Bild naemlich als ein Grafen.", "start": 0.0, "end": 28.0}, {"text": "  Jeder Pixel in diesem Bild entspricht einem Knoten in unserem Grafen.  Jeder Knoten ist dann mit dem Pixel unter sich, links unter sich und rechts unter sich verbunden.  Dadurch ergibt sich die folgende Struktur, die wir hier auf dem Bild sehen.  Um allerdings einen zentralen Start und einen zentralen Endknoten zu haben, werden noch zwei Knoten dem Grafen hinzugefuegt.", "start": 28.0, "end": 55.0}, {"text": "  Der erste Knoten als Startknoten ist mit allen Pixeln der ersten Zeile verbunden und der Endknoten ist mit allen Pixeln der letzten Zeile verbunden.  Haben wir diese Struktur verstanden, koennen wir uns die Aufgaben genauer anschauen.  In der ersten Aufgabe sollte euch lediglich mit den Klassen und Schnittstellen vertraut machen.", "start": 55.0, "end": 72.0}, {"text": "  Schaut also, wie diese Bilder eingelesen werden und wie diese als Grafen repraesentiert werden.  Stellt auch sicher, dass ihr diese Repraesentation als Graf verstanden habt.  In der zweiten Aufgabe sollte dann die Klasse Matrix Image implementieren.  Hierzu gehoeren zwei Funktionen, die Funktion Contrast und die Funktion Remove V-Path.", "start": 72.0, "end": 98.0}, {"text": "  Bei der Funktion Contrast erhaltet ihr zwei Koordinaten als Eingabe und soll den absolut betragte Differenz der Pixel-Werte zurueckgeben.  Dazu muesst ihr erst einmal ueberpruefen, ob diese Koordinaten, die ihr uebergeben bekommen habt, ueberhaupt gueltig sind,  das heisst innerhalb eurer Matrix bzw. eures Bildes liegen.", "start": 98.0, "end": 114.0}, {"text": "  Anschliessend muesst ihr die korrekten Werte aus der Matrix an der entsprechenden Stelle auslesen fuer beide Koordinaten  und dann bildet ihr die Differenz zwischen den beiden Werten und anschliessend den Betrag davon,  das ist der Wert, den ihr als Kontrast zurueckgebt.  Kurz gesagt, sollt ihr also den Unterschied der Werte zwei benachbarte Pixel zurueckgeben.", "start": 114.0, "end": 135.0}, {"text": "  Fuer Remove V-Path erhaltet ihr als Eingabe ein Pfad im Grafen, der dann geloescht werden soll.  So wie der Graf aufgebaut ist, startet der Pfad immer beim Startknoten  und besteht dann aus einem Pixel bzw. einem Knoten pro Zeile in der Matrix.  Enten tun sie immer mit dem Endknoten.  Das Ganze wollen wir uns noch einmal an dieser Matrix anschauen.", "start": 135.0, "end": 157.0}, {"text": "  Ein gueltiger Path koennte also sein, starten bei Knoten 40,  dann bei der 3, dann zum Beispiel die 10, dann die 9, 10, die 28, die 37 und dann der Endknoten.  Jeder Pfad hat also eine feste Laenge und enthaelt aus jeder Zeile einen Knoten.", "start": 157.0, "end": 187.0}, {"text": " Um diesen Pfad aus der Matrix zu loeschen, koennt ihr eine neue Matrix erstellen, die entsprechend eine Spalte weniger hat  und dann den Inhalt in die neue Matrix kopieren, der eben nicht geloescht werden sollte.  Somit enthaelt die neue Matrix dann alle Werte der alten Matrix bis auf eben den Pfad, der aus der Matrix geloescht werden sollte.", "start": 187.0, "end": 202.0}, {"text": "  In der dritten Aufgabe soll dann die klasse Shortest Path Topological programmiert werden.  Hierbei erhaltet ihr fuer den Konstruktor ein gerichteten Grafen und den Startknoten als Eingabe.  Hier gibt es zwar keine direkte Ausgabe, aber ihr sollt die Vorgaenger und die Distanz zum Startknoten fuer alle Knoten als Attribut setzen.  Eben genauso, wie wir es in der Hand-Simulation gemacht haben.", "start": 202.0, "end": 225.0}, {"text": "  Dazu sollt ihr im Konstruktor Dijkstra auf dem Grafen ausfuehren.  Statt einer Priority Queue sollen die Knoten nun in Reverse Postorder abgearbeitet werden.  Dazu koennt ihr die bereits implementierte topologische Sortierung verwenden.  Die Funktion Relax macht dann genau das, was wir in den vorherigen Videos Distanz-Updaten genannt haben.", "start": 225.0, "end": 251.0}, {"text": "  Sie erhaelt eine Kante und soll dann fuer den Zielknoten ueberpruefen, ob dort Distanz- und Vorgaenger ein Update brauchen.  Falls ja, soll dieses Update durchgefuehrt werden.  Abschliessend soll noch die klasse Content-Aware-Image-Resizing implementiert werden.  Hier erhaelt ihr keine Eingabe und sollt den vertikalen Pfad mit geringstem Kontrast zurueckgeben.", "start": 251.0, "end": 270.0}, {"text": "  Nutzt hierzu die bereits implementierten Funktion.  Denn der Pfad mit geringstem Kontrast ist nichts anderes als der kuerzeste Pfad durch den Grafen, auf dem die Kantengewichte dem Kontrast zwischen zwei Knoten entsprechen.  Das alles laesst sich dann kombinieren, um Stueck fuer Stueck immer ein vertikalen Pfad mit geringstem Kontrast aus dem Bild zu loeschen.", "start": 270.0, "end": 301.0}, {"text": "  Ziel davon ist es, Spalten aus dem Bild zu loeschen, die einen moeglichst geringen Informationsanteil haben und das Loeschen dieser Spalten somit am wenigsten auffaellt.", "start": null, "end": 301.0}]}]