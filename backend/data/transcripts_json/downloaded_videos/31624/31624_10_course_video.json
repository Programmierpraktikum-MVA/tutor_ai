[{"lecture": "31624_10_course_video", "Timestamps": [{"text": "  In diesem Video werden wir uns den A-Sterneigurhythmus genauer anschauen.  Bevor wir uns allerdings das Thema A-Sterneigurhythmus genauer anschauen, muessen wir uns erst mit dem Thema Heuristik beschaeftigen.  Wie bereits im letzten Video erwaehnt, ist eine Heuristik eine Abschaetzung einer unbekannten Groesse.  Das wird vielleicht deutlicher, wenn wir uns das Beispiel Kuerzeste Wege anschauen.", "start": 0.0, "end": 31.0}, {"text": "  Um Kuerzeste Wege zu bestimmen, haben wir bereits die Algorithmen Dijkstra und Bellman Ford kennengelernt.  Diese haben auf einem Grafen von einem Startknoten aus die kuerzesten Wege zu allen anderen Knoten gefunden.  Nun gehen wir einmal davon aus, wir wollen von einem Startknoten in einem Grafen den kuerzesten Weg zu einem Zielknoten finden.", "start": 31.0, "end": 53.0}, {"text": "  Die Heuristik in einem solchen Beispiel koennte die Abschaetzung der Distanz von einem Knoten zum Ziel sein.  Diese ist naemlich, bis wir den Zielknoten untersucht haben, unbekannt.", "start": 53.0, "end": 72.0}, {"text": " Doch wie koennen wir diese Abschaetzung durchfuehren?  Wir verwenden hierfuer bereits bekannte Informationen, zum Beispiel die Position unseres Knoten, um eine unbekannte Information, naemlich die Distanz zum Zielknoten, zu schaetzen.", "start": 72.0, "end": 83.0}, {"text": "  Wenn wir nun einen heuristischen Algorithmus entwickeln, der die kuerzesten Wege auf einem Grafen sucht, so findet dieser schneller eine Loesung, je besser unsere Heuristik ist.  Auf Grafen moechte ich nun einmal zwei Heuristiken vorstellen.  Wir bleiben hierbei bei dem Beispiel, dass wir von einem Startknoten auf schnellstem Weg einen Zielknoten erreichen moechten.", "start": 83.0, "end": 105.0}, {"text": "  Das findet zum Beispiel Anwendung, wenn wir auf Google Maps von einem Startpunkt zu einem Zielpunkt wollen und uns den kuerzesten Weg berechnen lassen.  So eine Karte kann auch interpretiert werden als ein Graf, indem jeder Punkt ein Knoten ist und die Strassen zwischen den Punkten die Kanten.  Als Beispiel sehen wir hier einmal ein Ausschnitt des Strassennetzes von Manhattan.", "start": 105.0, "end": 126.0}, {"text": "  Auf diesem Strassennetz sehen wir auch sehr schnell, woher unsere erste Heuristik ihren Namen hat.  Die erste Heuristik, die wir uns anschauen wollen, ist naemlich die Manhattan Distanz.  Hierbei gehen wir davon aus, dass jeder Knoten ein X und ein Y-Wert besitzt.  Die Manhattan Distanz soll nun die Distanz von einem Knoten zum Zielknoten abschaetzen.", "start": 126.0, "end": 151.0}, {"text": "  Das machen wir, indem wir den Unterschied der X-Koordinate mit dem Unterschied der Y-Koordinate summieren.  Wie das Ganze in der Praxis aussieht, sehen wir an dem folgenden Beispiel.  Hier wollen wir an diesem Punkt starten und das hier drueben ist unser Zielknoten.  Die Manhattan Distanz berechnet sich nun wie folgt.", "start": 151.0, "end": 171.0}, {"text": "  Ich summiere die Schritte in X Richtung zum Ziel mit den Schritten in Y Richtung zum Ziel.  Ich gehe hier einmal davon aus, dass jede Strassenkreuzung ein Knoten in meinem Graf ist  und die Strassen dazwischen die Kanten in meinem Grafen.  Die Manhattan Distanz wuerde sich also wie folgt berechnen.  Ich gehe in X Richtung 1, 2, 3 Schritte und in Y Richtung 1, 2, 3, 4, 5, 6, 7 Schritte.", "start": 171.0, "end": 202.0}, {"text": "  Die Manhattan Distanz zwischen den beiden Knoten waere die Summe, also in diesem Falle 10.  Was hat das Ganze nun mit Manhattan zu tun?  Am Strassennetz von Manhattan ist besonders, dass dieses fast ausschliesslich aus Quadraten besteht.  Somit gibt es oft kein direkten Weg zwischen zwei Knoten, sondern man muss immer diesen quadratischen Muster folgen.", "start": 202.0, "end": 223.0}, {"text": "  Somit macht es oft auch keinen Unterschied, welche Kanten man genau waehlt.  Markiert ist hier dieser Weg als schnellster Weg.  Die gleiche Distanz haette allerdings auch dieser Weg.  Und die gleiche Distanz hat auch dieser Weg.  Das koennen wir einmal kurz ueberschlagen.  Wir wissen, die Manhattan Distanz von der ersten Loesung war 10.  Nun machen wir das gleich noch einmal mit der anderen Loesung.", "start": 223.0, "end": 256.0}, {"text": "  Hier gehen wir zwei Schritte in diese Richtung, anschliessend drei Schritte in diese Richtung und dann fuenf Schritte in diese Richtung.  Auch das ergibt wieder ein Ergebnis von 10.  Wann immer also ein Graf so quadratisch angeordnet ist, bietet sich die Manhattan Distanz sehr gut als Abschaetzung von Distanzen an.", "start": 256.0, "end": 276.0}, {"text": "  Ist naemlich vom Startknoten der X und der Y-Wert bekannt und vom Zielknoten auch, dann kann ich sehr schnell die Distanz abschaetzen.  Nun werdet ihr euch aber denken, Moment mal, in der Realitaet sieht ja nicht jedes Strassennetz so aus.  Benutze ich dann trotzdem die Manhattan Distanz zur Abschaetzung.  Die Antwort dazu lautet Nein.", "start": 276.0, "end": 293.0}, {"text": "  Im Gegensatz zur Manhattan Distanz gibt es naemlich noch die euklide Distanz.  Hierbei wird auch die Differenz der X-Koordinate und der Y-Koordinate gebildet.  Diese wird allerdings jeweils quadriert, dann summiert und anschliessend die Wurzel davon gezogen.  Das Ergebnis kann man sich vorstellen als Luftlinie zwischen zwei Knoten, in diesem Beispiel als rote Linie markiert.", "start": 293.0, "end": 320.0}, {"text": "  Auf Grafen wie zum Beispiel Strassennetzen, die keine strikte quadratische Anordnung haben, bietet sich diese Heuristik eher an.  Doch wie kann man diese Heuristiken nun benutzen, um die kuerzesten Pfade von Start zu Ziel zu finden?  Hierzu wurde der heuristische Algorithmus A-Stern entwickelt.  Dieser ist sehr aehnlich zu Dijkstra, verwendet allerdings zusaetzlich Heuristiken.", "start": 320.0, "end": 345.0}, {"text": "  Wenn ihr euch noch erinnert, haben wir bei Dijkstra immer den Knoten mit der geringsten Distanz zum Startknoten aus der Q genommen.  Was wir nun allerdings bei A-Stern machen, ist immer den Knoten als naechstes aus der Q nehmen, der die geringste Geschaetzte Distanz zwischen Start und Zielknoten ueber diesen Knoten hat.", "start": 345.0, "end": 363.0}, {"text": "  Das erreichen wir, indem wir die Distanz zum Zielknoten ueber Heuristiken abschaetzen.  Das findet vor allem Anwendung in Navigationssystem.  Wenn wir uns ein Strassennetz anschauen und das uns als Graf denken, dann hat dieser Graf sehr viele Knoten und Kanten.", "start": 363.0, "end": 386.0}, {"text": "  Was wir nun machen wollen, indem wir einen heuristischen Algorithmus verwenden, ist nicht vom Startknoten aus alle Knoten besuchen und anschliessend die kuerzeste Distanz fuer einen Knoten zu finden und den Pfad dorthin,  sondern wir untersuchen nur die Knoten und Kanten, die auch in Richtung unseres Zielknotens gehen.", "start": 386.0, "end": 401.0}, {"text": "  Hierbei verwenden wir als heuristik die Luftlinie, also die euklitische Distanz, um die Distanz von einem Knoten zum Zielknoten abzuschaetzen.  Somit muessen viele Knoten gar nicht erst besucht werden, um den schnellsten Pfad zum Zielknoten zu finden.  Wie gehen wir dabei vor?  Auch dieses Vorgehen duerfte Euch von Dykstra sehr bekannt vorkommen.", "start": 402.0, "end": 420.0}, {"text": "  Wir fuegen zuerst ein Startknoten mit Abstand Null in eine leere Priority Queue ein.  Dann gehen wir in eine Schleife, die so lange laeuft, bis die Priority Queue leer ist.", "start": 420.0, "end": 440.0}, {"text": " In jeder Iteration dieser Schleife nehmen wir dann als erstes das erste Element aus der Queue, markieren dieses als Besucht,  updaten dann die Distanz zu allen Nachbarn, wenn wir einen kuerzeren Weg zu diesen Nachbarn gefunden haben  und dann fuegen wir die Nachbarn, die noch nicht in der Queue sind oder besucht wurden, in die Queue ein.", "start": 440.0, "end": 452.0}, {"text": "  Der Unterschied zu Dykstra liegt allerdings darin, wie die Elemente in unserer Priority Queue sortiert sind.  Bei Dykstra waren die Elemente wie folgt sortiert.  Wir wollten fuer einen Knoten k die Distanz vom Startknoten aus wissen.  Diese haben wir berechnet, indem wir die Distanz zum Vorgaengerknoten nehmen  und das Kantengewicht zwischen Vorgaengerknoten und diesem Knoten k addieren.", "start": 452.0, "end": 475.0}, {"text": "  Nach diesem Prinzip haben wir dann unsere Elemente in der Priority Queue sortiert.  Bei a Stern fuegen wir noch die Heuristik als Abschaetzung der Distanz zwischen dem Knoten und dem Zielknoten ein.  Wir sortieren unsere Elemente, naemlich wie folgt in der Queue.", "start": 475.0, "end": 495.0}, {"text": " Zum einen nehmen wir die Distanz, die wir schon bei Dykstra berechnet haben,  addieren dann allerdings noch die Heuristik von k oben drauf.  Somit schaetzen wir ab, wie gross die Distanz von Startknoten zum Knoten k ist,  plus die Abschaetzung von Knoten k zum Zielknoten.  Anhand dieser Werte arbeiten wir dann unsere Elemente in der Priority Queue ab.", "start": 495.0, "end": 517.0}, {"text": "  Diesen Algorithmus wollen wir uns nun an verschiedenen Beispielen angucken  und dabei vor allem beobachten, welche Auswirkung die Heuristik auf die Loesung unseres Problems hat.  Beginnen wollen wir mit diesem Beispiel.  Wir haben hier ein gerichteten Grafen und wollen den schnellsten Pfad vom Startknoten a zum Zielknoten f finden.  Die Heuristik betraegt hier fuer jeden Knoten 0.", "start": 517.0, "end": 546.0}, {"text": "  Ich schaue also wie bei Dykstra, welchen Knoten ich zuerst besuche.  Von a aus kann ich Knoten b, c und d erreichen.  Ich will nun den Knoten mit der kleinsten Summe aus Distanz zu diesem Knoten und Heuristik von diesem Knoten.", "start": 546.0, "end": 574.0}, {"text": " Zu Knoten b benoetige ich eine Distanz von 3 plus Heuristik 0 ergibt 3,  zu Knoten c eine Distanz von 6 plus Heuristik 0 ergibt 6  und zu Knoten d eine Distanz 4 plus Heuristik 0 ergibt 4.  Der kleinste Wert ist hier die 3 von b.  Das heisst, ich habe den kuerzesten Weg zu b gefunden und untersuche diesen Knoten als naechstes.  Zu b benoetige ich eine Distanz von 3 und als Vorgaenger habe ich a.", "start": 574.0, "end": 592.0}, {"text": "  Damit habe ich b besucht.  Ich schaue mir also an, welche Knoten ich nun von meinen besuchten Knoten aus erreichen kann.  Das ist weiterhin c mit 6, d mit 4.  Ich kann nun allerdings auch c mit 4 und e mit 7 erreichen.  Warum 7 bei e?  Ich brauche eine Distanz von 3 zu b plus die Kante zu e.  4 macht 7 plus die Heuristik von e 0 macht 7.  Ich habe also fuer c und d den Wert 4, fuer e den Wert 7.", "start": 592.0, "end": 631.0}, {"text": "  Wenn ich alphabetisch vorgehe, untersuche ich als naechstes c.  Ich erreiche also Knoten c mit einer Distanz von 4 von Knoten b aus.  Nun gucke ich im naechsten Schritt wieder, welchen Knoten ich als naechstes untersuche.  Zu d brauche ich weiterhin eine Distanz von 4 von Knoten a aus.  Zu e brauche ich weiterhin eine Distanz von 7 von Knoten b aus.", "start": 632.0, "end": 660.0}, {"text": "  Die kleinere Distanz hat d, das heisst ich untersuche d als naechstes.  Die kuerzeste Distanz zu d ist 4, wenn ich von Knoten a auskomme.  Nun schaue ich, welchen Knoten ich als naechstes besuche.  Den Knoten e erreiche ich von Knoten b aus mit einer Distanz von 7  und den Knoten e erreiche ich von d aus mit einer Distanz von 6.  6 ist die kuerzere Distanz, das heisst ich waehle den Pfad von d aus.", "start": 660.0, "end": 692.0}, {"text": "  Nun bleibt noch ein Knoten uebrig, diesen erreiche ich nur von e aus  und hier erhalte ich ein Ergebnis von 7, wenn ich von Knoten e auskomme.  Ich habe hier also den kuerzesten Pfad gefunden, das ist in dem Falle a, d, e, f.  Und dieser Pfad hat die Laenge 7.", "start": 692.0, "end": 722.0}, {"text": " Was euch vielleicht aufgefallen ist, dadurch das die Heuristik ueberall null war,  haben wir quasi ein Dijkstra-Algorithmus auf diesem Grafen ausgefuehrt.  Das hatte allerdings auch zur Folge, dass wir hier jeden Knoten untersuchen mussten,  um zu unserem Ergebnis zu kommen.  Schauen wir uns dazu im Vergleich noch einmal denselben Grafen an,  diesmal allerdings mit anderen Heuristikwerten.", "start": 722.0, "end": 744.0}, {"text": "  Die Heuristik ist nun nicht ueberall null.  Wir wollen nun also wieder a Stern ausfuehren.  Von a aus benoetige ich zu b eine Distanz von 3 und addiere die 2 der Heuristik obendrauf,  habe also ein Wert von 5, von a zu c benoetige ich eine Distanz von 6 plus die Heuristik 1 macht 7  und von a zu d benoetige ich eine Distanz von 4 plus die Heuristik von 1 ergibt 5.", "start": 744.0, "end": 775.0}, {"text": "  b und d haben beide den Wert 5, das heisst ich arbeite alphabetisch b zuerst ab.  Fuer b notiere ich nun wieder nur die Distanz, also in dem Falle 3, und mein Vorgaengerknoten a.  Nun untersuche ich wieder alle anderen Knoten.  Zu c brauche ich nun eine Distanz von 4, von Knoten b aus, plus die Heuristik 1 ergibt 5.", "start": 775.0, "end": 801.0}, {"text": "  Zu Knoten d brauche ich weiterhin die Distanz von 4 plus die Heuristik 1 ergibt auch 5  und zu Knoten e von Knoten b aus benoetige ich eine Distanz von 7 plus die Heuristik von 1 ergibt 8.  Alphabetisch gesehen untersuche ich also c als naechstes.  Hier habe ich eine Distanz von 4, wenn ich von Knoten b komme.", "start": 801.0, "end": 823.0}, {"text": "  Nun ueberpruefe mir wieder die Knoten, die ich erreichen kann, aber noch nicht besucht habe.  Knoten d erreiche ich mit einer Distanz von 4 plus einer Heuristik von 1 ergibt also 5  und Knoten e erreiche ich mit einer Distanz von 7 plus Heuristik 1 ergibt 8,  das heisst ich untersuche Knoten d als naechstes.  Zu Knoten d benoetige ich eine Distanz von 4 und komme vom Knoten a aus.", "start": 824.0, "end": 850.0}, {"text": "  Nun untersuche ich den naechsten Knoten, ueber Knoten b benoetige ich weiterhin eine Distanz von 7  ueber Knoten d nur eine Distanz von 6, das heisst ich update Knoten e mit einer Distanz von 6 von Knoten d aus.  Und nun bleibt noch Knoten f und Knoten f ist wieder nur von Knoten e erreichbar mit einer Distanz von 7.  Wir finden also auch hier den kuerzesten Pfad a, d, e und f.", "start": 850.0, "end": 881.0}, {"text": "  Der Pfad hat auch hier wieder eine Distanz von 7.  Was nun allerdings auffaellt, wir hatten hier zu Beginn ein Tiebreaker zwischen b und d.  Zu b haben wir eine Distanz von 3 gehabt plus Heuristik von 2 ergibt 5, zu d eine Distanz von 4 plus Heuristik 1 ergibt auch 5.  Haette ich also diesen Tiebreaker zuerst mit d aufgeloest, dann haetten wir den Knoten d schneller untersucht.", "start": 881.0, "end": 909.0}, {"text": "  Das haette uns potenziell auch schneller zur Loesung gebracht.  Was das fuer eine Auswirkung haben koennte, sehen wir in diesem Beispiel.  Auch hier haben wir wieder denselben Grafen, allerdings mit angepasster Heuristik.  Wer genau hinschaut sieht, dass die Heuristik hier immer genau dem Wert entspricht, den man von dem Knoten aus noch zum Zielknoten braucht.", "start": 912.0, "end": 935.0}, {"text": "  Was dann passiert, sehen wir gleich. Wir wollen auch hier wieder a-Stern ausfuehren.  Knoten b, erreiche ich mit einer Distanz von 3 plus eine Heuristik von 5 ergibt 8.  Knoten c, erreiche ich mit einer Distanz von 6 plus eine Heuristik von 4 ergibt 10.  Knoten d, erreiche ich mit einer Distanz von 4 plus eine Heuristik von 3 ergibt 7.", "start": 935.0, "end": 959.0}, {"text": "  Den kleinsten Wert hat hier d, das heisst ich untersuche d als Naechstes.  D erreiche ich wieder mit einer Distanz von 4 von Knoten a aus.  Nun schaue ich mir wieder die anderen Knoten an.  Zu b brauche ich weiterhin Distanz von 3 plus Heuristik 5 ergibt 8.  Zu c brauche ich weiterhin Distanz 6 plus Heuristik 4 ergibt 10.  Und zu Knoten e brauche ich nun Distanz 6 plus Heuristik 1 ergibt 7.", "start": 959.0, "end": 988.0}, {"text": "  Hier ist 7 immer noch der kleinste Wert, das heisst ich untersuche e als Naechstes.  Zu e brauche ich eine Distanz von 6 von Knoten d aus.  Nun schaue ich wieder zu Knoten b, brauche ich eine Distanz von 3 plus Heuristik 5 ergibt 8.  Zu Knoten c, eine Distanz von 6 plus Heuristik 4 ergibt 10.", "start": 988.0, "end": 1012.0}, {"text": " Und zu Knoten f, eine Distanz von 7 plus, die Heuristik steht hier nicht dran,  aber die Heuristik des Zielknotens ist immer 0.  Das heisst die 7 ist auch hier wieder kleiner.  Das heisst ich untersuche hier mein Zielknoten als Naechstes  und erreiche diesen mit einer Distanz von 7 von Knoten e.  Da ich hier nun mein Zielknoten erreicht habe, bin ich auch schon fertig mit dem Algorithmus.", "start": 1012.0, "end": 1035.0}, {"text": "  Was wir also gesehen haben, wenn die Heuristik unseren Pfad perfekt abschaetzt,  da muessen wir im Best Case nur die Knoten des Pfades untersuchen, um zu unserer optimalen Loesung zu kommen.  Je besser die Heuristik ist, desto weniger Knoten unseres Grafen muessen wir also untersuchen,  um die optimale Loesung zu finden.", "start": 1035.0, "end": 1055.0}, {"text": "  Jetzt koennte man natuerlich sagen, ok, dann waere es ja einfach fuer die Heuristik immer den perfekten Wert einzusetzen.  Das Problem ist, dass dieser Wert eben geschaetzt werden muss.  Wuessten wir von jedem Knoten die echte Distanz zum Ziel,  dann braeuchten wir unseren Algorithmus gar nicht erst ausfuehren.  Natuerlich haben wir auch hier wieder den optimal Pfad gefunden.", "start": 1055.0, "end": 1081.0}, {"text": "  Das ist a, d, e, f und eine Pfadlaenge von 7.  Schauen wir uns nun allerdings noch einmal an, was passiert, wenn wir die Heuristik noch weiter erhoehen.  Auch auf diesem Beispiel wollen wir wieder a Stern ausfuehren.  Zu Knoten b benoetigen wir eine Distanz von 3 plus Heuristik 5 ergibt 8.  Zu Knoten c, eine Distanz von 6 plus Heuristik 6 ergibt 12.", "start": 1084.0, "end": 1110.0}, {"text": "  Und zu Knoten d, eine Distanz von 4 plus Heuristik 7 ergibt 11.  Den kleinsten Wert hat hier b mit 8, das heisst ich untersuche b als naechstes,  erreiche b mit einer Distanz von 3 von a aus.  Nun schaue ich wieder, welchen Knoten ich als naechstes untersuche.  Knoten c hat eine Distanz von 6 plus Heuristik 6 ergibt 12.  Knoten d, eine Distanz von 4 plus Heuristik 7 ergibt 11.", "start": 1110.0, "end": 1138.0}, {"text": "  Und Knoten e, eine Distanz von 7 plus Heuristik 1 ergibt 8.  8 ist hier der kleinste Wert, das heisst ich untersuche diesen Knoten als naechstes,  erreiche den hier mit einer Distanz von 7 von Knoten b.  Nun schaue ich wieder als naechstes, Knoten c,  erreiche ich mit einer Distanz von 6 plus Heuristik 6 ergibt 12.  Knoten d, mit einer Distanz von 4 plus Heuristik 7 ergibt 11.", "start": 1138.0, "end": 1167.0}, {"text": "  Und Knoten f, mit einer Distanz von 8 plus Heuristik 0 ergibt 8.  8 ist das kleinste, das heisst ich erreiche hier,  meinen Knoten mit einer Distanz von 8, von Knoten e aus.  Da ich nun mein Zielknoten erreicht habe,  gehe ich davon aus, dass ich den optimalen Weg gefunden habe.  Der Pfad, der hier gefunden wurde, war a, b, e, f.  Und die Laenge des Pfades betraegt 8.", "start": 1167.0, "end": 1201.0}, {"text": "  Was uns nun allerdings auffaellt, ist, dass das gar nicht der optimale Pfad zum Ziel ist.  Wir haben ja vorher schon festgestellt, a, d, e, f ist der optimale Pfad.  Doch woran liegt das?  Das liegt ganz einfach daran, dass die Heuristik von d viel zu hoch angesetzt war.  Hier benoetigen wir von d nur 3 Schritte bis zum Ziel,  die Heuristik schaetzt aber 7 Schritte bis zum Ziel.", "start": 1201.0, "end": 1225.0}, {"text": "  Deswegen wurde der Knoten d gar nicht erst untersucht.  Was wir daraus lernen, ist also, wenn die Heuristik den Weg zum Ziel ueberschaetzt,  dann ist nicht mehr garantiert, dass wir eine optimale Loesung finden.  Eine Heuristik darf beim a Sternalgorithmus also niemals ueberschaetzen,  unterschaetzen ist allerdings kein Problem.  Schauen wir uns nun abschliessend dieses Beispiel an.", "start": 1225.0, "end": 1254.0}, {"text": "  Hier sehen wir direkt auf den ersten Blick, dass die Heuristik stark ueberschaetzt.  Aber was hat das zur Folge? Fuehren wir a Stern einfach mal aus.  Von a zu b brauche ich eine Distanz von 3 plus Heuristik 40 ergibt 43.  Von a zu c brauche ich eine Distanz von 6 plus Heuristik 50 ergibt 56.  Von a zu d brauche ich 4 plus Heuristik 30 ergibt 34.", "start": 1254.0, "end": 1281.0}, {"text": "  34 ist der kleinste Wert, das heisst ich untersuche d als Naechstes.  d erreiche ich mit einer Distanz von 4, von Knoten a aus.  Fuer b und c hat sich nichts veraendert. Hier haben wir wieder 3 plus 40 ergibt 43 fuer b,  6 plus 50 ergibt 56 fuer c.  Und nun haben wir noch 6 zu e plus Heuristik 10 ergibt 16.  16 ist hier der kleinste Wert, das heisst ich untersuche e als Naechstes.", "start": 1281.0, "end": 1312.0}, {"text": "  e erreiche ich mit einer Distanz von 6, von Knoten d aus.  Und nun schaue ich noch einmal, welchen Knoten ich als Naechstes untersuche.  Ich habe fuer b den Wert 43, fuer c den Wert 56, fuer f den Wert 7.  7 ist deutlich kleiner, das heisst ich untersuche als Naechstes mein Knoten f.  Den erreiche ich mit einer Distanz von 7, von Knoten e aus.", "start": 1312.0, "end": 1341.0}, {"text": "  Auch hier finde ich also den optimalen Pfad a, d, e und f mit einer Distanz von 7.  Allerdings sehen wir auch, dass wir die Kantengewichte haetten komplett durchwuerfeln koennen  und wir waeren zum gleichen Ergebnis gekommen.  Hier sind naemlich die Heuristiken so gross gewaehlt,  dass die Kantengewichte ueberhaupt keinen Einfluss mehr auf die Reihenfolge haben,  in der wir die Knoten auswaehlen.", "start": 1341.0, "end": 1359.0}, {"text": "  Wuerden wir die Heuristiken zwischen zwei Knoten tauschen,  dann haetten wir wie im Beispiel darueber wieder das Problem,  dass wir mit der Heuristik die Distanz stark ueberschaetzen  und somit nicht unbedingt zu einer optimalen Loesung kommen.  Fassen wir nun also zusammen.  Im ersten Beispiel haben wir eine Heuristik von 0 fuer alle Knoten gehabt.", "start": 1359.0, "end": 1387.0}, {"text": "  Mit einer Heuristik von 0 fuer jeden Knoten fuehlen wir quasi Dijkstra auf dem Grafen aus.  Im zweiten Beispiel hatten wir eine Heuristik,  die die Distanz zum Zielknoten immer unterschaetzt hat.  Wir haben so trotzdem die richtige Loesung gefunden  und koennen uns im besten Fall auch Knoten einsparen.", "start": 1388.0, "end": 1409.0}, {"text": " Im dritten Beispiel entsprach die Heuristik immer genau der Distanz  von dem Knoten zum Zielknoten, also eine optimale Abschaetzung.  In diesem Fall mussten wir lediglich den optimalen Pfad zum Zielknoten untersuchen.  Im vierten Beispiel haben wir dann an einigen Knoten mit der Heuristik ueberschaetzt.  Somit kam wir dann nicht mehr zu einer optimalen Loesung.", "start": 1409.0, "end": 1432.0}, {"text": "  Im letzten Beispiel haben wir die Heuristik sehr gross gewaehlt und damit deutlich ueberschaetzt  und hier hatten die Kantengewichte nun keinerlei Auswirkungen mehr  auf die Reihenfolge, in der wir die Knoten untersuchen.  Abschliessend moechte ich nun zusammenfassen, was den Asterneigorytmus von Dijkstra unterscheidet.", "start": 1432.0, "end": 1454.0}, {"text": " Beim Asterneigorytmus muessen potenziell weniger Knoten untersucht werden,  als bei Dijkstra, um die optimale Distanz und den optimalen Pfad  von einem Startknoten zu einem Zielknoten in einem gerichteten Grafen zu finden.  Da wir hier eine Heuristik einsetzen, haben wir allerdings auch  einen hoeheren Aufwand bei der Berechnung der Prioritaet der Elemente.", "start": 1454.0, "end": 1471.0}, {"text": "  Was uns auch aufgefallen ist, ist, dass der Asterneigorytmus immer nur so gut ist,  wie die Heuristik, die wir einsetzen.  Dabei sind uns die folgenden beiden Dinge aufgefallen.  Der Asterneigorytmus, bei dem die Heuristik 0 fuer alle Knoten betraegt,  entspricht genau dem Dijkstra-Algorithmus.", "start": 1471.0, "end": 1495.0}, {"text": " Ausserdem haben wir herausgefunden, dass eine Heuristik niemals ueberschaetzen darf,  da sonst der Asterneigorytmus nicht zu einer optimalen Loesung kommt.  Wenn wir eine Heuristik fuer den Asterneigorytmus waehlen,  dann muessen wir uns also merken, die Heuristik muss immer 0 oder groesser sein.  Es ist kein Problem, wenn die Heuristik die Distanz zum Ziel unterschaetzt.", "start": 1496.0, "end": 1512.0}, {"text": "  Es ist optimal, wenn die Heuristik die Distanz zum Ziel genau abschaetzt.  Eine Heuristik darf allerdings niemals die Distanz zum Ziel ueberschaetzen,  da sonst nicht garantiert ist, dass die optimale Loesung gefunden wird.  Copyright WDR 2021", "start": 1512.0, "end": 1529.0}]}]