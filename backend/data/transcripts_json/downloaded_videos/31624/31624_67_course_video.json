[{"lecture": "31624_67_course_video", "Timestamps": [{"text": "  Hi, this video will be about Git. Why is it important? How to install it and use it?  So, Git is a version control system. It controls the versions variations of your code.  Over time, you develop your code and you want to keep track the changes that you add to that.  Imagine that you're writing a report for the university.", "start": 0.0, "end": 34.0}, {"text": "  And in your first try, you have good ideas in that and then you want to change it,  but you want to keep the previous version.  So, what you do without Git, you save the file with the new name, newest version.  So, you can go back and look the great ideas that you had initially  and also look at the new ideas that you have.  Now, this is implemented in Git.", "start": 34.0, "end": 61.0}, {"text": "  And this is not the only one feature why this tool is so powerful.  This was developed and created for programmers.  Programmers that are professionals and working at companies.  Because there, you're not only working alone on a single file,  but you're working on numerous, a lot of files at the same time  and collaborating with a lot of people.", "start": 61.0, "end": 86.0}, {"text": "  So, for a big project, you need to enable easy collaboration  and tracking changes between files.  This is why Git was developed.  So, people can collaborate on code, make changes, track those changes  and even simultaneously work on things.  In this course, you will use Git to submit your assignment  and we will use your submission to grade your assignment.", "start": 86.0, "end": 120.0}, {"text": " So, in a way, this is a small example  how you can share your code with others and collaborate with us.  So, let's see how we install Git on Windows.  So, Git for Windows.  Installation is pretty simple.  Again, we select where we want to install.  We will install both Git Bash and Git GUI and all other related things.  So, let's leave it as it is.", "start": 123.0, "end": 180.0}, {"text": "  And I will show you how to use both Bash and GUI.  Yep. Yep.  Let's get this right.  Yes. Yes.  Next.  We don't want the release notes now, but you should read it.  But let's launch Git Bash.  And Git Bash is a terminal like in Open2.  Okay.  Okay, with LS, we can list the folders and files in the current directory.  Let's go to documents.  Let's create here a folder.  Alt-Git.  Example.", "start": 181.0, "end": 292.0}, {"text": "  Alright, so we have Git installed.  And during the semester, you are going to use  the Git offered by the Uberlin.  So, let's create there a new project.  Create a blank project.  Git.  Example.  This will be created under my user account, which you can see.  But we give a description.  Examples of using Git.  This will be for now private.  And we will initialize also with the readme file.", "start": 292.0, "end": 352.0}, {"text": "  This is very important to keep a readme file in a Git project.  In any project.  And that...  In this readme file, we can list important information.  In...  Important information.  Important information like how to run your code from this.  Important information.  Oh, come on.  Come on.", "start": 352.0, "end": 413.0}, {"text": " Important information like what is the project about,  how to install the project, how to run the project code.  Create.  Now that we created.  As you can see, we have a readme displayed directly in the...  first page in the details project overview.  And what we're going to do is this is on the server side.  And we want to have this locally.  So we want to clone.  Here is the clone button.", "start": 414.0, "end": 458.0}, {"text": "  We can clone by using, for example, the HTTPS or the SSH.  This is different types of...  These are different types of protocols to communicate with the server, the Git server.  Let's copy with HTTP.  Get a bash.  Let's paste.  This is the address of our Git repository.  And to clone it, we use the first git command.  Git clone.  And the name of the repository.  Now...  The popup window comes up.", "start": 458.0, "end": 518.0}, {"text": "  You have to enter your username.  Your password.  And hit OK.  And now the repository is cloned on your system.  So you have locally a version of your current state.  And here we have the readme file.  And a .git folder.  This .git folder contains some hidden information about this Git repository.  And let's open the readme file with notepad, for example.  This is a text file.", "start": 518.0, "end": 568.0}, {"text": "  In which we have already the description.  Let's add one more with...  Comments.  Another line and we used git clone.  Do you get a new repository from server?  Let's save the text file.  And now...  Let's enter the git example.  Here you can see in parentheses that we are in the main branch.  You will learn later about branches.  And let's see another command.  Git status.", "start": 569.0, "end": 640.0}, {"text": "  With git status we can see if we have any modifications or changes.  At least that we are on the main branch and then there are changes not staged for commit yet.  It means that these changes that we created in the readme file are not yet saved.  Are not yet tracked.  And we can add or these changes to commit.  And it says git add or git commit minus a.", "start": 642.0, "end": 683.0}, {"text": "  That's the first, the next command that we are going to use.  Git commit minus a.  So we will commit the changes.  And minus m.  We will also add a commit message.  First commit of...  First commit. Let's go like this.  Alright. And we have an error.  In order to commit and to be able to track who committed what, we need to set up who is going to commit.  The message.  So let's say git status.", "start": 683.0, "end": 754.0}, {"text": "  Actually we were able to commit but we are not using the correct author name.  So let's change that.  Git config.  Minus minus global user.name.  I will use my username from GitHub.  So now all my commits will be signed with the username.  And the next thing to do is to push this change to the server.  So we are not only having this locally but also on the server side.", "start": 755.0, "end": 814.0}, {"text": "  And it's a simple command git push.  And we are done. Let's see whether we were able to really push our changes.  Let's reload the page.  And as you can see we have a new command.  Added git colon.  You can edit this file also online.  So until now we have seen git status.  To check the status.  To check modifications.  Git commit minus a minus m.  To create a message.  My message.  And git push.", "start": 820.0, "end": 898.0}, {"text": "  Save from server side.  And this was save it locally.  Update with me with more commands.  Commit changes.  So now we have a different version on the server side than locally, right?  So what we can do now is to pull the changes.  It's called the command git pull.  This way we will take all the changes from the server and apply it locally.", "start": 898.0, "end": 957.0}, {"text": "  And it shows that we pulled from the server and there are eight changes compared.  These are the eight lines, eight commands that I listed online.  We can open again the readme.  And now you see the new lines there.  Let's add a new file.  Added a new text file.  New file.  And now if we check the status.  Then it will list that there are untracked files and this is the name of the file.", "start": 957.0, "end": 1020.0}, {"text": "  And it already suggests what to do next.  To add this to the version control system.  We can simply write git add and the name of the files or folders that we want to add.  New file, dxd.  If we check again the status.  Then we will see that we added a new file but it's not yet commented.  So we just indicated that we want to track this file.  So let's connect it.  Let's say minus m add new file.", "start": 1020.0, "end": 1073.0}, {"text": "  And now we added the new file.  Let's check the status.  Then everything is fine.  And the last and final step.  Let's save this file on the server side.  So the command is git push.  And let's see in our repository now we have the new file.dxd.  Alright.  So let's list another command here.  Git add new files to be tracked by git.", "start": 1073.0, "end": 1140.0}, {"text": "  So let's have a look how to use the graphical user interface now.  Git.  Go away.  We can do the same things in the graphical user interface as we did in the terminal.  Here we can see the changes with the blue icon next to readme.  These are the changes that were not yet staged.  Meaning not yet commented.  It also shows what are the changes.", "start": 1140.0, "end": 1183.0}, {"text": "  If there are multiple changes we can stage them separately to give separate comment messages.  Like fixing two different bugs in your code.  Either we stage a hung.  A hung will be everything that is after this message.  Or we can stage lines.  In this case we will stage everything that we changed in this file.  So we will just click on this blue document icon.", "start": 1183.0, "end": 1213.0}, {"text": "  These will be everything that we are going to comment.  We will be here listed.  And the comment message.  Add git and command to readme.  As you can see a good practice is to start the comment message with the verb that describes what you are doing.  You are adding information, you are changing something, adding a new functionality to your code or fixing a bug.  I can click count.", "start": 1213.0, "end": 1255.0}, {"text": "  And I can also click push.  And it asks where to push, which branch, main.  We have only one.  And then in another popup it will show that everything went well and it is pushed to the server.  Feel free to use either the terminal or the GUI.  See you next time.", "start": 1255.0, "end": 1281.0}]}]