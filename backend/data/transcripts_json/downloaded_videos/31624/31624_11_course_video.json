[{"lecture": "31624_11_course_video", "Timestamps": [{"text": "  In diesem Video wollen wir uns nun abschliessen die Hausaufgabe zu dieser Woche anschauen.  Im Allgemeinen soll in dieser Hausaufgabe das folgende Spiel geloest werden.  Hier haben wir in einem Quadrat Spielsteine.  In diesem Fall haben wir in diesem Quadrat neuen Felder und acht Spielsteine.  Wir haben immer ein Spielstein weniger, als wir Felder in dem Quadrat haben.", "start": 0.0, "end": 27.0}, {"text": "  Was wir nun machen koennen, ist immer ein der Spielsteine in das freie Feld zu schieben.  In diesem Fall also entweder den Spielstein 6 nach unten auf das freie Feld  oder den Spielstein 8 nach rechts auf das freie Feld.  Ziel des Spiels ist es, alle Spielsteine in die richtige Reihenfolge zu bringen.", "start": 27.0, "end": 49.0}, {"text": " Das heisst in der ersten Reihe muessten 1, 2, 3 stehen, in der zweiten Reihe 4, 5, 6  und in der dritten Reihe 7, 8.  Das Ganze soll mit dem A-Sternalgorithmus geloest werden.  Als Heuristik verwenden wir hier die Manhattan Heuristik.  Die Manhattan Heuristik soll hier die Distanz von jedem Spielstein zu seinem urspruenglichen Platz angeben.", "start": 49.0, "end": 69.0}, {"text": "  Da hier Spielsteine immer nur nach oben und unten oder nach links und rechts verschoben werden koennen,  bildet sich wieder solch ein quadratisches Muster, fuer welches sich die Manhattan Distanz anbietet.  Die Manhattan Heuristik soll fuer das ganze Spielfeld angegeben werden  und ist eine Summe von der Manhattan Heuristik von jedem Spielstein.", "start": 69.0, "end": 88.0}, {"text": "  Die Spielsteine 1, 2, 6, 7 und 8 sind bereits am richtigen Platz.  Das heisst fuer sie ist die Manhattan Heuristik 0.  Muss also nur noch die Manhattan Heuristik fuer die Spielsteine 4, 5 und 3 aufsummiert werden.  Der Spielstein 3 sollte eigentlich am Platz von Spielstein 4 sein.  Ich berechne also die Distanz von dem aktuellen Standort von Spielstein 3 und dem eigentlichen Standort.", "start": 88.0, "end": 115.0}, {"text": "  Da ich hier die Manhattan Distanz berechne, ist das die Differenz in X Richtung und in Y Richtung.  In X Richtung ist das ein Schritt Differenz und in Y Richtung ist das auch ein Schritt Differenz.  Also ist die Manhattan Heuristik fuer Spielstein 3, 2.  Spielstein 4 sollte eigentlich eine Stelle sein, an dem sich momentan Spielstein 5 befindet.", "start": 115.0, "end": 137.0}, {"text": "  Ich nehme also wieder die aktuelle Position und die eigentliche Position, an dem der Spielstein sein sollte  und berechne die Distanz.  Das ist ein Schritt in Y Richtung und 1, 2 Schritte in X Richtung.  Also eine Distanz von 3.  Nun berechne ich abschliessend noch die Manhattan Distanz von Spielstein 5.  Dieser befindet sich an dieser Stelle, sollte aber eigentlich an dieser Stelle sein.", "start": 137.0, "end": 164.0}, {"text": "  Ich habe also ein Schritt in X Richtung, keinen Schritt in Y Richtung, macht eine Distanz von 1.  Die Manhattan Heuristik fuer das ganze Spielbrett betraegt also 6.  Was ich euch eben gezeigt habe, ist das, was ihr auch in Aufgabe 1 machen sollt.  Hier sollt ihr die Klasse Bord vervollstaendigen.  Ihr haltet keine Eingabe, koennt allerdings auf die Attribute der Klasse zugreifen.", "start": 165.0, "end": 188.0}, {"text": "  Die Ausgabe ist dann die Manhattan Distanz aller Spielsteine zu ihrer eigentlichen Position.  Der Ansatz entspricht dem, was ich eben gezeigt habe.  Wir muessen ueber alle Spielsteine iterieren, die aktuelle und die eigentliche Position jedes Spielsteins bestimmen  und dann die Manhattan Distanz zwischen der eigentlichen und der aktuellen Position bestimmen.", "start": 188.0, "end": 210.0}, {"text": "  Diese Manhattan Distanzen von jedem Spielstein muessen am Ende aufsummiert werden.  In Aufgabe 2 sollte die fehlenden Funktion der Klasse Paar Schisssolution implementieren.  Hierzu gehoeren zwei Konstruktoren.  Der erste Konstruktor soll gegeben ein Board eine leere Teilloesung erzeugen.", "start": 210.0, "end": 235.0}, {"text": " Zu einer Teilloesung gehoert sowohl die Spielstellung gespeichert als Board  und eine Zugfolge, die bei einer leeren Teilloesung logischerweise leer ist.  Der zweite Konstruktor erhaelt dann eine Paar Schisssolution und soll davon eine Kopie erzeugen.", "start": 235.0, "end": 257.0}, {"text": " Eine unabhaengige Kopie heisst, auch diese Paar Schisssolution soll die gleiche Stellung als Board enthalten  und die gleiche Zugreinfolge als Liste, denkt allerdings daran, dass ihr nicht einfach die Referenz kopieren koennt.  Mit der DoMoveMethode sollt ihr einen Zug ausfuehren.", "start": 257.0, "end": 271.0}, {"text": " Das bedeutet, dass dieser Zug auf dem gespeicherten Board ausgefuehrt wird,  der Zug in unserer Zugfolge gespeichert wird und die Kosten aktualisiert werden.  Die Kosten, die man auch als Attribut speichern kann, setzen sich hier zusammen aus den bereits ausgefuehrten Zuegen  und die Anzahl der geschaetzten Zuege bis zum Ziel, die wir mit unserer Heuristik bestimmen koennen.", "start": 271.0, "end": 291.0}, {"text": "  Die Funktion ist Solution, so ein Bullying zurueckgeben, ob diese Spielstellung eine Zielstellung ist.  Schaut hier, genauso wie in der DoMoveMethode einmal, welche Funktion bereits implementiert sein koennten.  Mit der Methode MoveSequence soll die Zugfolge von der Anfangsstellung aus bis zur aktuellen Stellung in chronologischer Reihenfolge ausgegeben werden.", "start": 291.0, "end": 312.0}, {"text": "  Ueberleg dazu einmal, was ihr euch zur Zugreinfolge bereits gespeichert habt.  Die Methode ValidMove soll alle moeglichen Zuege von der aktuellen Stellung mit Ausnahme des Zuges,  der den letzten Zug der Teilloesung rueckgaengig machen wuerde, zurueckgegeben werden.  Das nur, falls schon mindestens ein Zug ausgefuehrt wurde.", "start": 312.0, "end": 335.0}, {"text": "  Auch hier kann ich euch den Hinweis geben, zuerst einmal zu ueberpruefen, welche Funktionen bereits implementiert sind, in dieser oder in anderen Klassen.  Abschliessend soll noch die ComparativeMethode implementiert werden.  Diese wird spaeter im Arsch-Stern-Algorithmus verwendet, um partial solutions in einer Priority-Queue zu verwenden.", "start": 335.0, "end": 351.0}, {"text": "  Hier sollen die Teilloesungen anhand der Kosten verglichen werden.  Wenn ihr hierzu noch einmal eine Wiederholung braucht, schaut doch gerne noch einmal in das Video zur Priority-Queue.  Dort erklaere ich auch ausfuehrlich die ComparativeMethode.  In der letzten Aufgabe der Hausaufgabe soll dann die klasse A-Star 15-Puzzle implementiert werden.", "start": 351.0, "end": 379.0}, {"text": "  Diese erhaelt als Eingabe das aktuelle Spielbrett und die Ausgabe soll die schnellste Loesung zur Zielstellung sein, indem ihr eine Sequenz von Zuegen zurueckgebt.  Da wir A-Stern bisher nur auf Grafen kennengelernt haben, kann man sich dieses Problem auch als Graf vorstellen.  Hierbei koennen wir uns jede Partial-Solution als eigenen Knoten vorstellen.", "start": 379.0, "end": 397.0}, {"text": "  Der Startknoten ist dann eine leere Partial-Solution mit dem aktuellen Spielbrett.  Und auf diesem koennen wir dann den A-Stern-Algorithmus ausfuehren.  Hierbei ist jede Zwischenloesung ein weiterer Knoten des Grafen.  Habe ich also eine Stellung bekommen?  Dann ist das mein Startknoten.  Jeder moegliche Zug waere dann eine weitere Partial-Solution, die ich auch als Knoten sehen kann.", "start": 397.0, "end": 419.0}, {"text": "  Wir verwenden hier, wie bereits erwaehnt, die Manhattan-Distanz als Heuristik.  Und jeder bisherige Knoten, da jeder Knoten eine Partial-Solution ist, hat dann sowohl die Kosten gespeichert,  als auch die aktuelle Stellung in dieser Position und die Zugsequenz, die zu dieser Position gefuehrt hat.", "start": 419.0, "end": 440.0}, {"text": " Habe ich also einen Knoten gefunden, der der Zielstellung entspricht,  kann ich auch sehr schnell die Zugsequenz zu dieser Spielstellung zurueckgeben.", "start": null, "end": 440.0}]}]