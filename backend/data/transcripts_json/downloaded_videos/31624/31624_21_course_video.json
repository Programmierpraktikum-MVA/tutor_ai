[{"lecture": "31624_21_course_video", "Timestamps": [{"text": "  In diesem Video wollen wir uns mit den minimalen Spannbaeumen beschaeftigen.  Ein minimaler Spannbaum oder kurz MST fuer Minimal Spanning Tree  ist definiert als der kuerzeste Weg durch einen Grafen, der alle Knoten miteinander verbindet.  Erst hierbei eine Teilmenge aller Kanten des Grafen.  Zusaetzlich muessen folgende Bedingungen erfuellt sein.", "start": 0.0, "end": 26.0}, {"text": "  Zum einen muessen alle Knoten miteinander verbunden sein.  Zum anderen muss dabei die Summe aller Kantengewicht des minimalen Spannbaums minimal sein.  Um den minimalen Spannbaum eines Grafen zu bestimmen, kann man den Algorithmus von Prim verwenden.  Bei diesem Algorithmus gehen wir wie folgt vor.  Zu Beginn waehlen wir erst ein zufaelligen Startknoten im Grafen.", "start": 26.0, "end": 51.0}, {"text": "  Dann gehen wir in eine Schleife, solange noch nicht alle Knoten miteinander verbunden sind.  In dieser Schleife waehlen wir zuerst die naechstkleinste Kante, die einen noch nicht besuchten mit einem besuchten Knoten verbindet.  Besuchte Knoten sind hier die Knoten, die schon im Spannbaum sind, nicht besuchte Knoten sind die Knoten, die noch nicht im Spannbaum sind.", "start": 51.0, "end": 72.0}, {"text": "  Diese Kante fuegen wir dann dem Spannbaum hinzu und gehen in den naechsten Schleifen-Durchlauf.  Das ganze so lange, bis alle Knoten im Spannbaum sind.  Den Algorithmus wollen wir uns einmal an diesem Beispiel anschauen.  Probiert gerne erst einmal selbst, den Algorithmus von Prim auf diesen Grafen auszufuehren und waehlt dazu einen zufaelligen Startknoten.  Anschliessend zeige ich euch die Loesung.", "start": 73.0, "end": 114.0}, {"text": "  Beginn wollen wir hier mit dem Startknoten A. Diesen markiere ich als Teil des Spannbaums und nun gehe ich in die Schleife.  Hier suche ich als naechstes die Kante mit dem kleinsten Kantengewicht, die einen Knoten aus meinem minimalen Spannbaum mit einem Knoten, der noch nicht in meinem minimalen Spannbaum ist, verbindet.", "start": 115.0, "end": 131.0}, {"text": "  Hier habe ich die Kanten mit den Gewichten 12 zu B, 8 zu C und 5 zu E zur Verfuegung.  Die Kante zu E hat mit 5 das kleinste Kantengewicht und deshalb fuege ich diese meinem minimalen Spannbaum hinzu.  Nun fuehre ich genau den gleichen Schritt erneut aus.  Ich ueberpruefe nun von meinen besuchten Knoten aus, welche Kanten zu unbesuchten Knoten gehen und welche davon die kleinste Kante ist.", "start": 131.0, "end": 165.0}, {"text": "  Ich habe nun die Kanten 12 zu B, 8 zu C, 18 zu C, 9 zu F und 3 zu G zur Verfuegung.  3 zu G hat das kleinste Kantengewicht, das heisst ich fuege diese Kante beim minimalen Spannbaum hinzu und habe somit G besucht.  Nun ueberpruefe ich wieder, welche Kante die mit dem kleinsten Kantengewicht ist, die einen besuchten Knoten mit einem noch nicht besuchten Knoten verbindet.", "start": 166.0, "end": 195.0}, {"text": "  Das ist die Kante mit dem Kantengewicht 1 zu F, das heisst ich fuege die Kante dem minimalen Spannbaum hinzu und habe damit F besucht.  Nun ist die naechstkleinste Kante, die einen besuchten Knoten mit einem noch nicht besuchten Knoten verbindet, die Kante zu H mit dem Kantengewicht 4.  Das heisst ich fuege diese dem minimalen Spannbaum hinzu und somit habe ich auch den Knoten H erreicht.", "start": 196.0, "end": 223.0}, {"text": "  Jetzt ueberpruefe ich wieder von allen besuchten Knoten aus alle Kanten, die naechstkleinste, die ich meinem minimalen Spannbaum hinzufuege, ist die Kante zu D mit dem Kantengewicht 6.  Damit habe ich auch D besucht. Nun ueberpruefe ich wieder alle Kanten von einem besuchten zu einem unbesuchten Knoten.", "start": 223.0, "end": 244.0}, {"text": "  Die Kante mit dem kleinsten Kantengewicht ist hier die Kante von A zu C mit Kantengewicht 8. Das heisst ich fuege diese Kante meinen minimalen Spannbaum hinzu.  Nun ist nur noch Knoten B nicht Teil des minimalen Spannbaums. Das heisst ich schaue mir alle Kanten an, die zum Knoten B fuehren.", "start": 244.0, "end": 267.0}, {"text": "  Die Kante mit dem kleinsten Kantengewicht ist die mit Kantengewicht 2. Das heisst ich fuege diese dem minimalen Spannbaum hinzu und habe somit auch den Knoten B erreicht.  Nun wurden alle Knoten besucht, das heisst unser Algorithmus terminiert. Die rot markierten Kanten sind nun unser minimaler Spannbaum.", "start": 268.0, "end": 292.0}, {"text": "  Minimaler Spannbaum heisst hier, diese Kanten sind eine Teilmenge aller Kanten des Grafen, mit diesen Kanten werden alle Knoten miteinander verbunden und die Summe aller Kantengewichte ist minimal.  Neben dem Algorithmus von Prim gibt es noch den Algorithmus von Kruskal, um den minimalen Spannbaum auf einem Grafen zu finden.", "start": 292.0, "end": 311.0}, {"text": "  Das Vorgehen hier ist aehnlich wie bei Prim. Wir gehen in eine Schleife, solange noch nicht alle Knoten miteinander verbunden sind.  In jeder Aeteration werden wir dann immer die nix kleinste Kante aus, die zwei noch nicht miteinander verbundene Knoten miteinander verbindet.", "start": 312.0, "end": 326.0}, {"text": "  Hierbei muessen wir nicht besuchte und noch nicht besuchte Knoten betrachten, sondern koennen uns den gesamten Grafen anschauen.  Diese Kante fuegen wir dann dem Spannbaum hinzu und gehen in die naechste Schleifen-Iteration, solange bis alle Knoten miteinander verbunden sind.", "start": 327.0, "end": 346.0}, {"text": "  Der Grund, warum wir uns im vorherigen Video allerdings die Union-Feind-Datenstruktur angeguckt haben, ist, dass sich mit dieser der Algorithmus von Kruskal auf Grafen sehr effizient loesen laesst.  Wir definieren hierzu zu Beginn jeden Knoten als seine eigene Menge.  Nun nehmen wir die Listen aller Kanten des Grafen und sortieren diese aufsteigend nach Kantengewicht.", "start": 347.0, "end": 365.0}, {"text": "  Dann gehen wir in eine Schleife, solange entweder noch nicht alle Knoten in einer Menge sind oder noch Knoten in der Liste sind  und innerhalb dieser Schleife waehlen wir dann die nix kleinste Kante aus unserer sortierten Liste", "start": 366.0, "end": 381.0}, {"text": " und wenn bereits beide Knoten in einer Menge sind, dann koennen wir die Kante verwerfen, ansonsten fuegen wir die Kante dem Spannbaum hinzu und vereinigen die Mengen der beiden Knoten.  Sobald dann alle Knoten in einer Menge sind, bedeutet das, dass alle Knoten miteinander verbunden sind und wir den Spannbaum des Grafen gefunden haben.", "start": 382.0, "end": 396.0}, {"text": "  Da wir hier die Kanten sortiert nach ihrem Kantengewicht verwenden, finden wir hier auch den minimalen Spannbaum.  Auch diesen Algorithmus wollen wir uns einmal an dem gleichen Beispiel angucken.  Probiert dazu gerne erst einmal wieder selbst, den Algorithmus von Kruzkal auf diesem Grafen auszufuehren und anschliessend zeige ich wieder die Loesung.", "start": 396.0, "end": 431.0}, {"text": "  Zu Beginn des Algorithmus ist jeder Knoten in seiner eigenen Menge und hat sich selber als Repraesentanten.  Das kennzeichne ich hier, indem ich immer den Repraesentanten ueber den Knoten schreibe.  Nun beginnen wir mit dem Algorithmus. Wir sortieren alle Kanten aufsteigend und beginnen nun mit der kleinsten Kante.  Die kleinste Kante ist die von f zu g mit dem Kantengewicht 1.", "start": 432.0, "end": 453.0}, {"text": "  Die kleinste Kante ist die von f zu g mit dem Kantengewicht 1.  Die kleinste Kante ist die von f zu g mit dem Kantengewicht 1.  Ich ueberpruefe also, ob f und g bereits in der gleichen Menge sind. Das sind sie nicht, da sie unterschiedliche Repraesentanten haben.  Ich fuege also die Kante dem Spannbaum hinzu und vereinige dann die beiden Mengen.", "start": 454.0, "end": 478.0}, {"text": "  Wenn ich die beiden Mengen vereinige, heisst das, dass sie danach den gleichen Repraesentanten haben muessen.  Ich lege hier also fest, dass nun beide den Repraesentanten f bekommen.  Nun ueberpruefe ich die naechste Kante.  Die naechste Kante in aufsteigender Reihenfolge ist die Kante von b zu c mit dem Kantengewicht 2.", "start": 478.0, "end": 498.0}, {"text": "  Der Knoten b und der Knoten c teilen nicht den gleichen Repraesentanten, sondern die beiden Mengen.  Die naechste Kante in aufsteigender Reihenfolge ist die Kante von b zu c mit dem Kantengewicht 2.  Der Knoten b und der Knoten c teilen nicht den gleichen Repraesentanten, sind also nicht in der gleichen Menge und somit fuege ich die Kante dem Spannbaum hinzu.", "start": 498.0, "end": 518.0}, {"text": "  Ausserdem muss ich nun die beiden Mengen vereinigen.  Das heisst, beide erhalten den gleichen Repraesentanten. In dem Falle verwende ich b.  Welchen Repraesentanten hier verwendet ist egal, solange danach alle Elemente aus dieser Menge den gleichen Repraesentanten haben und kein Element aus einer anderen Menge diesen Repraesentanten hat.", "start": 519.0, "end": 544.0}, {"text": "  Ich koennte also hier zum Beispiel auch Repraesentant x verwenden, allerdings nicht Repraesentant a.  Nun schauen wir uns die naechste kleinste Kante an.  Das ist die Kante von e nach g mit Kantengewicht 3.  e hat den Repraesentanten e, g hat den Repraesentanten f, die Repraesentanten sind nicht gleich, somit sind die beiden Knoten auch in unterschiedlichen Mengen.", "start": 545.0, "end": 563.0}, {"text": "  Das heisst, ich kann die Kante dem minimalen Spannbaum hinzufuegen.  Nun muss ich noch die beiden Mengen vereinigen.  Das heisst, Knoten e, g und f muessen danach alle den gleichen Repraesentanten haben.  Ich verwende hier zum Beispiel Repraesentant f.  Nun ist die naechste kleinste Kante, die Kante von f zu h, mit dem Kantengewicht 4.", "start": 567.0, "end": 594.0}, {"text": "  f hat den Repraesentanten f, h hat den Repraesentanten h, das heisst, beide sind nicht in der gleichen Menge, somit kann ich die Kante dem minimalen Spannbaum hinzufuegen.  Ausserdem muss ich die beiden Mengen vereinigen.  Das bedeutet, am Ende muessen e, g, f und h den gleichen Repraesentanten haben.  Das heisst, ich setze hier den Repraesentanten von h auf f.", "start": 595.0, "end": 614.0}, {"text": "  Nun ist die naechste kleinste Kante, die Kante von a zu e, mit dem Kantengewicht 5.  Der Knoten a ist in Menge a, der Knoten e ist in Menge f, das sind also zwei unterschiedliche Mengen und somit fuege ich die Kante wieder mit dem minimalen Spannbaum hinzu.", "start": 615.0, "end": 638.0}, {"text": "  Nun muss ich noch die beiden Mengen vereinigen, das heisst, die Knoten a, e, g, f und h muessen danach in der gleichen Menge sein und dazu kann ich den Repraesentanten von a auf f anpassen.  Die naechste kleinste Kante ist nun die Kante von d zu f, mit Kantengewicht 6.", "start": 639.0, "end": 654.0}, {"text": "  Knoten d hat Repraesentant d, Knoten f hat Repraesentant f, das heisst, die sind in zwei unterschiedlichen Mengen und ich kann die Kante dem minimalen Spannbaum hinzufuegen.  Nun muessen wieder beide Mengen miteinander vereinigt werden, das erreiche ich, indem ich den Repraesentant von d auf f setze.  Nun ist die naechste kleinste Kante, die Kante von a zu c, mit Kantengewicht 8.", "start": 657.0, "end": 680.0}, {"text": "  a hat Repraesentant f, c hat Repraesentant b, das heisst, die sind in zwei unterschiedlichen Mengen, ich kann also die Kante wieder dem minimalen Spannbaum hinzufuegen.  Nun muss ich die beiden Mengen noch vereinigen, das heisst, alle muessen am Ende den gleichen Repraesentanten teilen.  Ich waehle hier als Repraesentant f und passe deshalb fuer jeden Knoten in der Menge b den Repraesentanten an.", "start": 684.0, "end": 704.0}, {"text": "  Das bedeutet, sowohl c erhaelt nun Repraesentant f, als auch b.  Die naechste kleinste Kante ist nun die 9, die naechste kleinste Kante ist nun von Knoten e zu Knoten f, mit Kantengewicht 9.  Diese Kante verbindet allerdings zwei Knoten, die bereits in der gleichen Menge sind, was wir daran erkennen, dass beide Repraesentant f haben.", "start": 706.0, "end": 727.0}, {"text": "  Ich muss diese Kante also nicht mehr betrachten und fuege sie auch nicht unseren minimalen Spannbaum hinzu.  Wenn wir uns den Graph genauer angucken, sehen wir auch, dass wir den minimalen Spannbaum bereits gefunden haben.  Jede weitere Kante, die wir nun untersuchen wuerden, verbindet also zwei Knoten, die bereits in der gleichen Menge sind und deshalb wuerde sie verworfen werden.", "start": 728.0, "end": 747.0}, {"text": "  Somit ist auch der Algorithmus von Kruzkal hier zum Ergebnis gekommen.  Wenn wir die beiden Spannbaeume miteinander vergleichen, sehen wir auch, dass diese identisch sind.  Zwar finden beide Algorithmen immer den minimalen Spannbaum, existieren aber mehrere unterschiedliche minimale Spannbaeume,  kann es sein, dass das Ergebnis fuer beide Algorithmen ein anderes ist.", "start": 748.0, "end": 768.0}, {"text": "  In jedem Fall ist es allerdings minimal.  Schauen wir uns nun abschliessend dieses Beispiel an.  Auch hier haben wir wieder ein Graphen, in dem wir allerdings von drei Kanten das Kantengewicht nicht kennen.  Was wir allerdings wissen, ist, dass diese Kanten Teil des minimalen Spannbaums sind.", "start": 773.0, "end": 795.0}, {"text": "  Unsere Aufgabe ist es nun, obere Schranken fuer diese Kantengewichte zu finden, so dass diese garantiert Teil des minimalen Spannbaums sind.  Anschliessend wollen wir auch auf diesem Graphen noch einmal Prim und Kruzkal ausfuehren.  Um schnell die Kanten des minimalen Spannbaums zu identifizieren, koennen wir den Algorithmus von Kruzkal anwenden.", "start": 796.0, "end": 820.0}, {"text": "  Wenn ihr euch sicher mit dem Algorithmus fuehlt, dann muesst ihr nicht zwangslaeufig die Repraesentanten der Mengen fuer jeden Knoten notieren.  Es hilft allerdings am Anfang zu verstehen, warum welche Kanten ausgewaehlt werden.  Wenn ich Kruzkal anwenden moechte, dann sortiere ich also wieder alle Kanten aufsteigend nach dem Kantengewicht und untersuche nun Kante fuer Kante.", "start": 821.0, "end": 840.0}, {"text": "  Die kleinste Kante ist die Kante mit dem Kantengewicht 10, die den Knoten H und J verbindet.  Die Knoten H und J sind bisher nicht verbunden, das heisst ich fuege die Kante in mein minimalen Spannbaum hinzu.  Die naechste kleinste Kante ist die Kante mit dem Kantengewicht 20 zwischen E und G.", "start": 841.0, "end": 859.0}, {"text": "  Die Knoten E und G sind bisher auch noch nicht verbunden, das heisst ich fuege die Kante dem minimalen Spannbaum hinzu.  Die naechste kleinste Kante ist die Kante mit dem Kantengewicht 30 zwischen F und H.  Die Knoten F und H sind auch noch nicht miteinander verbunden, das heisst auch diese Kante fuege ich dem minimalen Spannbaum hinzu.", "start": 859.0, "end": 884.0}, {"text": "  Die naechste kleinste Kante ist die Kante zwischen D und F mit Kantengewicht 40, D und F sind auch noch nicht verbunden, das heisst die Kante landet in unserem minimalen Spannbaum.  Die naechste kleinste Kante ist nun die Kante mit dem Kantengewicht 50 zwischen E und J.  E und J sind auch noch nicht miteinander verbunden, das heisst diese Kante ist Teil unseres minimalen Spannbaums.", "start": 885.0, "end": 902.0}, {"text": "  Die naechste kleinste Kante ist nun die Kante mit Kantengewicht 60 zwischen G und H.  G und H sind allerdings bereits miteinander verbunden ueber G, I, J, H, das heisst diese Kante fuege ich nicht meinen minimalen Spannbaum hinzu.  Habt ihr euch hier von Beginn an auch die Repraesentanten notiert werdet ihr sehen, dass beide Knoten den gleichen Repraesentanten haben an dieser Stelle.", "start": 903.0, "end": 928.0}, {"text": "  Die naechste kleinste Kante ist die Kante mit dem Kantengewicht 70, welche G und J miteinander verbindet.  Auch G und J sind schon miteinander verbunden, das heisst die Kante wird verworfen.  Das gleiche gilt fuer die Kanten zwischen C und F mit Kantengewicht 80 und F und G mit dem Kantengewicht 90.", "start": 929.0, "end": 948.0}, {"text": "  Beide Kanten verbinden schon zwei bereits verbundene Knoten und sind somit nicht Teil des minimalen Spannbaums.  Nun betrachten wir noch die Kante mit dem Kantengewicht 100 zwischen A und D.  A und D sind bisher noch nicht verbunden, das heisst auch diese Kante ist Teil des minimalen Spannbaums.", "start": 949.0, "end": 967.0}, {"text": "  Nun sind alle Knoten miteinander verbunden, das heisst ich habe alle Kanten des minimalen Spannbaums gefunden.  Die Kantengewichte der Kanten, die Teil des minimalen Spannbaums sind, sind also 10, 20, 30, 40, 50 und 100.  Nun muessen wir jetzt noch die oberen Schranken fuer X, Y und Z angucken.  Beginn werden wir mit X.", "start": 968.0, "end": 998.0}, {"text": "  Wir suchen jetzt also einen Wert fuer X, der nicht ueberschritten werden darf, damit die Kante immer noch Teil des minimalen Spannbaums ist.  Dazu muessen wir uns anschauen, fuer welche Faelle die Kante X nicht mehr Teil des minimalen Spannbaums waere.", "start": 999.0, "end": 1017.0}, {"text": "  Wenn wir uns den Grafen, so wie ja gerade ist, einmal anschauen, dann gibt es die Moeglichkeit den Knoten B ueber die Kante X zu erreichen oder ueber die Kante mit dem Kantengewicht 110.  Der Algorithmus wuerde hier immer die kleinere Kante waehlen.", "start": 1018.0, "end": 1033.0}, {"text": "  Das bedeutet, wenn unsere Kante X groesser als 110 ist, dann wuerde der Algorithmus immer die Kante zwischen A und B waehlen und die Kante zwischen B und D verwerfen.  Unser X muss also kleiner als 110 sein, um garantiert Teil des minimalen Spannbaums zu sein.  Schauen wir uns nun die Kante Y an.  Die Kante Y verbindet die Knoten G und I.", "start": 1034.0, "end": 1059.0}, {"text": "  Der Knoten I wird bereits erreicht durch die Kante von J aus mit Kantengewicht 50 und der Knoten G wird bereits erreicht von Knoten E aus mit Kantengewicht 20.  Was wir also nur noch erreichen muessen, ist, dass Knoten G und I ueber einen beliebigen Weg im Grafen miteinander verknuepft werden.", "start": 1060.0, "end": 1083.0}, {"text": "  Ich koennte also beispielsweise die Kante von C zu D waehlen mit 140, von C zu F mit 80, von E zu F mit 120, von G zu F mit 90, von G zu H mit 60 oder von G zu J mit 70.  Da der Algorithmus immer die kleinste Kante auswaehlt, ist die Kante mit dem Kantengewicht 60 von G zu H fuer uns interessant.", "start": 1084.0, "end": 1103.0}, {"text": "  Hat naemlich die Kante Y ein Kantengewicht, was groesser als 60 ist, so wuerde der Algorithmus immer die Kante von G zu H mit Kantengewicht 60 statt der Kante Y waehlen.  Damit die Kante Y, also garantiert Teil des minimalen Spannbaums, ist, muss das Kantengewicht unter 60 liegen.  Schauen wir uns abschliessend noch die obere Schranke von Z an.", "start": 1104.0, "end": 1125.0}, {"text": "  Der Knoten E wird bereits von Knoten G aus erreicht, der Knoten C wird zurzeit allerdings nur von der Kante Z erreicht.  Ich muss also schauen, welche alternativen Moeglichkeiten es gibt, den Knoten C zu erreichen.  Zum einen gibt es die Kante von A zu C mit 130, die Kante von D zu C mit einem Kantengewicht von 140 und die Kante von F zu C mit einem Kantengewicht von 80.", "start": 1126.0, "end": 1150.0}, {"text": "  Da der Algorithmus immer die kleinste Kante waehlt, ist hier die Kante mit dem Kantengewicht 80 von F zu C fuer uns interessant.  Hat Z ein Kantengewicht, was ueber 80 liegt, so wuerde der Algorithmus immer die Kante zwischen F und C mit Kantengewicht 80 waehlen.  Damit Z also Teil unseres minimalen Spannbaums ist, darf das Kantengewicht nicht hoeher als 80 sein.", "start": 1151.0, "end": 1175.0}, {"text": "  Nun wollen wir abschliessen noch einmal den minimalen Spannbaum auf diesem Grafen finden, allerdings nun fuer feste Werte von X, Y und Z.  X erhaelt dabei den Wert 120, Y erhaelt den Wert 50 und Z erhaelt den Wert 80.  Da wir den Algorithmus von Grosskahl schon zum Loesen der ersten Aufgabe verwendet haben, werde ich nun noch einmal den Algorithmus von Prim demonstrieren.", "start": 1176.0, "end": 1199.0}, {"text": "  Als Startknoten waehle ich hier Knoten A.  Nun waehle ich von allen besuchten Knoten, also dem Fall nur A, die kleinste Kante zu einem unbesuchten Knoten aus und das ist die Kante zu D mit Kantengewicht 100.  Nun waehle ich wieder von allen besuchten Knoten, die naechstkleinste Kante zu einem unbesuchten Knoten aus und das ist in dem Falle die Kante von D zu F mit Kantengewicht 40.", "start": 1200.0, "end": 1229.0}, {"text": "  Diese fuege ich also dem minimalen Spannbaum hinzu.  Nun suche ich wieder von diesen drei besuchten Knoten, die naechstkleinste Kante zu einem unbesuchten Knoten, das ist hier die Kante mit dem Kantengewicht 30 zu H.  Ich fuege diese also wieder meinen minimalen Spannbaum hinzu und habe somit Knoten H erreicht.", "start": 1233.0, "end": 1259.0}, {"text": "  Die naechstkleinste Kante von allen besuchten Knoten ist nun die Kante von H zu J mit Kantengewicht 10, das heisst ich fuege diese Kante meinen minimalen Spannbaum hinzu.  Die naechstkleinste Kante von allen besuchten Knoten aus ist nun die Kante von J zu I mit Kantengewicht 50, ich fuege also diese wieder meinen minimalen Spannbaum hinzu.", "start": 1260.0, "end": 1286.0}, {"text": "  Nun ist die naechstkleinste Kante die Kante von I zu G, also die Kante Y, welche nun den Wert 50 hat, somit fuege ich diese meinen minimalen Spannbaum hinzu.  Die naechstkleinste Kante ist jetzt die Kante von I zu G mit Kantengewicht 20, das heisst auch diese landet in meinem minimalen Spannbaum.", "start": 1289.0, "end": 1312.0}, {"text": "  Und nun ist die naechstkleinste Kante die ein besuchten mit einem noch nicht besuchten Knoten verbindet, die Kante Z, welche nun das Kantengewicht 80 hat, das heisst auch die landet in meinem minimalen Spannbaum.", "start": 1312.0, "end": 1331.0}, {"text": "  Jetzt ist nur Knoten B noch nicht besucht, das heisst ich suche noch eine Kante von einem besuchten Knoten zu Knoten B, da habe ich entweder die Kante von A nach B mit 110 als Kantengewicht oder die Kante von D nach B mit 120 als Kantengewicht.  Ich entscheide mich hier wieder fuer den kleineren Wert, das ist in dem Falle die 110 und fuege diese Kante den minimalen Spannbaum hinzu.", "start": 1332.0, "end": 1345.0}, {"text": "  Nun habe ich alle Knoten besucht, das heisst ich habe meinen minimalen Spannbaum gefunden.  Wir sehen auch, in diesem Beispiel hatte X jetzt den Wert 120, war somit groesser als die obere Schranke, die wir vorher festgelegt haben und deshalb wurde diese Kante nicht verwendet, um den minimalen Spannbaum zu bilden.", "start": 1346.0, "end": 1366.0}, {"text": "  Nun haben wir zwei verschiedene Algorithmen kennengelernt, um den minimalen Spannbaum auf einem Grafen zu finden.  Stellt sich nun also die Frage, wann man welchen Algorithmus anwendet.  Den Algorithmus von Prim wendet man vor allem an, wenn man ein Grafen mit sehr vielen Kanten hat, das heisst sehr viel mehr Kanten, als wir Knoten im Grafen haben.", "start": 1367.0, "end": 1388.0}, {"text": "  Hier muessen wir naemlich nicht alle Kanten untersuchen, bevor unser Algorithmus terminieren kann.  Kruzkal hingegen ist sehr effizient bei sehr grossen Grafen mit wenig Kanten.  Das liegt daran, dass die Union-Feindatestruktur sehr effizient arbeitet.", "start": 1389.0, "end": 1398.0}]}]