[{"lecture": "31624_62_course_video", "Timestamps": [{"text": "  In diesem Video werden wir uns anschauen, wie er euren Computer fuer das Loesen der Programmierhausaufgaben vorbereitet, also welche Programme notwendig sind und wie ihr diese installiert.  Dazu schauen wir uns zuerst an, wie ihr Git installiert und einrichtet, dann installieren wir zusammen die korrekte Java Version und abschliessend richten wir uns unsere Programmierumgebung ein.", "start": 0.0, "end": 33.0}, {"text": "  Ich werde das Ganze fuer das Betriebssystem Windows 10 und fuer die IDE IntelliG IDEA zeigen, fuer alle anderen Betriebssysteme und Programmierumgebungen sind die Schritte allerdings aehnlich.  Beginnen wir also nun damit, wie ihr Git installiert und korrekt einrichtet.  Dazu folgen wir Schritt fuer Schritt der Anleitung, die auf dem Hausaufgabenblatt 0 angegeben ist.", "start": 35.0, "end": 59.0}, {"text": "  Sollten wir GitLab bisher noch nicht verwendet haben, melden wir uns also erstmalig unter git.tu-berlin.de mit unseren Tubet-Daten ein.  Klickt ihr den Link auf dem Aufgabenblatt an, werdet ihr auf diese Seite weitergeleitet. Hier koennt ihr euch nun mit euren Tubet-Daten einloggen.  Hier seht ihr alle eure bisherigen Projekte. Solltet ihr noch keine Git-Projekte haben, wird diese Seite leer sein.", "start": 61.0, "end": 85.0}, {"text": "  Haben wir uns nun erstmalig erfolgreich bei Git angemeldet, koennen wir uns nun fuer die Hausaufgaben registrieren.  Hierbei wird ein Ordner erstellt, wo ihr eure persoenlichen Hausaufgabenabgaben hochladen koennt.  Dazu klicken wir wieder den Link auf unserem Hausaufgabenblatt an.  Wir werden auf diese Seite weitergeleitet und koennen hier das Passwort ALGODAT2021 eingeben.", "start": 86.0, "end": 115.0}, {"text": "  Wir klicken auf Weiter und nun muessen wir unseren TU-Benutzernahme eingeben.  Anschliessend klicken wir auf Fuer Hausaufgaben registrieren.  Sollte alles funktioniert haben, steht dort nun Anmeldung erfolgreich.  Bitte beachtet, dass dieser Schritt manchmal ein wenig Zeit benoetigt.", "start": 115.0, "end": 139.0}, {"text": "  Ihr erhaltet nun ausserdem zwei E-Mails an eure TU-Mail-Adresse, dass sie den Link auf dem Link auf dem Hausaufgaben registrieren.  Zum einen habt ihr nun Zugriff auf den Materialordner, wo alle Vorgaben fuer die Hausaufgaben hochgeladen werden.  Zum anderen habt ihr nun Zugang zu einem persoenlichen Ordner, wo ihr eure Abgaben hochladen koennt.", "start": 139.0, "end": 162.0}, {"text": "  Um das zu ueberpruefen, koennen wir nun wieder auf unsere Git-Seite gehen, also git.tu-mail-adresse.  Uns einloggen und hier sollten nun zwei neue Projekte verfuegbar sein.  Um das Material regelmaessig herunterladen zu koennen und um eure Abgaben vernuenftig hochladen zu koennen, benoetigen wir die Software Git.  Eine Moeglichkeit, Git fuer Windows zu installieren, ist die Seite Git-SCM-Git.", "start": 162.0, "end": 190.0}, {"text": "  Hier koennen wir auf Download vor Windows klicken und speichern uns die Datei.  Diese koennen wir nun ausfuehren, um die Installation zu starten.  Fuer die Installation folgen wir einfach den Anweisung des Installations-Adresses.  An dieser Stelle koennen wir einstellen, welchen Editor Git standardmaessig verwendet wird.  Wir koennen die Installationen in die Installe stellen, um die Installe zu starten.", "start": 191.0, "end": 222.0}, {"text": "  Fuer die Installe folgen wir einfach den Anweisung des Installationsprogramms.  Ich will hier als mein Standard-Editor Supplymtext.  Hier koennt ihr nun entscheiden, ob ihr die Git-Bash verwenden wollt oder die Standard-Komando-Zeile von Windows.  Wird ihr die Mitteleroption, ist beides moeglich.  Hier waehle ich, dass ich die Standard-Windows-Konsul verwenden moechte.", "start": 233.0, "end": 286.0}, {"text": "  Abschliessend klicke ich auf Installieren.  Hier gebe ich nun den Befehl Git ein.  Hier kann man die Installe auf Installieren.  Hier kann man die Installe auf Installieren.  Hier kann man die Installe auf Installieren.  Um nun zu ueberpruefen, ob Git erfolgreich installiert ist, oeffne ich meine Konsole.  Hier gebe ich nun den Befehl Git ein.", "start": 292.0, "end": 330.0}, {"text": "  Wie wir sehen, erhalten wir jetzt eine Hilfe, wo alle wichtigen Git-Befaele aufgelistet sind.  Sollte hier eine Fehlermeldung auftreten, dass der Befehl Git nicht bekannt ist, wurde Git nicht korrekt installiert.  Um nun nicht bei jedem Zugriff auf ein Git-Verzeichnis erneut, den Username und das Passwort eingeben zu muessen, verwenden wir sogenannte SSH Keys.", "start": 331.0, "end": 357.0}, {"text": "  Hierbei wird ein privater Schluessel auf eurem System hinterlegt und ihr ladet bei Git einen oeffentlichen Schluessel hoch.  Um ein solches Schluesselpart zu erzeugen, oeffnen wir erneut die Konsole.  Das Schluesselpart wird mit dem Befehl SSH KeyGen erzeugt.  Anschliessend gibt man mittels des Arguments minus T den Typ des Schluessel an.  Die TU empfiehlt hier den folgenden Typen.", "start": 358.0, "end": 396.0}, {"text": "  Mittels des Arguments minus C kann man nun als Kommentar seine eigene E-Mail-Adresse angeben.  Diese muss dabei in Anfuehrungsstrichen stehen.  Anschliessend klicken wir auf Enter.  Nun bestaetigen wir alles weitere auch mit Enter.  Wird euch dieses Bild angezeigt, wurde der Schluessel erfolgreich erstellt.  Um auf den Schluessel zugreifen zu koennen, oeffnen wir unseren Userordner.", "start": 396.0, "end": 439.0}, {"text": "  In unserem Userordner ist jetzt ein neuer Ordner entstanden mit dem Namen Punkt SSH.  Diesen oeffnen wir und sehen hier zwei Dateien zum einen den privaten Schluessel und zum anderen den oeffentlichen Schluessel.  Auf der Git-Webseite muessen wir nur den oeffentlichen Schluessel hochladen.", "start": 440.0, "end": 461.0}, {"text": "  Dazu machen wir einen Rechtsklick auf die Datei, oeffnen mit und waehlen ein Editor aus, in meinem Fall zu bleiben Text.  Der Schluessel kann nun wie folgt aussehen.  Um ihn auf der Git-Webseite zu hinterlegen, muessen wir ihn zuerst einmal kopieren.  Nun wechseln wir auf die Git-Webseite.", "start": 463.0, "end": 489.0}, {"text": "  Auf der Git-Webseite waehlen wir nun oben rechts dieses Symbol aus, gehen auf Preferences und anschliessend links in der Menueleiste auf SSH Keys.  Hier seht ihr alle SSH Keys, die ihr hinterlegt habt.  Bisher wurden noch keine hinterlegt.  Wir fuegen jetzt allerdings unser neuen Schluessel hinzu, indem wir den in dieses Feld hier einfuegen und anschliessend auf Add Key druecken.", "start": 491.0, "end": 521.0}, {"text": "  Um zu testen, ob das Ganze funktioniert hat, gehen wir auf Projects, Your Projects und wollen uns nun den Materialordner kopieren bzw. Klonen.  Dazu klicken wir den Materialordner an, gehen auf Clone und kopieren diesen Text, der hier bei Clone mit SSH steht.  Anschliessend oeffnen wir wieder die Konsole.  Nun navigieren wir zuerst in den Ordner, wohin wir unser Materialordner herunterladen wollen.", "start": 523.0, "end": 548.0}, {"text": "  In meinem Fall bin ich schon in dem richtigen Ordner, das heisst ich muss das Verzeichnis nicht mehr wechseln.  Anschliessend koennen wir unser Verzeichnis herunterladen, indem wir den Befehl Git-Clone verwenden.  An dieser Stelle muessen wir noch die URL unseres Git-Verzeichnisses angeben, das ist aber eben genau die, die wir gerade eben kopiert haben.", "start": 550.0, "end": 572.0}, {"text": "  Diese koennen wir nun mittels eines einfachen Rechtsklicks hinzufuegen.  Das Ganze bestaetigen wir nun mit Enter.  Sollten wir das erste Mal von Git.tu-berlin.de herunterladen, muessen wir hier noch einmal mit Yes bestaetigen.  Anschliessend mit Enter.  Sollten keine Fehlermeldung aufgetreten sein, wurde das Verzeichnis erfolgreich heruntergeladen.", "start": 573.0, "end": 603.0}, {"text": "  Um nun auch den Abgabeordner herunter zu laden, verfolgen wir die gleichen Schritte.  Dazu gehen wir zuerst einmal zurueck auf die Git-Seite, wieder auf yourprojects, waehlen diesmal unseren persoenlichen Abgabeordner,  gehen hier drueben auf clone und kopieren wieder die URL fuer clonewithssh.", "start": 604.0, "end": 636.0}, {"text": " Nun gehen wir zurueck in die Konsole, verwenden wieder den Befehl Git-Clone  und anschliessend die korrekte URL, die wir gerade kopiert haben.  Nun kann ich innerhalb meines Abgabeverzeichnisses Dateien hinzufuegen, beziehungsweise Ordner hinzufuegen.  Als Beispiel erstelle ich hier einmal den Ordner blatt00  und innerhalb dieses Ordners erstelle ich ein neues Textdokument mit dem Namen test.text.", "start": 641.0, "end": 671.0}, {"text": "  Moechte ich dieses nun als meine Abgabe hochladen, gehe ich wieder zurueck in die Konsole.  Hier wechsel ich mit dem CD-Befil in mein Abgabeverzeichnis, in dem Fall heisst das end.scratch  und kann hier nun mit des Git-Befaele meine Abgabe hochladen.  Zuerst einmal muessen alle Dateien zum sogenannten Commit hinzugefuegt werden.", "start": 672.0, "end": 701.0}, {"text": "  Um alle veraenderten Dateien hinzuzufuegen, verwende ich den Befehl Git-Add.  Nun mache ich einen sogenannten Commit, um alle Aenderungen wirksam zu machen.  Um einen Commit zuordnen zu koennen, gibt man mittels minus M noch eine Nachricht dazu ein.  Wir sehen nun, dass eine neue Datei namens test.text erzeugt wurde.  Um einen solchen Commit endgueltig hochzuladen, verwende ich den Befehl Git-Push.", "start": 707.0, "end": 751.0}, {"text": "  Wie ihr sehen koennt, war dieser Push gerade noch nicht erfolgreich, das sollte aber alles funktionieren,  sobald die Hausaufgaben freigeschaltet sind.  Ansonsten sind die Schritte allerdings immer die gleichen.  Alle Dateien, die veraendert wurden, muessen in das korrekte Abgabeverzeichnis hinzugefuegt werden.", "start": 751.0, "end": 772.0}, {"text": " Anschliessend wechsle ich in der Konsole in dieses Abgabeverzeichnis,  verwende die Befehle Git-Add, Git-Commit und Git-Push.  Nun, da wir unser Git erfolgreich eingerichtet haben, schauen wir uns den naechsten Schritt an.  In diesem werden wir die neueste Java-Version installieren, die wir benoetigen, um unsere Hausaufgaben zu machen.", "start": 775.0, "end": 798.0}, {"text": "  Um die neueste Version des Java-Development-Kit herunterzuladen, habe ich bei Google einfach Java, JDK gesucht  und folge dem ersten Link auf die Oracle-Webseite.  Hier koennen wir die neueste Version herunterladen.  Wir waehlen die Version abhaengig vom Betriebssystem, in meinem Fall Windows 10 64-Bit  und laden den Installer herunter.", "start": 798.0, "end": 833.0}, {"text": "  Sobald der Download abgeschlossen ist, koennen wir das Installationsprogramm ausfuehren.  Im Installationsprogramm folgen wir einfach den Anweisung.  Und schon wurde die Installation abgeschlossen.  Nach der Installation von Java gucken wir uns noch an, wie wir die Programmierumgebung IntelliG, Idea installieren, um einem das Programmieren zu erleichtern.", "start": 835.0, "end": 870.0}, {"text": "  Um Idea zu installieren, folgen wir einfach wieder der Anleitung auf dem Aufgabenblatt.  Zuerst laden wir uns also Idea herunter.  Dazu klicken wir den obersten Link an.  Dieser Link bringt uns auf die JetBrains-Webseite, auf der wir Idea herunterladen koennen.  Dazu klicken wir einfach auf Download.  Ist der Download abgeschlossen, koennen wir das Installationsprogramm starten.", "start": 871.0, "end": 901.0}, {"text": "  Auch hier folgen wir einfach wieder den Anweisungen des Installationsprogramms.  Sobald das Programm fertig installiert ist, koennen wir den Installer wieder schliessen.  Nun schauen wir uns abschliessen noch an, was wir beim ersten Start von IntelliG, Idea beachten muessen.  Dazu starten wir jetzt mit dem Installationsprogramm.  Hier muessen wir zuerst die Nutzungsvereinbarung zustimmen.", "start": 927.0, "end": 958.0}, {"text": "  Anschliessend waehlen wir aus, dass wir das Programm als Student benutzen.  Ist Idea einmal vollstaendig geoeffnet, kann man das Programm als Student benutzen.  Das Programm ist dann noch auf der Webseite, wo wir das Programm als Student benutzen.  Ist Idea einmal vollstaendig geoeffnet, sieht die Programmierumgebung folgendermassen aus.", "start": 960.0, "end": 983.0}, {"text": "  Hier koennt ihr neue Projekte anlegen oder bestehende Projekte oeffnen.  Fuer jedes neue Aufgabenblatt findet ihr ein bestehendes Projekt im Materialordner, was ihr dann hier oeffnen koennt.  Anschliessend koennt ihr es bearbeiten und die bearbeitete Version in eurem Abgabeordner hochladen.", "start": 984.0, "end": 1008.0}, {"text": "  Wenn ihr ausserdem genauer wissen wollt, was man mit Git alles machen kann oder wie man Idea benutzt, dann schaut euch auch die anderen Videos zu diesen Themen an.  Ansonsten sollte eure Programmierumgebung nun vollstaendig vorbereitet sein.  Oeffnet ihr zum ersten Mal ein Projekt, dann wird euch folgende Meldung angezeigt.", "start": 1010.0, "end": 1028.0}, {"text": "  Moechtet ihr Git direkt aus Idea heraus benutzen, dann muesst ihr hier den Internetzugriff zulassen.  Sobald ein Projekt einmal geoeffnet ist, koennt ihr dann hier auf alle Dateien des Projektes zugreifen.  Das war's auch schon mit dem ersten kleinen Tutoriumsvideo.", "start": 1030.0, "end": 1053.0}, {"text": "  Solltet ihr Fragen oder Feedback zu diesem Video oder dem aktuellen Aufgabenblatt haben, dann schreibt gerne einen Beitrag in dem Forum fuer diese Woche.  Viel Erfolg und bis zum naechsten Video!", "start": 1054.0, "end": 1056.0}]}]