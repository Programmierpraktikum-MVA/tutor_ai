[{"lecture": "31624_41_course_video", "Timestamps": [{"text": "  Hello, in this video we'll talk about Java doc and comments.  I will structure this discussion by first talking about comments in general and then  we will look at examples and how to use, why to use Java doc as comments.  Comments are very helpful when you want to interpret a code.  It is not only useful for others when they want to read it, but also for yourself.", "start": 0.0, "end": 41.92}, {"text": "  If you go back and want to understand why you did some steps, it's not only the clarity  how you write the code, how simple you implement the algorithm, but also the comments that  you attach to parts of that code.", "start": 41.92, "end": 65.64}, {"text": " So this is generally a good practice to comment your code so you will understand it and others  will understand it when they look at your code and they want to improve it or modify  it.  Then there is this other type of comments, the Java doc, where you actually document  the behavior of your code.", "start": 65.64, "end": 89.72}, {"text": " This is not only that you want to look at the code and see parts of it that it functions,  but before going into details of functions, of methods or other parts, you can create  a documentation.  And in the documentation, you can specify the functionalities, the behaviors, the expected  behaviors.", "start": 89.72, "end": 108.36}, {"text": " What are the arguments of functions?  What are the role of those arguments?  What are the attributes of a class?  What type of data you store in those?  All this information then helps others to build on top of your code or for you to have  a well-documented code.  So let's have a look at some practical examples of documenting your code when you want to  look at directly at your code.", "start": 108.36, "end": 140.64000000000001}, {"text": "  So here is an example of a class called cars.  And I have two attributes, string model and the horsepower that is a double value.  And I have a method called print car info.  Now to read this, it's super intuitive and simple because I've chosen also the name  of the method to be as descriptive as possible, also the names of attributes as descriptive  as possible.", "start": 140.64000000000001, "end": 185.4}, {"text": "  But you can tell yourself or your future self that look here, I print information about  the car object.  If I have other at reviews, I need to extend the print function.  And now that I had overflow, I pressed enter and because I use a smart ID, then it directly  commented the next line too.", "start": 185.4, "end": 230.56}, {"text": " By pressing control and backslash, you can uncomment and comment the lines where your  cursor is at the same time.  But let's give it this way.  If I have multiple lines that explain what does the following line and even hint what  needs to be changed in the future, I can have a different commenting style.  Let's remove the comments around this section.", "start": 230.56, "end": 261.2}, {"text": "  And now let's select this section and say that we want to comment this with this other  style with slash star and then end it with another slash star.  So now the text that is within these markers is considered to be a multi-line comment.  And we can be even more funky.  We can add a to do here and look because this is again a smart IDE.", "start": 261.2, "end": 302.72}, {"text": "  It colors differently the line where I had added the to do item.  So now I know that the first line will describe what the following lines will do and I have  also a to do item that I need to do later if it's needed.  And that to do item now, if we go to the to do sections, is found and you can have multiple  to do items that you want to later solve.", "start": 302.72, "end": 336.96}, {"text": "  So commenting can be used to interpret your code easily in the future and to do items  for yourself or for others in the future.  So these simple comments improve the interpretation of the code itself when you want to look at  the code.  You can understand what the code does without looking at it if you've write a proper Java  doc.", "start": 336.96, "end": 365.08000000000004}, {"text": "  So you don't have to actually look the actual implementation that I'm using a system alt  print line method.  I could use a system print method and then I will pay.  I will need to know this by looking at the code whether there is a new line or no new  line.  So how can we do that?  And let's look at the Java doc in Java Intel J IDE.", "start": 365.08000000000004, "end": 403.79999999999995}, {"text": "  So if you look for Java doc in the documentation, then you can see that you can create such  docs by using this symbol and then pressing enter.  And if you do so, it will automatically fill out information like parameters of the code  that you should explain what they do.  You can use also context actions and create that or press I'll enter on specific methods  or classes.", "start": 403.84000000000003, "end": 449.28}, {"text": "  If you change your code, then you can do auto fix also with alt enter or control shift A.  You can render in the IDE directly the documentation how it will look like in a file when you look  only at the documentation with control alt Q.  And you can see also by control Q to have a quick documentation view.", "start": 449.28, "end": 486.68}, {"text": "  So there are a lot of information about Java docs here and we will now look at some examples.  How shall we proceed?  So let's right click and then there and that's what was it?  Let's look at it.  It was actually the context menu.  So I want the context menu for cars.  My cursor is on cars.  I press alt and enter and I can say add Java doc.  And I have the Java doc for cars.", "start": 486.68, "end": 534.5999999999999}, {"text": "  Here there are special symbols that I can add.  Let's create one for the method itself too.  Alt enter Java doc.  Let's add string user.  So a user requests this model and let's change then the output that says hi plus user.  The model is the cars model is with that amount of horsepower.  So now I made a change.", "start": 534.5999999999999, "end": 601.44}, {"text": "  Let's see how can we fix the documentation because now we have an argument for this method  but it's not listed automatically here.  And what was the fixing?  Control shift A.  Control shift A fix and you see that simple we can fix it and then it automatically adds  the user that is a parameter the owner of the car.  So here we will say that print without a new line and the attributes of the car.", "start": 601.44, "end": 705.36}, {"text": "  So let's say how can we see how can we render and that's control alt and Q.  This is how it will be rendered.  Params the list of params.  As you can see there is already a small dash which added manually so I can remove that  by pressing again control alt cube.  We can go back and remove it.", "start": 705.36, "end": 768.04}, {"text": " So for the class let's tell that we have attributes and we have the goal of this class should  be described at the very beginning.  Then we can have an author and that is me.  Smart IDE already knows that I am added the user of this PC.  Then I have parameter which is model, car model.  And let's add another thing that is param.  Let's take the method name.", "start": 768.04, "end": 884.6800000000001}, {"text": "  To print information about the car object and these are red and let's see what is that.  This shows that we can make this package private or create tests for it.  We will talk about this later.  These are also colored red as we have such items already there.", "start": 884.6800000000001, "end": 933.4399999999999}, {"text": " Another interesting feature if you now click on this method and you press control Q then  you can see the documentation in a quick view window.  So let's create this document.  Let's generate the Java doc and to do that we have to go to tools menu and generate Java  doc.  All right, let's do that.  So tools generate Java doc.", "start": 933.4399999999999, "end": 963.1999999999999}, {"text": "  Let's select where we want to output this and this will be in documents and I have here  a Java doc example folder.  We will create it there.  Okay.  And we are done.  Whenever you execute something always look at the output because this pops into my eyes  that I have three errors and two warnings.  And to find out what are these let's increase the size of this.  So the doc is created there.", "start": 963.1999999999999, "end": 999.5600000000001}, {"text": "  Let's scroll to the top of the output of Java doc and see there is a warning that in main  public class has no comments.  So it will not be able to generate the doc for it.  And there is the first error, invalid use of param, then followed by three times.  So the red coloring already suggested that there is an invalid use cannot resolve symbol  model.  And we will look into that in a short.", "start": 999.5600000000001, "end": 1039.9599999999998}, {"text": "  So all three of these cannot be associated with that.  So these are the three param errors and then the warning there is method in the main as  you can see this is our old main example from primitive data types.  I have there the main class and the main and these are not documented.  So let's have a quick look before we fix the errors.  Let's have a quick look.", "start": 1039.9599999999998, "end": 1078.16}, {"text": " What is the output of this?  Java doc and there is index one, two, three interesting and if we open index one that  is all classes see cars class in the company com.  So this is the package.  We're still not using TV and the description, the goal of this class methods constructor  for this class package and package description.  And we can have a look at the class car.", "start": 1078.16, "end": 1114.96}, {"text": "  Recorded components, mobile car horsepower, method to print engine property car.  Recorded components.  And then we have the constructor cars.  That is, if you remember we did not implement any constructor yet.  But it's below here.  Then we can look at method summary.  There is a void.  And there is our description.  This is the header, the name, visibility, return type.", "start": 1114.96, "end": 1155.48}, {"text": "  And then it has an argument and it has a parameter, the owner of the car.  And we have also other information like inherited properties from other, so the base Java class.  So this is how it looks like.  So let's see.  If we already look at this, as you can see, we added this as parameters of the class.  But you don't need to do that because that is actually taken and summarized over here.", "start": 1155.48, "end": 1199.0}, {"text": "  So we can go back to our example, select cars and as suggested, remove.  Obviously it's suggested a good thing to be removed.  And let's add a documentation for this thing here.  And that was Alt, Enter and JavaDoc.  Let's do that.  Now hold the model of the car.  And another one for this guy.  Alt, control, enter, Alt, enter and JavaDoc.  Reel number holding the HP of the car.  Great.", "start": 1199.0, "end": 1259.0}, {"text": "  And now let's go to tools and regenerate.  And there are just two warnings.  And this is the update that we get.  So there are the two classes, the main that we did not look at this time.  And there is cars.  And again, this is a public class cars.  There is constructor summary.  We have no documentation.  We did not create that.  There is the method summary, constructor details, method details.", "start": 1259.0, "end": 1305.12}, {"text": "  And there are no attributes.  So we use the default visibility of these attributes.  And let us make them public.  And we create again that.  Now we look again at those.  And here we go.  So depending on the visibility, the documentation might show or might not.  Obviously, if something is private to the class, then other classes do not require to know  about those functionalities.", "start": 1305.12, "end": 1354.16}, {"text": "  So this is about how to use in an application this class.  It's not how to extend the class itself.  So only publicly visible attributes and methods are listed in this documentation.  So this is how you can create Java docs and how you should comment your code.  To become a good programmer, please use comments.  It sounds like an additional work for you, but actually it pays off on the long term.", "start": 1354.16, "end": 1396.32}, {"text": "  Because you will understand what you want to write and you will be able to modify it  way simpler.  Have fun documenting your code.", "start": 1396.32, "end": 1400.76}]}]