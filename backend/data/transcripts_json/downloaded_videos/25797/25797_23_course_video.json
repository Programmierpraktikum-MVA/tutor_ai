[{"lecture": "25797_23_course_video", "Timestamps": [{"text": "  In diesem dritten Video moechte ich hier zeigen, wie man unter Linux mit Python arbeiten kann.  Eine Regel ist Python schon unter Linux vorinstalliert.  So auch jeder Fall.  Sollte das nicht der Fall sein, koennte Python mit einem Packetmanager nachinstallieren.  Und der Ubuntu oder Debian wuerde das dann von Sinema Zuru, ABT, Instaal, Python 3.", "start": 0.0, "end": 29.0}, {"text": "  Jetzt hier schon der Fall, das heisst ich kann mit Python 3 ohne weiteres an Python 3 Interpreter starten.  Wenn ich dagegen Python eingebe, dann starte ich eine veraltete Version von Python 2 mit dieser Version, weil man nicht arbeiten muss.  Das heisst, ihr muesst immer mit Python 3 arbeiten.", "start": 29.0, "end": 51.0}, {"text": "  Achtung, auf anderen Distributionen, wenn es ausreicht, wenn ihr Python eingibt, hier lande ich jetzt direkt an Python 3.  Python 2 ist in dem Fall gar nicht installiert.  Unter Debian und Ubuntu muss da aber halt explizit Python 3 aufhoben.  Als kleines Beispiel koennen wir mal eine Datei Hello World von Py erstellen.  So, hw fuer Hello World.  Und jetzt schreiben wir hier mal rein.", "start": 51.0, "end": 71.0}, {"text": "  Buehnt Hello World.  Und mit Python, hw.py, wuerde ich jetzt die 2 Version verwenden und mit Python 3 eben die 3 Version.  Dann wird die Datei hier ausgefuehrt.  Eine Sache, die ihr relativ haeufig tun muesst, ist dann das Installieren von Paketen.  Ein Paket jetzt installieren, verwenden wir den Paketmanager pip vom Python.", "start": 73.0, "end": 102.0}, {"text": "  Weil wir jetzt eben wieder mit Python 3 arbeiten wollen, verwenden wir pip 3.  Der Befehl, um dann das Paket PyArme zu installieren, waere ganz einfach pip3 install pyArme.  So, dann wird pip probieren, dieses Paket global zu installieren.  So, jetzt in dem Fall, so dass das maximal mein User Account installieren koennen und nicht auf den gesamten System, weil dafuer die Rechte fehlen.", "start": 102.0, "end": 134.0}, {"text": "  Das kann ich nochmal explizit angeben, das kann in einigen Faellen Fehler loesen, naemlich explizit sage pip3 install minus minus user pyArme.  Als pip soll das wirklich nur fuer mich als User installieren.  Jetzt installieren, genau jetzt sagt er mir, okay das habe ich schon getan, das heisst pyArme ist quasi fuer mich als Nutzer schon installiert.", "start": 134.0, "end": 154.0}, {"text": "  Als er nicht jetzt Python 3 startet, kann ich ohne weiteres pyArme importieren.  Also das Problem, was jetzt auftreten kann, ist, dass pyArme quasi fuer mein Nutzer Account komplett installiert ist und ich jetzt aber vielleicht verschiedene Projekte am Laufen habe.  In einem Projekt moechte ich halt die Hausaufgaben vom wissenschaftlichen Rechnen loesen.", "start": 155.0, "end": 179.0}, {"text": "  In einem anderen Projekt baue ich vielleicht ein Backend fuer eine Webseite.  Und in dem Backend brauche ich vielleicht ganz spezifische Versionen von verschiedenen Bibliotheken verpalten.  Fuer wissenschaftliches Rechnen will ich aber die allermeisten Versionen installieren.  Dann kann ich natuerlich eben mit dem pip3 install minus minus user die allermeisten Versionen von NumPy installieren.", "start": 179.0, "end": 204.0}, {"text": "  Allerdings kann es sein, dass wir damit eben mein Backend-Prepub machen, weil ich da eine ganz spezifische Version brauche.  Was man dann in der Regel machen moechte, ist das Arbeiten mit virtuellen Umgebungen.  Als ich erstelle mir eine virtuelle Parkenumgebung nur fuer wissenschaftliches Rechnen, eine fuer Backend und vielleicht eine weitere fuer noch ein anderes Projekt.", "start": 204.0, "end": 223.0}, {"text": "  Die Pakete werde ich denn nur fuer diese virtuelle Umgebung installieren.  Als die virtuelle Umgebung ist dann wirklich abgekapselt von allen anderen Python-Umgebungen und wenn ich dann um welche Pakete in dieser virtuellen Umgebung installiere fuer wissenschaftliches Rechnen,  dann kann ich meine anderen Projekte nicht kaputt machen, weil die haben quasi ihre eigene virtuelle Umgebung.", "start": 223.0, "end": 244.0}, {"text": "  Jetzt mit der virtuellen Umgebung funktioniert. Wollen wir uns jetzt mal anschauen?  Ein kleines Beispiel, wenn wir jetzt eben eine virtuelle Umgebung fuer wissenschaftliches Rechnen erstellen.  Dann ist tu mit Python3 minus m, wenn fuer virtuelle Umgebung, also Python3 ist der Interpreter minus m,  das heisst ich moechte das Modul venv verwenden.", "start": 244.0, "end": 266.0}, {"text": "  Jetzt muss ich noch den Namen fuer die virtuelle Umgebung angeben.  In dem Fall dann Sammeln mal Virenvenv.  Jetzt sagt er mir, okay, das funktioniert nicht.  Ich muss erst mal dieses Paket hier nachinstallieren.  Das werden wir jetzt einmal tun.  Python3 minus venv.  Jetzt haben wir jetzt erledigt.  Jetzt koennen wir den Befehl nochmal ausfuehren.", "start": 266.0, "end": 296.0}, {"text": "  Und jetzt hat hoffentlich alles erfolgreich geklappt.  Hier sehen wir, wo du diese ordner Virenvenv erstellst.  Eine Ordner koennen wir jetzt einfach mal reingehen.  Jetzt gehen wir mal in den Binnenordner.  Und hier sehen wir jetzt verschiedene Dateien.  Einige sind gruen, diese gruenen Dateien sind ausfuehrbar und wir sehen hier diese drei Skripte noch.", "start": 296.0, "end": 321.0}, {"text": "  Jetzt brauchen wir ein bisschen Hintergrundwissen dazu, wie dieses Terminal unter Linux funktioniert.  Das ist Terminal verschiedene Variablen.  Die sehen wir jetzt hier.  Also die Shell Variables auf BnBash gesetzt.  Wir arbeiten also mit Bash-Achelle.  Aktuelle Arbeitsverzeichnungen ist dieser Ordner oder dieser Fatem System und so weiter.  Und eine ganz, ganz wichtige Variabel ist dieser Path.", "start": 321.0, "end": 347.0}, {"text": "  Der Path enthaelt mehrere Fahde, die alle getrenzt sind mit so einem Doppelpunkt.  Und was jetzt Bash macht, ist diese Path Variabel durchgehen.  Und unter jedem Fat nachschauen, ob es bestimmte ausfuehrbare Dateien findet.  Das heisst, wenn ich erst Python 3 eingebe, und guck Bash zuerst unter den ersten Fat, ob es da Python 3 findet.  Wenn nicht, guckt es unter den naechsten Fat und so weiter.", "start": 347.0, "end": 374.0}, {"text": "  Und dann muss es noch lange bis diese ausfuehrbare Datei gefunden hat.  Momentan muesste Python 3 unter Userlocal bin zu finden sein.  Oder vielleicht sogar unter Slashbin.  Das weiss ich gar nicht.  Hier oben steht es, es muesste sogar unter User bin Python 3 sein.  So, das wuerde diese Datei, wuerde Bash dann fuer uns ausfuehren.  Und jetzt haben wir aber diese virtuelle Umgebung erstellt.", "start": 374.0, "end": 403.0}, {"text": "  Und jetzt laden, d.h. noch mal kurz eine Ordner hoch, noch eine Ordner.  Hier sage ich, so ist der Ordner von meiner virtuellen Umgebung bin.  Und da moechte ich das script activate haben.  Im wederlichen lad ich jetzt diese Datei in meine Bash-Konfiguration.  Das kann ich jetzt einmal tun.  Wir sehen, wir haben jetzt diese virtuelle Umgebung wie Revenf geladen.", "start": 403.0, "end": 428.0}, {"text": "  Und das koennen wir uns noch mal die Variable path angucken.  Jetzt sehen wir, dass hier noch vor den ersten Eintracht von vorher  noch der Fahrt von den Binnordner von dieser virtuellen Umgebung gekommen ist.  Das ist ja nicht jetzt Python 3 eingeben.  Es wird nicht mehr die Python 3 Datei aus Userlocal bin ausgefuehrt,  sondern die Python 3 Datei aus Home, Daniel und dann der virtuellen Umgebung.", "start": 428.0, "end": 459.0}, {"text": "  Was wir natuerlich auch machen koennen, jetzt werde ich das einmal wieder  verlassen, diese virtuelle Umgebung mit die Activate.  Ich bin wieder direkt in diesen Ordner rein.  Das kann ich auch einfach sagen in diesem Ordner, also Punkt fuer hier.  Und fuer hier slash Python 3.  Natuerlich auch direkt Python 3 aus den Ordner aus.  Selbe kann ich machen fuer Pip.", "start": 459.0, "end": 484.0}, {"text": "  Wenn ich in den Virtual environment Pip Paket installieren will,  dann muss ich das Pip aus dem Virtual environment verwenden.  Als wenn ich schon in den Ordner bin, koennte ich bei uns gleich Pip 3 sagen,  install eben was, dann wuerde ich fuer dieses Virtual environment installieren.", "start": 484.0, "end": 507.0}, {"text": " Sollte ich einfacher geht das, wenn ich dann halt einfach diese Activate Datei lade,  jetzt so ist das virtuelle environment aktiviere damit ja path angepasst wird.  Jetzt kann ich mich einfach tippen Pip 3.  Er sucht Batch zuerst in den Ordner und fuehrt das Pip 3 von dieser virtuellen Umgebung aus.  Und ich kann es einfach sagen install paar jahrel.  Es wuerde jetzt wirklich noch mal installieren.", "start": 507.0, "end": 525.0}, {"text": "  Er hat es schon runtergeladen, also er benutzt die runtergeladene Gekaeste Version  und installiert das jetzt in meiner virtuellen Umgebung hier.  Mit Pip 3.  Das kann ich mir das dann einmal anzeigen lassen.  Was ich installiert habe und dann sehe ich, okay, ich habe hier zwei Versionen  von paar jahrel installiert und wie Package bis.  Genau, das ist super praktisch.", "start": 525.0, "end": 546.0}, {"text": "  Jetzt kann ich hier mit halt arbeiten.  Ich braeuchte dann zum Beispiel halt noch ein paar fuer wissenschaftliches rechnen.  Das kann ich mir in diese virtuelle Umgebung reinsetzen, installieren.  Und wenn ich jetzt meine Hausfugaben einfuehren will,  dann kann ich halt dieses virtuelle, diese virtuelle Umgebung extra fuer wissenschaftliches rechnen in.", "start": 546.0, "end": 568.0}, {"text": "  Fuer ein anderes Projekt wuerde ich dann halt eine andere Umgebung nehmen.  Dann tipp.  Ich habe mir meinen eigenen privaten System hier ein ordner virtual environments angelegt.  Und hier findet man ein paar virtual environments, mit denen ich gerade arbeite.  Ich habe eines fuer Standardoperationen, mit denen ich halt auf das schnell zu greifen kann.", "start": 568.0, "end": 594.0}, {"text": "  Ich habe eines fuer Neovim und ich habe eines fuer ein privates Projekt.  Soweit so gut.  Und mal kurz, ob ich alles abgedeckt habe, was ich sagen wollte.  Genau, also nochmal zusammengefasst.  Weiten haette immer vorinstalliert, sondern nur kann man es nachinstallieren.  Man kann mit pip3 install minus minus user fuer den Nutzerpaket installieren.", "start": 594.0, "end": 621.0}, {"text": "  Ich wuerde aber das erstellen, wenn einer virtuellen Umgebung erfhelt.  So, das haben wir den Standardweg quasi fuer Python und der Linux angeschaut.  Jetzt moechte ich euch nochmal zeigen, wie man das Ganze mit Miniconder umsetzen kann.  Also ihr koennt einmal nach Miniconder googeln, das ist quasi mal ein spezieller Paketmanager,  nur fuer Python und andere Programme ersparen.", "start": 621.0, "end": 646.0}, {"text": "  Jetzt haben wir hier die Webseite mit den verschiedenen Installern.  Und wir speichern uns jetzt einmal die Link mit dem Python 3.8 Linux Installer.  Den werde ich mir jetzt hier einmal runterladen mit vget.  Und den kann ich jetzt einmal ausfuehren mit bashminiconder.  Ich schaetze mal, dass da ein Moment, man muss jetzt die Zents akzeptieren, den Fahrt angeben,  wohin er es installieren soll.", "start": 646.0, "end": 684.0}, {"text": "  Jetzt faengt er an zu installieren, der beide pausiere ich einmal und dann geht es gleich weiter.  Okay, ihr werdet ueber noch gefragt, ob ihr Connorinnits ausfuehren wollt.  Da sagt ihr dann einfach ja.  Das war es dann quasi schon mit der Installation.  Jetzt hier einmal ganz kurz neu einloggen.  Und jetzt seht ihr hier schon, dass jetzt hier ein Base steht.", "start": 684.0, "end": 706.0}, {"text": "  Die Standard Umgebung von Miniconder ist diese Base Umgebung.  Das ist quasi der Standard Python Umgebung.  Und eh nicht zu dem eben,  macht Miniconder nichts anderes, ausser unterm Path anpassen.  Allerdings tut das Miniconder immer.  Als bei den Virtualen Warmens haben wir den Path nur angepasst,  wenn wir eine virtuelle Umgebung aktiviert haben.", "start": 706.0, "end": 731.0}, {"text": "  Hier verwenden wir grundsaetzlich im Path den Fahrt vom Miniconder.  Und Miniconder steuert jetzt komplett,  auf welche Miniconder Umgebung wir weitergeleitet werden,  abhaengig davon, wie halt Miniconder momentan quasi eingestellt ist.  Die Standard Umgebung ist Base.  Und analog zu PIP, koennen wir jetzt sagen, Connor install NumPy.", "start": 733.0, "end": 760.0}, {"text": " Wollen wir aber nicht tun,  weil dann wuerden wir quasi unser Base Environment veraendern.  Stattdessen wollen wir uns jetzt hier auch wieder ein Environment erstellen.  Und das koennen wir tun mit ConnorCreate,  minus N fuer Name.  Jetzt haben wir genauso hier wieder ViraVamp.  Jetzt erstellen wir diese Connor Umgebung.", "start": 760.0, "end": 784.0}, {"text": " Das hat uns hier mit Connor aktiviert, ViraVamp,  koennen wir das aktivieren, das machen wir mal fix.  Und dann wird der Base, die Base Umgebung angepasst,  zu dem ViraVamp.  Und hier koennen wir jetzt halt genauso wie hier unter PIP,  dann wieder Paket installieren,  allerdings nicht mehr PIP installiert, sondern mit Connor installiert.", "start": 788.0, "end": 806.0}, {"text": "  Und zwar wollen wir jetzt auch hier einfach mal paar Jamel installieren.  Oder jetzt, jetzt fragt er nochmal nach,  ob er das wirklich tun soll und installiert das Ganze.  Jetzt koennen wir hier wieder rausgehen,  wenn wir dann fertig gearbeitet haben mit Connor and Deactivate.  Und jetzt sind wir wieder auf der Base Installation.", "start": 806.0, "end": 834.0}, {"text": " Wir gehen dazu den Standardweg mit den Virtual Revolvings,  baut mit Connor nochmal eine komplette Python Installation  auf unser System drauf,  die halt eben in diesen Miniconnor Ordner in anderen Homefolder lebt.  Und wir koennen dann halt relativ bequem quasi komplett mit Connor  all die verschiedenen Umgebungen, die wir haben,  pflegen, verwalten, neu erstellen und so weiter.", "start": 834.0, "end": 858.0}, {"text": "  Eine Sache, die man immer mal noch machen sollte bei Connor  ist, Connor abzudaten.  Das koennen wir tun mit Connor Update Connor.  Dann wird das gesamte Connor System einmal geupdatet.  Das sollte jetzt hier nicht allzu spannend sein,  was da noch kommt, was schon durchgelaufen.  Ich denke, jetzt habt ihr einen ziemlich guten Ueberblick darueber,  wie ihr unter Linux mit Python arbeiten koennt.", "start": 858.0, "end": 886.0}, {"text": "  Genau, dann geht es weiter mit der ersten richtigen inhaltlichen Uebung,  wo wir starten mit Python zu arbeiten, dann am Freitag.", "start": 886.0, "end": 891.0}]}]