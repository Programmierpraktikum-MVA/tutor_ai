[{"lecture": "25797_24_course_video", "Timestamps": [{"text": "  In diesem Video moechte ich jetzt zeigen wie ihr Pfeifen unter Windows installieren koennt.  Die erste Variante ist dass ihr auf Pfeifen.org geht und euch dann unter Downloads den Installer fuer Windows runterladet.  Den koennt ihr dann einfach auswuehren.  Hier wuerde ich euch empfehlen den Haken zu machen, dass ihr Pfeifen zu euren Fahrten zufuegen wollt.", "start": 0.0, "end": 30.0}, {"text": "  Dann koennt ihr das auswuehren und Pfeifen wird installiert.  Wenn ihr Pfeifen erfolgreich installiert habt, koennt ihr den Installer schliessen und eine PowerShell oeffnen.  Das geht dahin indem ihr einfach eine PowerShell sucht.  Was ich euch empfehlen wuerde ist im Microsoft Store, dass wir das Terminal zu installieren.", "start": 30.0, "end": 57.0}, {"text": "  Das finde ich persoenlich noch ein bisschen angenehmer und schicker zum arbeiten.  Das ist also dieses Windows Terminal.  Hier kann ich jetzt schreiben Pipe und Exit.  Damit starte ich dann ein Partner Interpreter.  In dem kann ich jetzt hier Python Code schreiben.  Verlastung kann ich den wieder mit Exit, Klammer auf, Klammer zu.", "start": 57.0, "end": 85.0}, {"text": "  Der Fall sein wird fuer die Hausfugaben ist, dass ihr Python Dateien ausbuehren wollt.  Dafuer werden wir mal einer erstellen.  Dafuer verwende ich Visual Studio Code.  Und unter New File koennt ihr eine neue erstellen.  Und jetzt schreibe ich hier mal rein.  Wieder empfuehrend.  Hello World.  Und speichert die Datei auf den Desktop.  Einmal ist Hello World.", "start": 85.0, "end": 111.0}, {"text": "  So jetzt kann ich hier in der PowerShell auf mein Desktop gehen.  Und die Datei ganz einfach mit Pipe und Exit, Hello World und Pipe ausfuehren.  Und sehe ich hier Hello World.  Eine Sache, die ihr wahrscheinlich berauchen werdet, ist das Installieren von Bibliotheken.  Ich moechte euch jetzt einmal zeigen.", "start": 111.0, "end": 136.0}, {"text": "  Die erste Variante, wie ihr das machen koennt, ist indem ihr Pipe und Exit eingebt, minus M, PIP.  Heisst ihr verwendet PIP, also in meinem Partner Interpreter.  Und dann das Modul PIP.  Mit dem koennt ihr dann etwas installieren, zum Beispiel NumPy, das ist auch relativ langer.  Ich waehle mal das Beispiel PyYamel.  Macht jetzt endlich keinen Unterschied, mit NumPy wuerde es genauso funktionieren.", "start": 136.0, "end": 157.0}, {"text": "  Ich wuerde es jetzt einmal machen.  Ein Installiert ihr das.  Und beschwert sich allerdings, dass ich eine veraltete Version von PIP verwende.  Also werden wir jetzt an der Stelle erstmal ignorieren.  Weil ich werde euch einmal zeigen, wie man den Fehler auch beheben kann.", "start": 157.0, "end": 184.0}, {"text": "  Der Nachteil in dieser Variante, die wir jetzt hier gewaehlt haben, ist, dass wir PyYamel quasi global fuer alle Projekte installiert haben.  Das heisst, wenn ich an unterschiedlichen Stellen in meinem System fuer unterschiedliche Projekte Python installieren will,  wird er immer auf diese globale Bibliothek PyYamel zurueckgreifen.", "start": 184.0, "end": 202.0}, {"text": "  Was man in der Regel aber moechte, ist, dass man fuer verschiedene Projekte verschiedene Umgebungen hat.  Das heisst, wir werden leicht zum Beispiel eine Umgebung erstellen fuer VIR.", "start": 202.0, "end": 225.0}, {"text": " Und immer dann, wenn ich etwas mache fuer das Modul wissenschaftliches Rechnen,  zum Beispiel die Hausfugaben oder eine Uebung,  dann werde ich diese Umgebung verwenden, um die Bibliotheken zu installieren,  die ich brauche, um den Programcode auszufuehren.", "start": 225.0, "end": 235.0}, {"text": " Das kann sein, dass ich in einem anderen Projekt zum Beispiel ein Projekt,  naemlich einen Backend fuer eine Webseite baue,  andere Pakete brauche.  Das heisst, die gleichen Pakete habe ich in einer anderen Version.  Ich moechte die Moeglichkeit haben, die Pakete unabhaengig voneinander in verschiedenen Versionen zu installieren.  Das mache ich eben, indem ich diese Umgebung vorhalte.", "start": 235.0, "end": 256.0}, {"text": "  Als wir jetzt an den virtuellen Umgebungen mit den Virtualen Roymands fuer VIR,  und mit denen koennen wir dann immer in dem Modul arbeiten  und fuer andere Projekte waehlen wir dann aber eine andere Umgebung.  Dann koennen wir halt die Module, die wir brauchen, gekapselt, fuer diese Umgebung installieren.", "start": 256.0, "end": 280.0}, {"text": " So, und das zu erreichen, werde ich wieder den Partner-Antipredator verwenden,  diesmal bei das Modul VENF, Virtual Royament.  Und jetzt gebe ich den ganzen Namen, und zwar sagen wir einfach mal VIRVENF.  So, wir jetzt erstellen, das ist da auch ein ganz kleinen Moment.  Und auf, verabmen wir mal ganz kurz.  Da haben wir es.", "start": 280.0, "end": 310.0}, {"text": "  Jetzt haben wir halt ein Ordner, VIRVENF, in den Ordner koennen wir jetzt reingehen.  Das Allerwichtigste, in den Ordner ist der unterordner Skrips.  Und dort liegt ein Skript, aktiviert.  Das brauchen wir, um jetzt in dieser Arbeitsumgebung, in dieser PowerShell Virtual Roymands zu aktivieren.  Das heisst, seit der PowerShell dann verwende jetzt diese virtuelle Umgebung.", "start": 310.0, "end": 330.0}, {"text": "  Wenn wir das machen, dann wird das nicht funktionieren, weil Winder sagt,  nein, ich moechte bitte keinen Skript auswuehren.  Der Trick ist jetzt, einfach mal zu googeln,  und dann stoesst man relativ schnell auf diverse Stack Overflow-Eintraege.  Und die Loesung ist, dass man die Execution Policy von Windows auf Remote Sign setzen muss.", "start": 330.0, "end": 357.0}, {"text": "  Dann kann man auch an der PowerShell nicht signierte fremde Skripte auswuehren.  Als zu erreichen, muessen wir Video rum an der PowerShell oeffnen,  allerdings mit Abministrator richten.  Er versucht, nach PowerShell, als Abministrator ausfuehren.  Das ist er.  Und hier gebe ich jetzt einfach den Befehl von eben ein.  Das fragt er nochmal nach.", "start": 357.0, "end": 383.0}, {"text": " Wollen Sie das wirklich und in welcher Ausfuehrung?  Wir sagen einfach nur Ja.  Dann werden wir in der Lage sein, das Skript hier auszufuehren.  Und dann sehen wir, dass wir jetzt unsere virtuelle Umgebung installiert.  Und genauso wie eben, koennen wir jetzt wieder ein Interpreter starten, Python.exe.  Wir koennen damit unsere Datei auf den Desktop ausfuehren.  Dafuer muessen wir zwei Ordner hochgehen.", "start": 383.0, "end": 412.0}, {"text": "  Python.exe, dann hetero.py war das.  Das funktioniert auch noch ohne Probleme.  Das Hinweis, wir verwenden jetzt wirklich Python.exe.  Vorher, ohne dass die Umgebung haben wir Python.exe verwendet.  Jetzt sollte die direkt mit Python.exe arbeiten.  Warum genau das ist, weiss ich nicht.  Dafuer kann ich mich leider nicht gut genutmet mit Windows aus.", "start": 412.0, "end": 439.0}, {"text": "  Jetzt wollen wir wieder mit minus M und pip ein Paket installieren.  Zum Beispiel werde ich jetzt tqdm installieren.  Es funktioniert und jetzt bekommen wir genauso wie eben diese Warnung.  Achtung, ihr benutzt eine veraltete pip Version.  Das heisst, wir wollen das jetzt einmal updaten.  Dafuer verwenden wir Python.exe minus M pip und wieder install.", "start": 439.0, "end": 465.0}, {"text": "  Aber diesmal mit minus u minus grosses u steht fuer minus minus upgrade.  Und upgraden wollen wir pip.  Das fuellen wir aus.  Hoffentlich kommt keine Fehlermeldung.  Nein, hat erfolgreich funktioniert.  Damit sollten wir jetzt diese Fehlermeldungen dann behoben haben.  Also weit so gut.  Hier koennt ihr relativ entspannt arbeiten.", "start": 465.0, "end": 492.0}, {"text": "  Wenn ihr das deaktivieren wollt, solltet ihr dafuer auch ein Script geben.  Genau, und zwar hier die activate.  Das hat nicht funktioniert.  Eine sehr sichere Variante soll es dann sein, einfach diese PowerShell zu werden.  Dann eine neue zu oeffnen.  Dann wuerde ich weitermachen.  Die erste Variante haben wir abgearbeitet.", "start": 498.0, "end": 524.0}, {"text": " Als zweite Variante, wie ihr Python installieren koennt, ist mit minikonda,  beziehungsweise anakonda.  Dafuer sucht ihr einfach mal nach minikonda.  Und dann werdet ihr relativ schnell hier auf dieser Seite landen.  Und hier koennt ihr euch wieder ein installer fuer Windows runterladen.  Habe ich wieder gemacht.  Und jetzt fuehren wir den installer wieder einmal aus.", "start": 524.0, "end": 549.0}, {"text": "  Klicken auf next, akzeptieren die Lizenzbedingungen.  Das haben wir die Wahl, ob wir das global fuer alle Benutzer installieren wollen oder nur fuer uns.  In dem Fall installieren ist nur fuer mich.  Dann fahrt dann nochmal nach dem Fahrt, der kann so bleiben.  Und hier solltet ihr alles so lassen, wie es ist.  Also minikonda nicht zu eurem Fahrt hinzufuegen.  Und dann laeuft die Installation.", "start": 550.0, "end": 581.0}, {"text": "  So, nachdem auch hier die Installation abgeschlossen ist.  Und wir den installer schliessen.  Wir wollen kein Tutorial machen und nicht noch mehr lernen.  Und dann einfach nur schliessen.  Und jetzt um anakonda oder minikonda verwenden zu koennen, suchen wir einfach nach anakonda.  Dann gibt es einen extra Eintrag anakonda prompt, den wollen wir verwenden.", "start": 581.0, "end": 604.0}, {"text": "  Das ist eben leider nicht mehr so schoen wie Windows Terminal.  Aber wollen eben jetzt mit minikonda arbeiten.  Und hier haben wir jetzt wieder die Moeglichkeit, Python zu verwenden.  In dem Fall befinden wir uns direkt in einer virtuellen Umgebung, geheist Base.  Base ist quasi die Standard anakonda Umgebung.  Dann werden wir wieder Python.exe ausfuehren, ein Interpreter starten.", "start": 604.0, "end": 628.0}, {"text": "  Hier sehen wir jetzt, dass wir gerade eine andere Python Version verwenden.  Also jetzt gerade verwenden wir 3.8.3.  Eben mit der globalen Version haben wir 3.9.  Also mit der globalen Version meine ich die Versionen, die wir ueber den Python.org installer installiert haben.  So, verlassen wir das wieder.  Wenn ich genauso hier auf den Desktop wechseln.  Und sollte jetzt auch mit Python.", "start": 628.0, "end": 657.0}, {"text": "xe  unserer Hello World Datei ausfuehren koennen.  Genau, das hat problemlos funktioniert.  Analog zu eben mit dem Virtual Environment unterstuetzt auch anakonda,  das Installieren von virtuellen Umgebung.  Als wir koennen jetzt hier direkt von der Install  um die Umgebung zu verabschieden,  dann wuerden wir das aber in dieses Base  in diese Base Umgebung installieren.  Das wollen wir nicht.", "start": 657.0, "end": 685.0}, {"text": "  Wir wollen vorher noch eine neue Umgebung erstellen.  Machen wir mit kondacreate minus n fuer name.  Und hier will ich wieder vRevent.  Da stellt er das.  Yes.  Und wenn wir jetzt das starten wollen,  sagt uns hier auch kondacreate vRevent von das zu starten.  Von der D aktiviert, koennen wir das dann wieder beenden  und wieder nach in die Base Umgebung zurueckzukehren.", "start": 685.0, "end": 717.0}, {"text": "  Deshalb mit kondacreate vRevent.  Jetzt koennen wir hier ganz entspannen,  wir koennen install zum Beispiel Nampa installieren.  Und wie ihr seht, hier haben wir jetzt  Ups.  Moment, wir installieren das einmal kurz.  Installiert hier die Abhaengigkeiten.  Ich kann einmal hoch scrollen.  Und ich nicht.  Moechtest mal kurz warten.  Das sollten wir fast am Ende angekommen sein.", "start": 717.0, "end": 759.0}, {"text": "  Genau, jetzt haben wir hier vorne nicht mehr Base stehen,  sondern halt vRevent.  Und dann Loloq zu eben koennen wir jetzt wieder  ein Interpreter in dieser Umgebung starten  und zum Beispiel Nampa impartieren.  So, das haben wir erledigt.  Eine Sache, die noch wichtig ist bei Minicondor,  ist, dass man das Ganze auf der anderen Seite  ist, dass man das Ganze abtodate haelt.", "start": 759.0, "end": 789.0}, {"text": "  Erstmal werde ich jetzt die Umgebung beenden  mit deactivate.  Jetzt kann ich mit kondar,  Ups, habe ich mich verthippt,  die aktiviert.  Genau, jetzt bin ich wieder in Base Drainer  und jetzt kann ich mit kondar  update kondar  Minicondar, aktualisieren und abtodate halten.  Das sollte man dann ab und zu mal machen.  Genau, den lassen wir jetzt einmal mal durchlaufen.", "start": 789.0, "end": 819.0}, {"text": "  Das wird uns jetzt erstmal nicht weiter spannend.  Wir haben das jetzt aktualisiert.  Das heisst, Minicondor haben wir auch abgearbeitet.  Dann kommen wir jetzt der dritten und letzten Variante.  Es wird jetzt relativ kurz.  Und zwar gibt das das Windows-Subsystem fuer Linux.  Das heisst, ihr koennt auf einfachem Wege  eine virtuelle Maschine machen.", "start": 819.0, "end": 840.0}, {"text": " Das heisst, ihr koennt auf einfachem Wege  eine virtuelle Maschine machen.  Auf einem Windows-Rechner installieren.  In der ihr dann eben Linux laufen lasst.  Und dann koennt ihr mit Python arbeiten.  Wie direkt mit einer Linux-Umgebung.  Genau, da gibt es schon  vom Microsoft sehr, sehr gute Guides.  Die wuerde ich euch empfehlen.  Es gibt mittlerweile eine neue Variante.  WSL2.", "start": 840.0, "end": 860.0}, {"text": "  Und setz ich reich die  WSL1-Variante aus.  Ihr muesst nur wenn das Hubsystem fuer Linux ist.  Dann koennt ihr das auf den Linken,  auf den Linken, auf den Linken,  auf den Linken, auf den Linken.  Ihr muesst nur wenn das Hubsystem fuer Linux installieren.  Ihr koennt dann auch das Update  auf die neue Version machen.  Das ist aber nicht unbedingt  zwingend notwendig fuer unsere Zwecke.", "start": 860.0, "end": 882.0}, {"text": "  Da wuerde ich euch empfehlen,  einfach den Guide zu folgen.  Dann moechte ich jetzt nicht weiter drauf eingehen.  Und dann koennt ihr eben  auch ganz einfach,  nachdem was installiert habt.  In dem Fall habe ich glaube ich  Debbie mit hier drauf.  Das ist Debbie.  Genau, hier habe ich Debbie installiert.  Und dann kann ich hiermit auch wieder  ein Terminal starten.", "start": 882.0, "end": 908.0}, {"text": " Und zwar in dem Fall  ein Linux Terminal.  Und hier kann ich jetzt ganz normal  arbeiten, wie mit  einem Terminal  auf einer normalen Linux Installation.  Hier kann ich jetzt auch ohne weiteres  Herp-Halten auswuehren.  Und kommen jetzt hier an  Interpreter.  Das coole ist,  es wird ein Substitum fuer Linux,  das direkt auch ermoeglicht,  auf eure Windows Dateien  zuzugreifen.", "start": 908.0, "end": 936.0}, {"text": "  Als auch hier kann ich jetzt auf mein Desktop  geben, wo die Datei  Hello World von eben liegt.  Und die kann ich jetzt hier  wieder mit Python 3  ausfuehren.  Dann bekomme ich das Hello World zurueck.  Wie genau ihr mit  Python auf dieser  Linux Variante arbeiten koennt,  weil die ihr in den naechsten Video sehen.  Das verhaelt sich quasi genau gleich  zu einer richtigen Linux Installation.", "start": 936.0, "end": 962.0}, {"text": "  Als du nicht genau wissen  wollt, wie ihr Mini-Con  installieren koennen, wie  Virtual Environments auf Linux  installieren koennen und damit  arbeiten koennt, schau dir bitte auch  einfach das naechste Video an.  Genau, zu guter Letzt  habe ich noch 2 weitere  Hinweise.  Und zwar, habt ihr das  eben schon gesehen, die Datei Hello World  habe ich mit Visual Studio Code  erstellt.", "start": 962.0, "end": 990.0}, {"text": "  Es ist ein Text-Editor,  der fuer ganz viele verschiedene  Programmiersprachen sehr gut geeignet ist.  Ich persoenlich mag den sehr, sehr gerne.  Es ist keine Open Source Software,  aber sie ist kostenlos verfuegbar  fuer alle. Das wuerde ich euch  einmal empfehlen, das ist aber mehr eine  persoenliche Empfehlung.", "start": 990.0, "end": 1010.0}, {"text": " Was wir im Rahmen von wissenschaftlichen Rechnen  jedes Jahr den Studierenden empfohlen haben,  sind die Entwicklungsumgebung  von JetBrainz.  Da gibt es in der Regel eine Community  Variante, die quasi fuer alle  frei verfuegbar ist.  Und die Pro Variante, die Pro  Variante ist fuer Studierende kostenlos.  Das heisst, ihr koennt euch mit eurer  TU-Mail Adresse hier registrieren.", "start": 1010.0, "end": 1032.0}, {"text": " Dann koennt ihr alle  pro  Entwicklungsumgebung kostenfrei nutzen.  Solange ihr Student seid.  Der Nachteil gegenueber von  Visual Studio Code  ist leider, dass es  fuer jede Programmiersprache eine  extra Entwicklungsumgebung gibt.  Das heisst, fuer Java's gibt es zum Beispiel WebStorm,  fuer Java gibt es IntelliJ,  fuer C++  ist es RC Line, und fuer  Python ist es  Pyt charm.", "start": 1032.0, "end": 1060.0}, {"text": "  Und die funktionieren in der Regel  wirklich nur fuer die Programmiersprachen.  Visual Studio Code unterstuetzt halt mehrere  die wir in der Regel nicht mehr haben.  Das finde ich persoenlich sehr angenehm.  Allerdings muss man da zusagen, dass  diese Jackbrains-  Entwicklungsumgebung sehr, sehr gut sind.  Das kann ich euch also wirklich empfehlen.  Alles klar, so weit so gut.", "start": 1060.0, "end": 1082.0}, {"text": " Bis spaeter  zum Freitag oder zu den  Linux Installationsvideo.", "start": 1082.0, "end": 1084.0}]}]