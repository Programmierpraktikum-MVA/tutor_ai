[{"lecture": "31624_49_course_video", "Timestamps": [{"text": "  So, FizzBuzz is a ridiculously simple programming task.  It's used in job interviews for software developers a lot.  And it's found that a very surprisingly high number of candidates failed this simple task.  So the description is just this.", "start": 0.0, "end": 39.8}, {"text": " There's a program that prints the numbers from 1 to 100 for multiples of 3, print Fizz,  for multiples of 5, print Buzz, for multiples of both 3 and 5, print FizzBuzz.  That's it.  Okay, so let's open an idea.  New project.  Yeah, so we want to default Java project, default SDK, next project name FizzBuzz,  and finish.  Okay, so we're doing a thing here.  And there we have it.", "start": 39.8, "end": 82.92}, {"text": "  Just made this empty directory tree.  All right, so now I'm going to create a class in here.  Let's call that FizzBuzz.  Okay, so I could just create a class with this name, sure.  But I want something more.  I want to run this as a program, and I also want to write some unit tests for it.  So let's just create the whole package.  Let's write, following the convention, com.example.fizzbuzz.", "start": 82.92, "end": 128.32}, {"text": "  And there you have it.  So that's the package name.  And here's the class.  And like I said, I want to run this as a program.  So let's just create the main method right away.  So public static void main, string args.  And as we discussed, FizzBuzz is going to iterate through the first 100 numbers.  So for int i equals 0, i equals 100.  Should be 1, because it's going from 100 to 100.", "start": 128.32, "end": 181.95999999999998}, {"text": "  And i plus equals 1.  And we want to print something for every number.  So system.out.print.line.  So we're not just going to print numbers.  We're actually going to print string, where the number should also be cast as a string.  And if it's a multiple of three, we print the string.  Otherwise, just a number, or sometimes buzz.  So for i, we want to transform that into some string.", "start": 181.95999999999998, "end": 226.72}, {"text": "  So what we need to implement, basically, is the transform function.  So let's just write it.  Public string transform, which would take an integer argument called, let's say, num.  And here, we want to return some string.  So let's call that a result string.  And of course, we need to declare its type and everything in the string.  Result.  All right.", "start": 226.72, "end": 272.76}, {"text": " So what's the issue here?  So this is a random to never assign.  And this would complain that it needs to be initialized.  So yeah, let's initialize it with an empty string.  And then we would have some if statements here, which is the main program logic.  All right.  So what is this red line complaining about?  Non-static method cannot be more than that.  Okay, make this static.  Sure.", "start": 273.64, "end": 304.03999999999996}, {"text": "  So it added this.  And now things look good.  Let's just run this as a sanity check.  So when I click this arrow and run, it will both compile or build this and then run it.  So it's the same as running build project and then run.  But I'm just going to use this handy shorted here.  Okay.  So it has built and run the program.  There's a lot of empty space here.", "start": 304.03999999999996, "end": 344.4}, {"text": "  Look at the size of that scroll bar.  Yeah.  So I think it just printed 100 blank strings.  Good.  So I could just start writing this program here.  But what I want to show you is how to use tests.  So I'm going to show you test driven development.", "start": 344.4, "end": 379.4}, {"text": " What we do here is we will write a bunch of unit tests, which check the workings of the  transform function for a few useful or representative examples.  And then we will just write this function to satisfy those tests.  So let's generate a test class.  So what idea offers is a handy way to just create this automatically.  Generate test.  No test routes found.  I have no idea what that means.", "start": 379.4, "end": 403.4}, {"text": "  I'm just going to click OK.  Testing library.  I want to use test and G.  So not on the module.  Make download library from repository.  Sure.  Okay.  So it's found a library in the repository.  Sure.  I want Java docs and I want annotations.  Okay.  So this tool will generate some test methods for two of the methods in this class.  I only care about transform.  Okay.  And there you have it.", "start": 403.4, "end": 457.4}, {"text": "  So it's made this new class, FizzBuzzTest, with a test stub function.  Stub meaning that it's just an empty function that I can fill in.  So test transform is the test for transform.  Now I don't want to have a single test function for transform.  Although I could do that.  So let's just type some test in.  So first we need an object for FizzBuzz.  So FizzBuzz equals new FizzBuzz.", "start": 457.4, "end": 498.4}, {"text": "  I don't like the way this reads.  So I'm going to call this FB.  So there are not three FizzBuzzes in one sentence.  And now let's use some asserts.  So what I want to use is not these asserts, but the asserts from testNG.  And it looks like there is an error because it cannot resolve symbol assert.  So that's just the IDE complaining.  Sure.  I want to add library in testNG to class path.  Okay.", "start": 498.4, "end": 538.4}, {"text": "  Good.  And now the highlighting is fixed.  And let's write the asserts.  Assert equals.  We'll compare the actual value that is computed versus the thing that we expect to compute.  So assert equals FB.transform.  What's the problem here?  Yeah, looks fine.  FB.transform3 Fizz.  That's our first test assert.  We're going to do this for five buzz.  For 15 we should get FizzBuzz.", "start": 538.4, "end": 612.4}, {"text": "  For four we should get four.  The string four, not the number four.  And I think that should work.  But actually I can run these tests.  Let's see what we output.  Okay.  So it says that test.transform failed.  And it says that expected Fizz but found something empty.  That makes sense because we only have an empty string right now.  So this test output is not very informative.", "start": 612.4, "end": 662.4}, {"text": "  That's because we have one single test.transform function and running the test tells us that,  of course, some tests failed.  But that is not very informative.  We will just spin this into several different actual tests.  So this annotation here marks a method as being a test method.  So let's call this the Fizz method.  And let's create several other test methods like buzz,  buzz and number.", "start": 662.4, "end": 727.4}, {"text": "  And I'm going to move these asserts in there.  So now we have four different dedicated tests.  And of course this object needs to go out here.  All right.  And let's actually add a few more.  So six and maybe 27.  You should hold true for 10 and even 55.  It should work for 15, 30, 75.  And number should work for let's say also a lot of prime numbers, all prime numbers.", "start": 727.4, "end": 804.4}, {"text": "  So let's make it seven and perhaps 29.  Yeah.  All right.  Let's run these tests.  Good.  So now all tests are failing with, of course, the same problem.  But now we know that it fails for every test case.  Now let's actually write FizzBuzz.  It's super simple.  So if the number is divisible by three, then it's numModulo3 equals zero.  In which case the result is Fizz.", "start": 804.4, "end": 855.4}, {"text": "  If numModulo5 equals zero, the result is buzz.  And of course if it was not divisible by anything, then if num, no, if result is an empty string,  then return just the number.  But of course num is an end.  So we need to stringify it.  So string.value of num.  And if the result contains FizzBuzz or FizzorBuzz, then we just return the result.  And we don't need this line anymore.  Okay.", "start": 855.4, "end": 909.4}, {"text": "  What is this?  Complaining about string values and comparing this.  Okay.  Let's run our tests again.  Okay.  So we are now passing three tests.  So we are passing Fizz, buzz, and number.  But FizzBuzz won't work.  It's saying it expected FizzBuzz for 15, but actually it just got buzz.  Okay.", "start": 909.4, "end": 961.4}, {"text": " Why does that happen?  So I could just go over to FizzBuzz.java and try to understand the code, trying to think about why it's failing.  Or I could do the smart and easy thing and use the debugger.  And the way to do this is I would first set a break point at this problematic line by just clicking in this spot here.  That creates this red dot.", "start": 961.4, "end": 982.4}, {"text": "  And that's an indication that we place the break point there.  And now I will just run the debugger.  So you can use this debug button to do this.  And the debugger is active.  What it did was it ran this test code and it paused at this line.  And what you see here in the variables pane is the variables that are present in this scope, in memory, and the value that they have been assigned.", "start": 982.4, "end": 1027.4}, {"text": "  Now the debugger has an important set of tools that you see down here.  So this button here will resume the program so it will no longer be stuck at this break point and go further and continue executing more lines.  This will stop the test.  Actually, it will stop the debugger.  And these are some of the most important tools.", "start": 1027.4, "end": 1063.4}, {"text": "  So this step over, what that does is it does not enter a function call that is about to happen, but it simply executes that as just another line and moves on to the next line.  What we want to do here is step into.  And we actually want to see what the transform function internally will compute when we begin debugging from this line.  So let's use step into.", "start": 1063.4, "end": 1084.4}, {"text": "  There are some other things like step out.  What step out does is if we are debugging line by line within some function scope, it will step out of that scope.  So for now, let's just do step into.  That's all we care about.  So what it did was I clicked that and I got these two purple highlights.  I don't want to inspect what's going on in assert equals.", "start": 1084.4, "end": 1111.4}, {"text": "  I care about what's happening in transform.  So in idea, I can just click this purple highlight and it takes me to transform.  And now the debugger tells me that right now the value of num is 15.  And that's also present in the variables being here.  The num equals 15 is in the scope.  When I do step into again, it's going to execute the next line.", "start": 1111.4, "end": 1143.4}, {"text": "  And now the result variable is instantiated with an empty string.  Now we do this again and it checks if the number is divisible by three, which it is.  And therefore the result is now going to be set to phase.  Now let's do the same thing for five.  And the result was actually set to buzz.  So that should not happen because the number is 15 and it should be fizz bus.", "start": 1143.4, "end": 1174.4}, {"text": "  So it just overwrote fizz by bus.  So that's a problem in our code.  So now let's fix it.  So I'm going to stop the debugging here because I now know the problem.  And let's just fix it.  This should be pos equals to fizz.  We just want to concatenate or bend the string.  And hopefully this fixes the problem.", "start": 1174.4, "end": 1209.4}, {"text": "  Let's run the test again this time without the debugger because I think it will be fine.  And yes, everything worked just fine.  All tests are passing.  That gives me a lot of confidence to just run the program again.  So let's run.  Let's look at the output.  Yep, so one, two, fizz.  Four, buzz, fizz.  15, we got fizz bus.  Or 30, we got fizz bus.  So it seems to be working.  Yes, very nice.", "start": 1209.4, "end": 1259.4}, {"text": "  So now you know how to write fizz bus, which is apparently an important industry skill to have.  You know how to write unit tests and you know how to get into debugging.  If you want to see some more ridiculously long implementations of fizz bus, then do check out this blog post.  It's called Fizz Bus in Too Much Detail by Tom Delling.", "start": 1259.4, "end": 1290.4}, {"text": "  And it contains different implementations in many different paradigms.  Starting from the naive kind that we just wrote to the dry paradigm to functional programming.  And a lot of unnecessarily involved bells and whistles added to an otherwise useless program.", "start": 1290.4, "end": 1308.4}]}]