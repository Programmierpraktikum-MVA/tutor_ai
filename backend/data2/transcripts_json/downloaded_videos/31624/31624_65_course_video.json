[{"lecture": "31624_65_course_video", "Timestamps": [{"text": "  Der Bellemann-Ford-Algorithmus eignet sich zur Bestimmung kuerzester Wege in beliebigen  Digrafen.  Wir duerfen auch negative Kantengewichte haben.  Negative Zuegel sind allerdings verboten, wie im ersten Video besprochen wurde, da sonst  die Frage nach kuerzesten Wegen nicht sinnvoll ist.  Der Algorithmus laesst sich sehr schoen kurz beschreiben.  Relaxiere v-1-mal alle Kanten des Grafen.", "start": 0.0, "end": 25.88}, {"text": "  Das ist alles.  Man koennte das Fahrfahren genauso implementieren und es wuerde korrekt funktionieren.  Allerdings nicht sehr effizient, da viele vergebliche Relaxierungsversuche unternommen  wird.  Schauen wir uns ein Beispiel an.  Zu Beginn ist nur die Distanz zu dem Startknoten bekannt, sie ist null, waehrend alle anderen  Knoten einen Distanzwert unendlich haben.", "start": 26.759999999999998, "end": 53.64}, {"text": "  Zunaechst ist das Relaxieren der meisten Kanten sinnlos.  Wenn der Anfangsknoten der Kante noch nicht entdeckt wurde, der Distanzwert also noch  den Wert unendlich hat, kann ueber diese Kante kein Kandidat fuer einen kuerzesten Weg  gefunden werden.  Anders gesagt, Relaxierung kann nur fuer Kanten ausgefuehrt werden, der in Anfangsknoten  schon einen Distanzwert hat.", "start": 53.96, "end": 77.08}, {"text": "  Im ersten Schritt also nur ausgehend von S.  Um ein Algorithmus zu formulieren, der zwecklose Relaxierungsversuche auslaesst, muessen wir  genauer verstehen, in welcher Reihenvorbild die Relaxierung tatsaechlich greifen.  Dies laesst sich am besten an einer Hand-Simulation studieren.  In der Ausgangssituation hat nur der Startknoten S einen endlichen Distanzwert, und zwar null.", "start": 77.08, "end": 100.80000000000001}, {"text": "  Bei allen anderen Knoten ist der Distanzwert auf unendlich initialisiert.  Sie koennen also nicht Ausgangspunkt von Relaxierung sein.  Im ersten Durchlauf der Relaxierung kommen also nur die von S ausgehenden Kanten S,  A, S, B und S, D zum Zuge.  Wir erhalten die Distanzwerte fuer die Knoten A, B und D als die Kantengewichte.", "start": 100.80000000000001, "end": 126.72}, {"text": "  Also Knoten A wird von S erreicht und erzielt eine Wehklaenge 11, Knoten B ebenfalls von  S wehklaenge 7 und Knoten D auch von S wehklaenge 3.  Damit ist der erste Durchlauf der Relaxierung beendet.  Welche Kanten werden im zweiten Durchlauf effektiv relaxiert?  Alle Kanten, deren Ausgangsknoten schon einen Distanzwert haben, kommen in Frage.", "start": 126.72, "end": 151.32}, {"text": "  Allerdings waere es zwecklos, die Kanten, die von S ausgehen, zu relaxieren.  Da sich der Distanzwert von S im letzten Durchlauf nicht geaendert hat, kann keine Kante von S  einen neuen kuerzeren Weg binden.  Wir brauchen also nur diejenigen Kanten zu relaxieren, deren Anfangsknoten im letzten  Durchlauf geaendert wurde.  Also gehen wir die Knoten A, B und D der Reihe nach durch.", "start": 151.32, "end": 176.0}, {"text": "  Der Knoten A hat keine ausgehenden Kanten, da gibt es also nichts zu relaxieren.  Gehen wir zu den Knoten B.  Der kuerzeste bekannteste Weg ist 7 und von da aus koennen wir jetzt gucken, ob wir neue  kuerzeste Wege finden.  Der Weg von die Kante von B nach A, hier gibt einen Weg zum Knoten A der Laenge 7 plus  3, gleich 10.  Der ist also kuerzer als der schon bekannte Weg der Laenge 11.", "start": 176.0, "end": 202.56}, {"text": "  Daher wird er hier in die Liste notiert.  Wir kommen zu A ueber B als letzten Knoten und erzielen einen Weg der Laenge 10.  Dies ist das Resultat aus einem zweiten Durchlauf.  Als naechstes kommen wir von B nach C und finden einen Weg der Laenge 7 plus 3, also  10.  Damit sind alle von B ausgehenden Kanten betrachtet und wir gehen zu dem naechsten Knoten in der  Liste D.", "start": 202.56, "end": 230.88}, {"text": "  Von D kommen wir zu B, C und E.  Zum Knoten B hat der Weg ueber D die Laenge 3 plus 4 gleich 7.  Ein Weg dieser Laenge ist aber schon bekannt, ist also so uninteressant.  Zum Knoten C finden wir einen neuen Weg der Laenge 3 plus 6 gleich 9 und damit finden  wir tatsaechlich einen kuerzeren Weg.", "start": 230.88, "end": 260.48}, {"text": " Wir haben zwar schon einen Weg im zweiten Durchlauf gefunden, aber innerhalb dieses  zweiten Durchlaufes finden wir nun einen neuen kuerzeren Weg und notieren das in die  Liste.  Zu C geht es von D mit einer Weglaenge 9.  Wunderbar.  Es bleibt noch der Knoten E, der von D aus mit der Laenge 3 plus 2 gleich 5 entdeckt  wird.  Zweiter Durchlauf ist damit beendet.", "start": 260.48, "end": 284.36}, {"text": "  Fuer den dritten Durchlauf betrachten wir diejenigen drei Knoten, deren Distanzwert  im zweiten Durchlauf aktualisiert wurde.  Knoten A koennen wir schon, keine ausgehenden Kanten koennen uebergangen werden.  Bleiben also Knoten C und E.  Von Knoten C gibt es noch eine ausgehende Kante zu A.", "start": 284.36, "end": 309.2}, {"text": " Wir finden einen neuen Weg und die Weglaenge ist der kuerzeste bisher bekannte Weg, also  9 plus das Kantengewicht 1 also 10.  Ein Weg zu A der Laenge 10 kennen wir allerdings schon, deswegen brauchen wir nichts notiert  zu werden.  Wir gehen weiter zu Knoten E.  Von E kommen wir zu C und die neue Weglaenge ist 5 plus 3 gleich 8.  Und da haben wir tatsaechlich einen neunkuerzesten Weg gefunden.", "start": 309.2, "end": 335.84}, {"text": "  Also C wird von E erreicht, erzielt Weglaenge 8 und das ist im dritten Durchlauf passiert.  Damit ist der dritte Durchlauf auch schon beendet.  Fuer den vierten Durchlauf muessen wir also nur den Knoten C betrachten.  Von Knoten C geht es nur zu Knoten A.  Da finden wir einen neuen Weg der Laenge 8 plus 1 gleich 9.  Es ist tatsaechlich ein kuerzester Weg und wird also notiert.", "start": 335.84, "end": 362.79999999999995}, {"text": "  A wird von C erreicht, erzielt die Weglaenge 9 im vierten Durchlauf.  Damit ist das Verfahren beendet.  Im vierten Relaxierungsdurchlauf wurde nur der Distanzwert zu Knoten A relaxiert, weil  A aber keine ausgehenden Kanten haben, da gibt es hier nichts Neues.  Und koennen wir aus dieser Liste einfach die kuerzesten Wege zu jedem Knoten ablesen.", "start": 362.79999999999995, "end": 387.28000000000003}, {"text": "  Das ist ja immer der letzte Distanzwert und wir koennen auch den Baum der kuerzesten Wege ableiten.  Hier ja dabei immer steht, von welchen Knoten aus dieser kuerzeste Weg erzielt wurde.  Wir gehen also einfach mal von unten nach oben vor und markieren immer die letzte Kante,  die sich aus der Tabelle ergibt.  Knoten E wird von D erreicht, Knoten C wird von E erreicht.", "start": 387.28000000000003, "end": 419.56}, {"text": "  Knoten D wird von S erreicht, Knoten B wird von S erreicht und Knoten A wird von C erreicht.  Und koennen wir auch noch die kuerzesten Weglaenge an die Knoten schreiben.  Fuer S ist es 0, fuer A ist es 9, fuer B ist es 7, D3, E5 und C8.  Aus dieser Handsimulation kann nun abgeleitet werden, wie eine effiziente Implementierung gestaltet werden koennte.", "start": 419.56, "end": 449.79999999999995}, {"text": "  Wir haben gesehen, dass in einem Durchlauf nur von denjenigen Knoten aus, die reallaziert werden muss,  die im vorherigen Durchlauf einen neuen Distanzwert erhalten haben.  Um diesen Aspekt zu implementieren, koennen wir Knoten, die einen neuen Distanzwert erhalten, in eine Warteschlange einfuegen.  Wenn von Ihnen aus relaxiert wird, entnehmen wir sie der Warteschlange.", "start": 449.79999999999995, "end": 472.68}, {"text": "  Das heisst, Sie kommen im naechsten Zug nicht zum Zuge, es sei denn, es wird ein neuer kuerzester Weg zu Ihnen gefunden  und Sie werden dadurch wieder neu in die Warteschlange eingefuegt.  Des Weiteren kam der Fall vor, dass waehrend eines Durchlaufs der Distanzwert zu einem Knoten sich geaendert hat, ein neuer Weg gefunden wurde.", "start": 472.68, "end": 490.64}, {"text": "  In diesem Fall sollte der Knoten natuerlich nicht mehrmals in die Warteschlange gelangen  und zwecklose Relaxierung zu vermeiden.  Da bei einer Warteschlange nicht effizient geprueft werden kann, ob ein Element schon enthalten ist,  sollte hierzu zusaetzlich ein Wulcheserre benutzt werden, das fuer jeden Knoten speichert, ob waehrend der Warteschlange ist.", "start": 490.64, "end": 509.91999999999996}, {"text": "  Der resultierende Algorithmus steht im Algodatschript.  Diese besprochenen Verbesserungen in Richtung Effizienz zahlen sich in der Praxis fast immer aus.  Im Worstcase bleibt allerdings die Laufzeit in derselben Wachstumsordnung wie unsere anfaengliche Formulierung.  Es werden v-1-mal alle E-Kanten relaxiert.", "start": 509.91999999999996, "end": 536.68}, {"text": "  Die Relaxierung hat eine konstante Laufzeit, also ergibt sich insgesamt eine Laufzeit in o von e mal v.  Die Java-Simulation des Bellman-Fott-Algorithmus in einem zufaellig generierten euklideischen Grafen  verlaeuft sehr aehnlich wie bei dem Textalgorithmus.  Die Unterschied wird deutlicher, wenn wir wieder den Sterngrafen wie beim Textalgorithmus verwenden.", "start": 537.68, "end": 604.68}, {"text": "  Hier sieht man, dass die Kanten in der Reihenfolge ihres Kantenabstands vom Startpunkt explodiert werden.  Nach unten ging es daher deutlich schneller, weil sich hier nur wenig Kanten befinden  und nach oben mit dem kleinen Abstand verlaeuft die Suche deutlich langsamer.  Nach unten ist man bis zum Kantenabstand 3 gelangt.", "start": 604.68, "end": 634.68}, {"text": "  Ist man auch oben in dieser Groessenordnung beim Abstand 3, also als euklideischen Abstand deutlich weniger weit entfernt vom Startknoten.", "start": null, "end": 634.68}]}]