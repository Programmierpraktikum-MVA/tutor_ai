[{"lecture": "31624_61_course_video", "Timestamps": [{"text": "  Welcome back. In this video we'll talk about primitive data types. Why do we care  about data types? And a few examples about how to use them.  Programming is about representing the world and to do computation because it's  way faster to compute for a computer than for us. Obviously that's why we use  calculators and computers.", "start": 0.0, "end": 40.32}, {"text": "And to represent the world we need to represent  the data about the world. And these primitive data types are the smallest  building blocks that you can use to represent information. You can imagine  it as the subject of a sentence. We do computation and we change information. We  process information.", "start": 40.32, "end": 69.5}, {"text": "And with these primitive data types you can do a variety  of things already. So let's have a quick look about the data types that are in  the script. The first one is the simplest one. It's boolean so it's a logical  statements value. It's either true or false. The next one is char. It's one  character. It represents one character.", "start": 69.5, "end": 97.38}, {"text": "And then the following four by short end  these represent integers with specific maximum value. And then the last two  float and double represent real numbers with decimal point. And here again we  have a maximum and minimum plus how precisely we can represent the real  number.", "start": 97.38, "end": 130.42000000000002}, {"text": "So in a computer you can't represent a real number with infinite  precision. Why are there so many types for integers for example? You may ask. So  the simple answer to that is that when you write a program for example a  computer game you have to specify how much memory RAM should the computer have  to run that computer game.", "start": 130.42000000000002, "end": 157.42000000000002}, {"text": "And you don't have infinite amount of memory in a PC  so you try to minimize that in a way you can still have a realistic computer  game. So let's have a quick look how to use these primitive types. You've already  seen the IDE video previously. And now we will use the same IDE. And let's see what  we can do with this data type. So the first one was boolean.", "start": 157.42000000000002, "end": 193.74}, {"text": "And again pop up  comes up and let's call it be because it's a boolean. But in general please give  representative names of your variables. So later you can know why that variable  you used for example MI happy. And yes so if it's yes then it's a true. And we can  also print these out. And let's add to the let's create your message.", "start": 193.86, "end": 239.14}, {"text": "And we want to  know if I'm happy so I use this variable name. You see the variable name already says  what I want to do. And that's around this code. And am I happy? True. Yes I am happy.  So let's create a char. Why do we want to have char? Sometimes you want to represent a single  character.", "start": 239.14, "end": 274.78000000000003}, {"text": "I don't have a good example right now but think about it and maybe post on the  forum some great ideas. So let's create char C. And let's add the initial value.  C.  And let's print out my char.  C. And my char is C in D. We can change this and say C is equal with D.  And now if we print that out then my char is C. My char is D.", "start": 280.78000000000003, "end": 341.42}, {"text": "Amazing right? So look at some  interesting fact of the IDE. If I try to add multiple characters then it already shows that I  did something wrong. It's underlined with red. And that's because it's not too many characters  in the character literal. If I try to run it then it even says that uncle's character literal.  If you don't know this error message you can google it.", "start": 341.42, "end": 370.78}, {"text": "  And then you will find out what's the problem. Another nice example I can define with double  condition marks. And again it's there is an error message because this is we require  char type and actually I provided a string type.  String types are...  So string types is a series of characters. This is not in the...", "start": 370.78, "end": 410.7}, {"text": "  not in the script but just to show you I can add a string that has multiple characters in it.  So let's remove this and say I am happy.  And now S is a string that has a series of characters in it.  And let's print out S.  And you can see we stored and printed out the message in this string.", "start": 411.65999999999997, "end": 462.94}, {"text": " So a string represents a series of characters right?  And in the next part of the script we discuss arrays.  But what is an array? So an array is an ordered collection of data of the same type.  Why do we want to use that? Because sometimes for example you want to calculate  because sometimes you want to compute the final grade of a subject.  For example my let's call it int my points.  Points.", "start": 463.5, "end": 510.06}, {"text": "  So and let's define what points I got for each assignment.  Let's say I was really good at the first assignment.  Not so good at the second.  And I had no time for the third one but I really pushed for the fourth one.  So now I have all my points for a specific assignment for a subject and I can even print my points.", "start": 513.5, "end": 558.8599999999999}, {"text": " Oh and what we see here? I try to print my points right?  But actually what I did is print the address of this my points variable.  Because an array is a pointer and it points to the location in the memory  where a series of information is stored. So if I want to see my points then I can add an  indice and print for example the first one. Or I can create for example a for loop.", "start": 559.66, "end": 594.46}, {"text": "  I can add a for loop here. Say I use an int variable now primitive type.  It's great to use primitive types starting from zero.  Why? Because the indices of an array always start from zero.  And it should go until I reach my points left.  I want to print all my points and I will increase incrementally I.  So now I can print out all my points.  And let's hope we can even do something better.", "start": 595.34, "end": 647.58}, {"text": "  We can create a variable and look I will use a double  array. Now average. I give an initial padding.  And I will say that average equals with average plus my points high.  So this is not yet the average right because to have an average we have to divide it by the  number of values that I used to compute this.", "start": 647.82, "end": 697.42}, {"text": "So let's say average equals with average divided by  my points that length. Right and now let us print out average.  And my average is 87 points.  So this was a quick example why it is important to understand primitive data types.  You have to already think ahead if you want to use integer type how  large values you can add you will use which type of integer for example.", "start": 700.54, "end": 737.5}, {"text": "  If I define something to be a byte.  My byte. And I want to give a value that is larger than the maximum  value then already my IDE will complain and say oh I provided something that does not  fit into the byte and I should use int which is very handy. But if you sum up things and the sum  would be greater than the maximum value then you will be in trouble while you execute that code.", "start": 740.62, "end": 780.14}, {"text": "  So you should think ahead what do you want to store and what do you want to compute later on.  So you don't need to have a sum variable where you first sum things up but you can actually  compute with average that will be a double and you thought ahead that you use the double  because you want to divide it and this will become a real number.", "start": 780.14, "end": 811.1}, {"text": "  All right I hope you will have fun playing around with primitive data types and arrays.", "start": null, "end": 811.1}]}]