[{"lecture": "31624_93_course_video", "Timestamps": [{"text": "  Dieses Video stellt das Branch Entbound Verfahren vor.  Es dient dazu, effizient Loesungen fuer Optimierungsprobleme zu finden, also Probleme, bei denen jeder  Loesung ein Wert zugeordnet ist und eine Loesung mit maximalen und einem minimalen Wert gesucht  ist.  Hier betrachten wir Maximierungsprobleme.  Der Grundansatz bei Branch Entbound entspricht Backtracking.", "start": 0.0, "end": 27.16}, {"text": "  Die Effizienz wird dadurch erreicht, dass nicht der gesamte Suchbaum durchlaufen wird.  Knoten, an denen nicht ausigtsreiche Teilloesungen stehen, werden nicht expandiert.  Nun stellt sich die Frage, wie entschieden werden kann, welche Teilloesungen nicht ausigtsreich  sind.  Da Branch Entbound Verfahren immer eine optimale Loesung zurueckgeben, wird ein unfehlbares Kriterium  benoetigt.", "start": 27.16, "end": 45.0}, {"text": "  Das funktioniert so.  Man braucht eine Methode, die zu jeder Teilloesung eine obere Schranke bestimmt.  Diese Schranke besagt, dass alle Loesungen, die aus jener Teilloesung gewonnen werden  koennen, dem Wert durch die Schranke nach oben begrenzt sind.  Die Teilloesung kann sich also nicht besser entwickeln, als durch die obere Schranke angegeben  ist.", "start": 45.0, "end": 71.32}, {"text": "  Wenn diese obere Schranke kleiner ist, hat der Wert einer bereits gefundenen Loesung,  ist die Teilloesung nicht ausigtsreich.  Alle vollstaendigen Loesungen, die aus ihr entstehen koennen, werden einen kleineren  Wert haben und koennen kein neues Maximum ergeben.  Daran sieht man, dass jede gefundene Loesung eine untere Schranke darstellt.", "start": 71.32, "end": 93.08}, {"text": "  Nur Teilloesungen, deren Potenzial, also deren obere Schranke ueber jener unteren Schranke  liegt, brauchen weiterverfolgt zu werden.  Die untere Schranke ist also ein globaler Schwellwert, der mit jeder gefundenen vollstaendigen  Loesung aktualisiert wird.", "start": 93.08, "end": 113.44}, {"text": " Um schon von Anfang an eine untere Schranke fuer die Begrenzung der Sucherhoms zu haben  und nicht erst, nachdem die erste vollstaendige Loesung im Suchbaum gefunden wurde, werden  oft schnelle Verfahrens, z.B. mit einem suboptimalen Kredialgorithmus genutzt, um eine Initialloesung  zu erhalten.", "start": 113.44, "end": 129.64000000000001}, {"text": " Dies und natuerlich auch der gesamte Branch Entbound Ablauf werden nun an einem Beispiel  demonstriert, dem schon bekannten 01 Rucksackpublin.  In unserem kleinen Beispiel gibt es einen Rucksack mit der Gesamtkapazitaet 100 sowie  4 Objekten.  Die Objekte werden hier wieder als Rechlecke dargestellt.  Die Breite ist proportional zu ihrem Gewicht und der Flaecheninhalt ist proportional zu  ihrem Wert.", "start": 129.64000000000001, "end": 153.24}, {"text": "  Somit entspricht die Hoehe ihrem relativen Wert.  Wie bei dem greedy Verfahren fuer das Teilbarere Rucksackproblem sind die Objekte absteigend  nach ihrem relativen Wert sortiert.  Zunaechst wollen wir eine schnelle Initialloesung herstellen, um eine untere Schranke fuer die  Branch Entbound Sucho zu erhalten.", "start": 153.24, "end": 178.56}, {"text": " Dazu nutzen wir den greedy Ansatz fuer das Teilbare Rucksackproblem und stoppen, sobald  das erste Objekt nicht ungeteilt in den Rucksack passt.  So erhalten wir eine valide Loesung fuer den 01 Rucksack.  In diesem Beispiel ist das nach zwei Objekten der Fall.  Wer das folgende Objekt, das Gewicht 50, besitzt, die Restkapazitaet aber nur 30 Einheiten betraegt.", "start": 178.56, "end": 202.48000000000002}, {"text": "  Der Gesamtwert der eingepackten Objekte ist 40 plus 25, also 65.  Dies ist unsere untere Schranke zu Beginn der Branch Entbound Sucho.  Nun benoetigen wir noch ein Verfahren zur Bestimmung einer oberen Schranke fuer jede  Teilloesung.  Dazu nutzen wir das greedy Verfahren fuer das Teilbare Rucksackproblem ausgehend von der  aktuellen Teilloesung.", "start": 202.48000000000002, "end": 228.4}, {"text": "  Dies ergibt zwar keine zulaessige Loesung fuer den zu loesenden 01 Rucksack, aber das  macht nichts.  Wir benoetigen nur eine obere Schranke fuer alle zulaessigen Loesungen des 01 Rucksacks.  Und die bekommen wir so.  Denn wenn es eine bessere 01-Loesung gaebe, so waere dies auch eine bessere Loesung fuer  das Teilbare Rucksackproblem.", "start": 228.4, "end": 247.76}, {"text": "  Die kann aber nicht existieren, da wir die Optimalitaet der greedy Loesung fuer das  Teilbare Rucksackproblem bewiesen haben.  Also schauen wir uns an, wie die obere Schranke fuer die leere Teilloesung bestimmt wird.  Da die Objekte schon geeignet sortiert sind, brauchen wir die Objekte nur der Reihe nach  in den Rucksack zu packen.  Das dritte Objekt passt nicht mehr zur Gaenze.", "start": 247.76, "end": 273.48}, {"text": "  Die Restkapazitaet ist 100 minus 40 minus 30, also 30 Einheiten.  Das Objekt Nummer 3 mit Gewicht 50 passt nur zu dem Anteil 30 50.  30 50 von dem Wert 30 ist 18.  Somit erhalten wir den Gesamtwert 40 plus 25 plus 18, gleich 83, als obere Schranke fuer  die leere Loesung.  Der Planche Entbound Algorithmus kann starten.  Die Suche beginnt bei der leeren Teilloesung.", "start": 273.48, "end": 307.08}, {"text": "  Fuer die leere Teilloesung hatten wir gerade schon die obere Schranke als 83 bestimmt.  Nun verzweigt sich der Baum, und zwar in der ersten Stufe nach der Frage, ob das erste  Objekt eingepackt wird oder nicht.  Wir betrachten den Fall, dass das erste Objekt nicht eingepackt wird und bestimmen die obere  Schranke.  Die greedy Loesung fuer das Teilbare Rucksackproblem ergibt folgendes.", "start": 307.08, "end": 328.24}, {"text": "  Nach Vorgabe wird das erste Objekt nicht eingepackt.  Dann wird das zweite und das dritte Objekt eingepackt und es verbleibt die Restkapazitaet  von 20 fuer das vierte Objekt.  Das vierte Objekt besitzt das Gewicht 25, also passt es zu dem Anteil 20 25.  Noch in den Rucksack.  Dies ergibt den Wert von 8 und somit haben wir insgesamt einen Wert von 63, was nun die  obere Schranke ist.", "start": 328.24, "end": 358.44}, {"text": "  Das heisst, alle Loesungen, die sich aus dieser Teilloesung entwickeln koennen, das heisst,  die das erste Objekt nicht eingepackt, koennen maximal den Wert 63 erreichen.  Aber die untere Schranke, die wir durch die Initialloesung erhalten haben, ist 65.  Das heisst, wir brauchen diesen Ass nicht weiter zu beruecksichtigen.  Dieser Fall zeigt auch die Staerke der Initialloesung.", "start": 358.44, "end": 386.96}, {"text": "  Ohne die Initialloesung haetten wir mit der unteren Schranke 0 begonnen und dieser  Ass haette weiter untersucht werden muessen.  Betrachten wir also den zweiten Fall.  Das erste Objekt wird eingepackt.  In diesem Fall aendert sich nichts an der oberen Schranke gegenueber der leeren Teilloesung.  Wir erhalten also die 83.  Nun fahren wir mit der zweiten Entscheidung fort.", "start": 386.96, "end": 408.76}, {"text": "  Wir unterscheiden danach, ob das zweite Objekt eingepackt wird oder nicht.  In dem Fall, dass es nicht eingepackt wird und bestimmen die obere Schranke.  Die Vorgabe ist also, das erste Objekt wird eingepackt, das zweite nicht.  Mit der greedy Loesung fuer das teilbare Rucksackproblem packen wir das dritte Objekt ein und das  vierte zu dem Anteil, zu dem es passt.", "start": 409.68, "end": 431.2}, {"text": "  In diesem Fall erhalten wir den Gesamtwert 74.  74 liegt ueberhalb der unteren Grenze.  Das heisst, wir suchen hier weiter.  Als naechstes schauen wir den Fall an, dass das dritte Objekt nicht eingepackt wird.  Wir haben also das erste wird eingepackt, das zweite nicht und das dritte nicht.  Es kann nur noch das vierte Objekt eingepackt werden.  Wir halten den Wert 50.", "start": 431.2, "end": 457.64}, {"text": "  Dieser Wert liegt unterhalb der unteren Schranke.  Daher hoert auch hier die Suche auf.  Wir machen weiter mit dem zweiten Fall, dass das dritte Objekt eingepackt wird.  In diesem Fall passt von dem vierten Objekt, der Anteil 1025 und gibt uns einen Gesamtwert  von 74.  74 liegt ueber der unteren Spaelle.  Das heisst, wir setzen die Suche hier fort.", "start": 457.64, "end": 487.92}, {"text": "  Wir betrachten den Fall, dass das vierte Objekt nicht eingepackt wird und gelangen  so zu einer vollstaendigen Loesung.  Das erste Objekt wird eingepackt, das zweite nicht, das dritte wird eingepackt, das vierte nicht.  Diese Loesung hat den Wert 70.  Dies erhoeht nun die untere Schranke von 65 auf 70.  Die Suche geht weiter.", "start": 487.92, "end": 524.08}, {"text": " Der zweite Fall an dieser Stelle, dass das vierte Objekt eingepackt wird,  ist nach den Vorgaben nicht moeglich, weil das vierte Objekt nicht mehr in die Kapazitaet  einpasst.  Wir machen also in diesem Knoten weiter und betrachten den Fall, dass das zweite Objekt  eingepackt wird.  Wir schaetzen die obere Schranke ab.  Sie ist wieder 83.", "start": 524.08, "end": 545.8000000000001}, {"text": "  Also geht die Suche weiter und wir unterscheiden danach, ob das dritte Objekt eingepackt wird  oder nicht.  Wenn es nicht eingepackt wird, ist die obere Schranke 75.  Diese obere Schranke liegt ueber der unteren Schranke, daher suchen wir an dieser Stelle weiter.  Wenn das vierte Objekt nicht eingepackt wird, erhalten wir eine vollstaendige Loesung mit  dem Wert 65.", "start": 545.8000000000001, "end": 570.52}, {"text": "  Dies ist niedriger als die untere Schranke, sie ist also uninteressant.  Wenn das vierte Objekt eingepackt wird, erhalten wir eine neue vollstaendige Loesung, die den  Wert 75 hat.  75 ist ein hoeherer Wert als die beste Loesung, die wir bisher gefunden haben.  Daher wird die untere Schranke nun auf 75 erhoeht.  Schauen wir, ob wir eine noch bessere Loesung finden.", "start": 571.12, "end": 599.16}, {"text": "  Gehen zurueck zu diesem Knoten und untersuchen den Fall, dass das dritte Objekt eingepackt  wird.  Es passt aber nicht in die Rucksackkapazitaet, es gibt also keine valide Loesung.  Damit ist die Suche beendet und die optimale Loesung ist diejenige, die als letztes die  untere Schranke erhoeht hat.", "start": 599.16, "end": 622.4}, {"text": " Als Resuemee erhalten wir die folgenden Fragen bezueglich der Grundelemente des Branch Entbound,  die fuer die Implementierung geklaert werden muessen.  Erstens, welche Entscheidung macht das Branching, also die Verzweigerung des Suchbaums.  In unserem Beispiel war dies Objekt X wird eingepackt oder nicht.", "start": 622.4, "end": 639.32}, {"text": " Zweitens, in welcher Reihenfolge werden die Entscheidungen getroffen?  Beim vollstaendigen Backtracking spielte die Reihenfolge gar keine Rolle.  Bei Branch Entbound ist es allerdings von Vorteil bereits, am Anfang gute Loesungen  zu finden, um damit die obere Schranke moeglichst frueh in die Hohle zu treiben und so eine effizientere  Beschneidung des Suchbaums zu halten.", "start": 639.32, "end": 656.9200000000001}, {"text": "  In unserem Beispiel wurde dies durch die Sortierung der Objekte nach Absteigenden im  relativen Wertbereich.  Drittens, wie wird die Schranke fuer eine Teilloesung bestimmt?  Oft geschieht dies dadurch, dass man gewisse Einschraenkungen des Problems ignoriert.  So erhaelt man zwar nicht unbedingt eine zulaessige Loesung fuer das Problem, aber eine obere  Schranke.", "start": 656.9200000000001, "end": 680.6}, {"text": "  Eine Loesung unter Betrachtung der Einschraenkungen kann nicht besser sein als die beste Loesung,  die unter Missachtung der Einschraenkungen erreicht werden kann.  In unserem Beispiel haben wir die Einschraenkungen der Unteilbarkeit der Objekte missachtet  und die Grady-Loesung fuer das Teilbare Rucksack-Problem als obere Schranke genommen.", "start": 680.6, "end": 699.0400000000001}, {"text": " Viertens, wie erhaelt man eine Initialloesung?  Hier kommen oft suboptimale Grady-Verfahren zum Einsatz.  Zur Entwicklung eines Branch Entbound-Ansatzes fuer ein neues Problem soll zunaechst diese  Fragen geklaert werden, dann ist die Implementierung meist recht einfach.  Eine Branch Entbound-Implementierung fuer das 0.1-Rucksack-Problem finden Sie in dem  Skript.", "start": 699.0400000000001, "end": 713.26}]}]