[{"lecture": "31624_69_course_video", "Timestamps": [{"text": "  Eine HESH-Tabelle ist eine Datenstruktur zum schnellen Speichern und Abrufen von Informationen.  Zur Motivation betrachten wir ein einfaches Beispiel.  Gesucht ist ein Programm, das zu einer gegebenen Textdatei eine Statistik erstellt, wie haeufig jedes Zeichen vorkommt.  Nehmen wir an, dass die Zeichen in UTF-8 kodiert sind, also durch eine Zahl zwischen 0 und 255 dargestellt werden.", "start": 0.0, "end": 35.0}, {"text": "  Dann koennen wir zur Speicherung der Haeufigkeit einen Array der Laenge 256 anlegen und mit 0 initialisieren.  Dann gehen wir den Text Zeichen fuer Zeichen durch und erhoehen jeweils den Eintrag in dem Array,  wobei wir den UTF-8-Kod des Zeichens als Index benutzen.  So benoetigt das Speichern der Haeufigkeit und auch das Abrufen eine konstante Laufzeit.", "start": 35.0, "end": 59.0}, {"text": "  Nun betrachten wir die schwierigeren Aufgaben, die Haeufigkeiten der vorkommenden Woerter festzustellen.  Dabei kann der vorige Ansatz nicht benutzt werden.  Man koennte zwar die Stringdarstellung eines Wortes als Zahl interpretieren,  aber diese Zahlen sind viel zu gross, um sie als Indizierung in einem Array zu benutzen.", "start": 59.0, "end": 81.0}, {"text": " Man braeuchte ein riesiges Array und die meisten Elemente eben ungenutzt,  da diese Indizis keinen Woertern entsprechen.  Wir benoetigen fuer diese Aufgabe also einen anderen Ansatz.  Man koennte die vorkommenden Woerter und ihre Haeufigkeiten in einer verketeten Liste spalten.", "start": 81.0, "end": 102.0}, {"text": " Wenn ein neues Wort eingelesen wird, wird zunaechst die Liste nach dem Wort durchsucht  und falls es noch nicht enthalten wird, wird ein neuer Eintrag angelegt.  Dann wird der Zaehler fuer die Haeufigkeiten in dem entsprechenden Listeneintrag hochgezaehlt.  Das funktioniert.", "start": 103.0, "end": 119.0}, {"text": " Allerdings wird die Laufzeit zum Speichern und Abrufen der Information immer langsamer,  je mehr unterschiedliche Woerter in der Liste gespeichert wurden.  Die Laufzeit fuer die Operation ist linear in der Laenge der Liste.  Mit einem balancierten Suchbaum anstelleverketteter Listen koennte die Laufzeit auf logarithmisches Wachstum reduziert werden.", "start": 119.0, "end": 136.0}, {"text": "  Ein effizienterer Ansatz fuer dieses Problem sind HESH-Tabellen.  In unserem Beispiel sollten Informationen zu Zeichenketten gespeichert und abgerufen werden.  Die Rolle der Zeichenketten nennt man in der Informatik Schluessel.  Die zu speichernen Informationen nennt man Wert.  In unserem Beispiel die Haeufigkeiten.  Es geht also um die Aufgabe Schluesselwertpaare zu speichern bzw.", "start": 137.0, "end": 165.0}, {"text": "einzufuegen,  den Wert zu einem gegebenen Schluessel abrufen bzw. suchen zu koennen.  Als weitere Funktionalitaet wird meist auch das Loeschen eines Eintrages bei gegebenen Schluessel benoetigt.  Allgemein nennt man Datenstrukturen, die diese Methoden bieten, Symbol-Tabellen oder Woerterbuehler.", "start": 165.0, "end": 188.0}, {"text": "  Diese Datenstrukturen sind von fundamentaler Wichtigkeit und die bestmoegliche Laufzeit ihrer Methoden ist entscheidend.  HESH-Tabellen erreichen in den meisten Faellen eine konstante Laufzeit und sind daher bei groesseren Datenmengen eine besonders effiziente Loesung.  HESH-Hing funktioniert fuer beliebige Objekte als Schluessel, zum Beispiel auch fuer die Teilloesungen einer komplexen Aufgabe.", "start": 188.0, "end": 211.0}, {"text": "  Daher kann Heshing auch gut im Rahmen der Konzepte, die am Anfang des Kurses besprochen wurden, eingesetzt werden.  Bei der Loesungssuche mit Verfahren wie Backtracking, Brunch and Bound und Arsternen ist das Problem,  dass bei ueberlappenden Teilproblemen vielfach redundante Loesungsschritte untersucht werden.", "start": 211.0, "end": 232.0}, {"text": "  Beim Spiel ist das zum Beispiel der Fall, wenn man durch unterschiedliche Zugkombinationen zu derselben Spielstellung gelangt.  Im Suchbaum werden diese Stellung an unterschiedlichen Stellen repraesentiert, daher gemaess der Zugfolge aufgebaut ist.  Daher wuerden diese gleichen Spielstellungen unnoetigerweise an jeder Stelle von neuem ausgelert.", "start": 232.0, "end": 257.0}, {"text": "  HESH-Tabellen mit Spielstellungen als Schluessel erlauben eine effiziente Ueberpruefung, ob eine Teilloesung schon vorher gefunden wurde.  Auf diese Weise koennen redundante Teile des Suchbaums abgeschnitten werden und die Suche bei ueberlappenden Teilproblemen wird erheblich beschleunigt.  Dieses neue Beispiel fuer den immensen Effizienzgewinn durch HESH-Tabellen.", "start": 257.0, "end": 276.0}, {"text": "  Das Grundprinzip von HESH-Tabellen wird in einem weiteren Video erlaeutet.", "start": null, "end": 276.0}]}]