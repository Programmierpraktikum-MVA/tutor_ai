[{"lecture": "31624_70_course_video", "Timestamps": [{"text": "  Die Herausforderung bei Hash-Tabellen ist es, auf Informationen ueber ein Schluessel moeglichst  direkt zu geworfen zu koennen. Die Schluessel koennen komplexe Objekte sein. Um ueber den  Schluessel direkt auf eine Tabelle bzw. ein Area zu geworfen zu koennen, muss der Schluessel  in einen Index umgewandelt werden. Sehen wir uns die Situation an.", "start": 0.0, "end": 29.98}, {"text": "Es gibt ein sehr grosses  Universum an moeglichen Objekten bzw. Schluesseln. Bei einer Anwendung kommt nur eine Verkaufung  und vergleicht zwar kleine Menge Anschluesse tatsaechlich vor. Diese Schluessel sollen in  einer Tabelle gespeichert werden.", "start": 29.98, "end": 49.3}, {"text": "Dafuer benoetigen wir eine Funktion, eine sogenannte Hash-Funktion,  die einen Schluessel in einen Index umwandelt. So koennen wir Informationen zu jedem Schluessel  in der Tabelle ablegen. Der Schluessel K0 wird also unter der Adresse der Hash-Adresse H von  K0 gespeichert, ebenso der Schluessel K1, K2, K3.", "start": 49.3, "end": 72.74}, {"text": "Allerdings soll die Tabelle viel kleiner  sein als das Universum aller moeglichen Schluessel und wir wissen im Voraus nicht,  welche der Schluessel tatsaechlich zur Anwendung kommen werden. Daher kann die Funktion nicht  injektiv sein.", "start": 72.74, "end": 94.17999999999999}, {"text": "Es kommt also vor, dass unterschiedliche Schluessel auf die selber Hash-Adresse abgebildet  werden. Das nennt man eine Kollision. Beim Hashing gibt es verschiedene Verfahren zur  Aufloesung von Kollisionen.", "start": 94.17999999999999, "end": 113.14}, {"text": "Entweder werden unter einer Hash-Adresse eben mehrere Schluessel gespeichert,  zum Beispiel in verketterten Listen oder es wird nach einem speziellen Verfahren ein anderer  Platz in der Hash-Tabelle gesucht. Dieses Verfahren zur Suche eines freien Platzes innerhalb der  Hash-Tabelle nennt man Sondierung. Diese Verfahren zur Kollisionsaufloesung werden in weiteren Videos behandelt.", "start": 113.14, "end": 126.42}, {"text": "  Fuer den weiteren Verlauf dieses Videos nehmen wir an, dass ein akzeptables Verfahren zur  Kollisionsaufloesung existiert und widmen uns der Frage, wie geeignete Hash-Funktionen aussehen.  Allerdings sollte man im Hinterkopf behalten, dass Kollisionen moeglichst vermieden werden  sollten, da sie sich unbuenstig auf die Effizienz auswirken.", "start": 126.42, "end": 151.3}, {"text": "Im Folgenden gehen wir davon aus,  dass die Schluessel natuerliche Zahlen sind. Fuer andere Objekte gibt es im Jahr war,  den Mechanismus der Hash-Codes, die zu jedem Objekt eine integer Zahl zurueckgeben. Fuer  eigene Klassen muss man die Methode Hash-Codes selbst implementieren. Genau was dazu ist im  Alkoholskript erlaeutert.", "start": 151.3, "end": 179.38}, {"text": "Wir haben also nun die Aufgabe mit einer Hash-Funktion,  einen grossen Zahlenbereich auf einen kleinen Zahlenbereich abzubilden. U ist die Groesse  des Anniversums und viel groesser als die Groesse m der Hash-Tabelle. Die Hash-Funktion soll also  die Schluessel moeglichst gleichmaessig auf die Hash-Adressen von 0 bis m-1 verteilen.", "start": 179.38, "end": 203.26}, {"text": "Dies kann  man durch eine Skalierung erreichen. Man multipliziert den Schluessel mit dem entsprechenden  Skalierungsfaktor und rundet. Dabei werden allerdings Schluessel, die in einem benachbarten  Bereich liegen, auf denselben Index, also dieselbe Hash-Adresse abgebildet.", "start": 203.26, "end": 229.9}, {"text": "Dies moechte man vermeiden,  da in Anwendungen oft nahe beieinander liegende Schluessel vorkommen und Kollisionen schlecht  fuer die Effizienzen sind. Solche Ansammlungen von nahe beieinander liegenden Schluesseln nennt man  Haeufungen. Es gibt also die Anforderungen, Haeufungen in der Verteilung der Schluessel aufzuloesen.", "start": 229.9, "end": 247.18}, {"text": "  Dies leistet zum Beispiel die multiplikative Methode. Man multipliziert den Schluessel mit einer  irrationalen Zahl und betrachtet nur die Nachkommersstellen. Dies ist eine Zahl zwischen 0 und 1  und kann durch Multiplikation mit der Tabellengroesse und anschliessend im Runden auf eine Hash-Adresse  abgebildet werden. Durch dieses Verfahren erhaelt man eine gute Durchmischung der Schluessel.", "start": 247.18, "end": 275.46000000000004}, {"text": "  Der nachbarte Schluessel werden auf ganz weit verstreute Hash-Adressen abgebildet. Besonders das  Verhaeltnis des goldenen Schnittes soll zu einer Hash-Funktion mit sehr gleichmaessiger  Verteilung der Hash-Adressen fuehren. In der Praxis wird allerdings haeufiger die Divisions-Restmethode  verwendet.", "start": 275.46, "end": 304.82}, {"text": "Dabei nimmt man von dem Schluessel den Rest der Batterdivision durch M-Blatt der Groesse  der Hash-Tabelle. Wie gut diese Verteilung ist, haengt allerdings auch von M ab. Ist M eine  Zweierpotenz, so entspricht die Hash-Funktion der Beschraenkungen auf niederwaertige Bits. Dies  kann zur unguenstigen Verteilung der Hash-Adressen fuehren.", "start": 304.82, "end": 323.02}, {"text": "Diese Diagramme zeigen die Haeufigkeiten  der Hash-Adressen fuer alle Woerter des Buches Kritik der reinen Vernunft. Bei der Hash-Tabelle der  Groesse 63 wird der ganze Adressbereich ziemlich gleichmaessig belegt.", "start": 323.02, "end": 342.98}, {"text": "Bei der Groesse 64 hingegen  ist die Verteilung sehr ungleichmaessig und die starken Haeufungen bei manchen Adressen und die  dadurch verursachten Kollisionen wuerden die Effizienz der Hash-Tabelle starker absetzen. Daher ist  die Empfehlung, M nicht als Zweierpotenzen zu waehlen. Primzahl sind eine sehr gute Wahl.  Datal ist zu der Simulation, finden Sie in dem Algorithz-Kript.", "start": 342.98, "end": 363.3}, {"text": "Zusammenfassend laesst sich  die Hatch-Funktionen also sagen. Hash-Funktionen bilden Schluessel, die wir hier als natuerliche  Zahlen angenommen haben, auf Hash-Adressen ab. Also eine Zahl zwischen 0 und N-1, wenn  die Groesse der Hash-Tabelle ist.", "start": 363.3, "end": 390.22}, {"text": "Die gewuenschten Eigenschaften sind, Hash-Funktionen sollen schnell  zu ueberrechnen sein und sie verteilen die Schluessel moeglichst gleichmaessig auf alle  Hash-Adressen, auch wenn bei den Schluesseln Haeufungen vorkommen. Bei der Divisions-Rest-Methode  soll die Tabellen groesser M als Primzahl gewaehlt werden.", "start": 390.22, "end": 402.5}, {"text": "Mit einer guten Hash-Funktion ist die  Basis fuer effiziente Saching gelegt. Ein weiteres wesentliches Element ist die Kollisionsaufloesung.  Die beiden Standardverfahren, Kollisionsaufloesung durch Verkettung und Kollisionsaufloesung durch  Sendierung in separaten Videos besprochen.", "start": 402.5, "end": 410.58000000000004}]}]