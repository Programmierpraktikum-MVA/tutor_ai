[{"lecture": "31624_95_course_video", "Timestamps": [{"text": "  Diese Woche behandeln wir zwei algorithmische Grundkonzepte, die unterschiedlicher nicht sein koennten.  Backtracking und greedy Algorithmen.  Beim Backtracking geht es darum, den Suchraum fuer ein Problem erschoepfend abzusuchen.  Jede Moeglichkeit wird der Reihe nach in Betracht gezogen.", "start": 0.0, "end": 29.1}, {"text": " Beim greedy Algorithmus hingegen wird bei der Auswahl immer nur eine Moeglichkeit in Betracht gezogen  und diese Entscheidung wird nie reviliert.  Beim Backtracking erhaelt man eine exponentiell wachsende Struktur,  da sich der Suchbaum an jeder Stelle in alle Moeglichkeiten aufsplittet und man so einen stark verzweiften Suchbaum erhaelt.", "start": 30.1, "end": 51.1}, {"text": "  Beim greedy Verfahren hingegen erhaelt man eine lineare Struktur, da an jeder Stelle immer nur eine Moeglichkeit ausgewaehlt wird.  Beide Verfahren sind sehr wichtige Grundkonzepte.  Sie kommen in der Praxis sowohl in ihrer Reinform als auch abgewandelt bzw. als Teil von komplexeren Verfahren vor.", "start": 51.1, "end": 72.1}, {"text": "  Beim Abwaegen, ob einer dieser Ansaetze fuer ein konkretes Problem geeignet ist, sind die folgenden Aspekte wichtig.  Backtracking findet immer die gesuchte Loesung, wenn sie denn existiert.  Ist allerdings sehr zeitaufwendig.  Daher verwendet man Backtracking nur in solchen Faellen, wenn kein effizienter Weg bekannt ist bzw. es keinen effizienteren Weg geben kann.", "start": 72.1, "end": 97.1}, {"text": "  Letztes ist insbesondere der Fall, wenn es exponentiell viele Loesungen gibt und alle diese Loesungen generiert werden sollen,  zum Beispiel bei der Erzeugung aller moeglichen Permutationen einer gegebenen Folge.  greedy Verfahren sind bei der Suche aeusserst effizient und werden daher gerne genommen.", "start": 97.1, "end": 115.1}, {"text": "  Allerdings gibt es nur fuer wenige Probleme ein greedy Algorithmus, zumindest an solchen, der garantiert eine optimale Loesung findet.  Die Erklaerung der beiden Verfahren und einige Beispiele finden Sie in dem Algorithm.", "start": 115.1, "end": 120.1}]}]