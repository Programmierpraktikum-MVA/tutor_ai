[{"lecture": "31624_68_course_video", "Timestamps": [{"text": "  Hi, this will be a short video about installing the IDE to programming Java.  And I will show you a small example how to run your code in this IDE.  So what is an IDE and why should you use that, you may ask.  An IDE is an integrated development environment.  And it was created for programmers to be more efficient in their work.", "start": 0.0, "end": 39.4}, {"text": "  In the past, if you wanted to write a program, you use either the terminal and write there  your code into a text file.  Then later, text editors were created where you first entered your code, then you compiled,  built and executed your code in the terminal.  If something went wrong, you had to debug your code in the terminal.  This required a lot of work.", "start": 39.4, "end": 67.44}, {"text": "  Now an integrated development environment offers a lot of features to develop your code in  the same place, execute your code, test it and debug it.  In this video, I will show you a few of these features and how it enables you to program  efficiently and with ease.  Let's start first downloading the IDE.  Intel iJ download.  We want formal.", "start": 67.44, "end": 103.32000000000001}, {"text": "  We are on Windows, so we are going to download the Windows version.  The executable and for community.  Let's see how are we going to install it.  We can go back one step where we download it and there is installation instructions.  It says that we just need to run the executable file and then follow the steps in the wizard.  So we downloaded the executable.  Now we click on it.", "start": 103.32000000000001, "end": 146.79999999999998}, {"text": "  There is a pop-up window asking that we want to install this.  Yes.  Then next we select the location where to be installed.  We want a launcher to be created on the desktop.  Then just click and wait.  It's finished.  Let's start the IDE.  Let's have a quick look.  So, config or installation directory?  No.  We do not import settings.  We don't have any settings yet.  Let's create a new project.", "start": 146.79999999999998, "end": 227.72}, {"text": "  This will be Java project.  We also download the Oracle OpenJD key.  Next.  Let's try a common line up.  Hello world.  So let's have a look at the interface.", "start": 227.72, "end": 287.48}, {"text": " As you can see at the top we have a menu bar where you can access different features  like normally in the file saving things, editing, changing the view, navigation, code, about  the code, some properties that you can change, analyzing things.  You should explore these menu options to find out great tools to improve your programming  skills.", "start": 287.48, "end": 302.04}, {"text": "  Then below there is our project and where we are right now in this project.  So the project is Hello World.  We are now in the source company that we said that to be com company that you can change.  For example, to be Algodot and we are looking at the main Java file.  On the other end we have other buttons.  There is building project to build the project.  Let's build it right now.", "start": 302.04, "end": 335.47999999999996}, {"text": "  And the build completed successfully.  It has in this lower part the time to build it.  So now it's executable and if we make a mistake, then for example let's remove this column  and we build it.  Then there will be an error.  Now a few other windows popped up to help you explore where this error happened.  Here in the build output we can see that we have an error in the main.java file.", "start": 335.47999999999996, "end": 376.47999999999996}, {"text": "  What is the error?  And also we have in the terminal like output of the error, a description.  If we click on one of these, that should bring our cursor right in the file where the error  occurred.  This is now also shown here with the red underline that here is something wrong.  Also the file name is underlined with red.  So now if we put back the semicolon and build it, everything went fine.", "start": 376.47999999999996, "end": 420.08}, {"text": "  And these windows actually you can hide and to have more space to look at your code.  And your code is as you can see here in the bigger section.  There is this dividing line, this is a virtual line.  Practically programmers agreed that the length of a line of a code for readability should  be a certain size and this line shows you how long your code, line of code should be.", "start": 421.08, "end": 449.96}, {"text": "  You can always break a line in your code and you will see that that makes it way more  readable.  Here you can also see that there are some key words are colored differently than other  things and this will also help you to interpret and read faster your code.  You will learn more about these in the future.  Well actually during this course you will learn most of it.", "start": 450.0, "end": 484.32}, {"text": "  And on the left you see the structure of your, you see the structure, the folder structure  of your code.  Here there is some folder ideas.  Please Google it what does it mean.  This is a hidden folder and I guess there are some configuration files for your project  that you can play around.", "start": 484.32, "end": 516.12}, {"text": " Here is the source folder where your sources are and there is an out folder which I guess  is the compiled but let's look it up.  Java out folder.  What is the function of the out folder and the idea folder?  So yes you can see this is a simple thing to look it up.  Feel free to explore and if you have questions just Google it.", "start": 516.12, "end": 548.32}, {"text": "  Read the official documentation here, idea, read it there and then it says in short, so  stack overflow it's a good source of information, this answer was accepted and it says in short  all the project files goes to idea folder and it will be recreated if you delete the  project.  Great.", "start": 548.32, "end": 572.88}, {"text": " So here is a configuration file specific for your project and the out folder contains the  output of your project when you build and compile it, it contains the class files.  So as I imagined the out is the output after building and compiling your code.  You can read more about these on the specific pages that were linked over there.  Alright, let's play around a bit more with the IDE.", "start": 572.88, "end": 607.68}, {"text": "  There are different ways to visualize here, like you can look at structure and favorites  and adding breakpoints that you will learn how to use debugging, you can look at to do  items, you can look at problems that occur during building or execution, you can access  a terminal where you can input things and things will be outputted and you can look  at the build as I already showed you.", "start": 608.68, "end": 638.32}, {"text": "  All these as I said you can minimize and then you can bring it up by clicking on one of  these.  Personally I don't enjoy looking at so dark backgrounds and you can change a lot of things  in your IDE.  So let's look at how to make it not in dark mode but in light mode.  So this is the Intel J IDE change dark mode.  Switch between schemes.", "start": 638.32, "end": 681.08}, {"text": "  There is a short description here by press control plus and this symbol you can choose  view quick switch scheme from the main menu.  So there are these steps so let's look at the view menu and it was quick.  What was it?  Quick switch scheme.  Appearance maybe?  No.  Let's look if we find quick switch scheme.  Quick switch scheme.  Code style scheme.  View mode.  Okay let's read it forward.", "start": 681.08, "end": 738.48}, {"text": "  It says quick switch scheme in your damn color scheme and color style.  Alright so just read it through.  Don't just jump back and forth.  First read through what you should do and then obviously.  So because this was not working it looks like we need other color schemes.  Let's do that.  Okay let's go to appearance and behavior.  Boy settings.  Appearance and behavior final.  Settings.", "start": 738.48, "end": 802.4}, {"text": "  Appearance.  Theme and the light theme.  Way better.  Way better.  Alright.  So now as you can see the colors of keywords are also changed and it is sleeker this way.  Alright so we are still a way to write our first example code which is outputting to  the terminal a welcoming message.  So if you don't know how to output something then again a simple idea is Java output terminal  hello world.", "start": 802.4, "end": 887.32}, {"text": "  And let's look at the first one.  So there are usually long descriptions but in the gray area there will be a code and  I can already see that there is this line here that is missing from ours and it starts  with system out print line.  Oh wow there is this pop up you see.", "start": 887.32, "end": 923.4}, {"text": " I started writing system and it already tries to figure out what is the thing that I want  to write so now I can just press enter and it fills it out for me and then again with  the dot it knows that I am looking for something specific within system and it shows out I  guess that is the most common thing to use so it shows the thing that is more important  than them.", "start": 923.4, "end": 941.9599999999999}, {"text": "  Again it knows that if I want out then I want some type of printing to the terminal like  print line so it offers directly that.  And now another pop up that actually shows what types of parameters I can enter here.  Now we want just a simple text and that way write it here hello world.", "start": 941.9599999999999, "end": 981.72}, {"text": " Alright we have it and it was super simple because everything was offered by the IDE  even if you don't know exactly the command or the keyword that you are looking for it  will help you to figure it out and find it.", "start": 981.72, "end": 1009.88}, {"text": " So now if you want to run we go back to this part of the IDE and so here we can do saving  or edit configurations we will skip that now this is running the code or pressing shift  10 and if we run that in the terminal you can see that we printed hello world.", "start": 1009.88, "end": 1021.64}, {"text": " The next button next to it is debug mode and you will learn more about this so directly  in this IDE you can run step by step your code and see what happens.  And run main with coverage I don't know what does it mean but feel free to look it up and  please look at all these other items that you have over there.  Another interesting feature is let's see if I can find it, split the view.", "start": 1021.64, "end": 1051.4}, {"text": "  I thought that we can, here it is.  So by right clicking on this document we can split to the right or split down.  So actually we can visualize not just one but multiple files that we create and we can  look at at the same time to multiple things.  You can resize windows, you can even hide them, bring them back.", "start": 1051.4, "end": 1086.76}, {"text": "  So now you can continuously look at two different codes not just main now this example we have  only one file but imagine looking at two different files and then you can analyze or learn what  you implemented in one file and reuse that in the other file or you can look at what  you have in one file and how you need to implement something to collaborate with the other on  the other side.", "start": 1086.76, "end": 1110.96}, {"text": "  So all these are really cool and nice features.  You can add a lot of add-ons to improve coding and visualization of different styles of code  or different types of files like if you want to look at XML files or CSV files, feel free  to explore.  So great, we are done.  This was a short video about IDE.  Feel free to explore and now you can start coding simpler and easier.", "start": 1110.96, "end": 1142.9199999999998}]}]