[{"lecture": "31624_50_course_video", "Timestamps": [{"text": "  In der zweiten Aufgabe geht es um objektorientierte Programmierung.  Dafuer stellen wir uns erst einmal gegenueber, was die objektorientierte und prozeduale Programmierung  im Wesentlichen unterscheidet und gehen dann im Laufe des Videos auf die Konzepte ein,  die durch Objekte erst moeglich werden.", "start": 0.0, "end": 32.6}, {"text": " Wie der Name schon sagt, ist der groesste Unterschied die Funktionseinheit, die Unterteilung  der Programme in Objekte und nicht in Funktionen oder Prozeduren.  Waehrend in der prozedualen Programmierung Daten und Funktionen voneinander getrennt sind,  sind sie in der objektorientierten Programmierung in Objekten zusammengefasst.", "start": 32.6, "end": 48.8}, {"text": "  Das heisst, in der prozedualen Programmierung arbeiten Funktionen auf frei verfuegbaren Daten,  die sie zum Beispiel als Parameter bekommen haben.  Diese Daten aendern sie gegebenenfalls oder verarbeiten sie in irgendeiner Art und Weise,  um am Ende eventuell ein Rueckgabewert zurueckzugeben.", "start": 48.8, "end": 70.6}, {"text": " In der objektorientierten Programmierung sind Daten oder Attribute und Funktionen  oder Methoden von vornherein in einer Klasse oder einem Objekt zusammengefasst.  Sie gehoeren also zu einer Funktionseinheit und die Methoden eines Objektes arbeiten,  zum Beispiel auf den Daten dieses Objektes.  Wie genau das funktioniert, schauen wir uns gleich in mehreren Beispielen an.", "start": 70.6, "end": 88.08}, {"text": "  Diese Strukturierung in Objekte ermoeglicht nur verschiedene Konzepte,  die in der objektorientierten Programmierung eine grosse Rolle spielen.  Zum Beispiel die Vererbung oder die Generalisierung, dadurch dann auch die Polymorphie oder den Polymorphismus  und durch die Zugriffsmodifizierer wie Private oder Public ist auch Datenkapselung moeglich.", "start": 88.08, "end": 111.8}, {"text": "  Wir koennen also gezielt steuern, auf welche Attribute oder Methoden zugegriffen werden kann,  was in der Prozeduralen Programmierung so nicht moeglich ist.  Wie gesagt, wir schauen uns die unterschiedlichen Konzepte der objektorientierten Programmierung  im Verlauf dieses Videos noch einmal genauer an.  Zunaechst aber werden wir definieren, was Objekte und Klassen ueberhaupt sind.", "start": 111.8, "end": 133.92}, {"text": "  Ganz einfach gesagt ist eine Klasse der Bauplan fuer ein Objekt.  Umgekehrt ist dann ein Objekt ein Instanz, ein Beispiel ein bestimmtes Exemplar dieser Klasse.  Wir haben also eine Klasse, die in unserem Code implementiert ist.", "start": 133.92, "end": 159.48}, {"text": " Die Klasse an sich kann jetzt erstmal nichts tun, denn sie ist ja nur ein Typ, ein Objekttyp, ein Bauplan  mit bestimmten allgemeinen generischen Eigenschaften fuer alle Objekte, die aus sie abgeleitet werden.  Wir sagen, wir haben zum Beispiel eine Klasse, ein Objekttypflasche.  Das ist eine generische Flasche, die eine Form hat, zum Beispiel rund oder eckig.", "start": 159.48, "end": 177.68}, {"text": "  Eine Hoehe, sie kann geoeffnet oder geschlossen sein.  Sie hat allgemeine Eigenschaften, die Attribute.  Ausserdem sind auf ihr Verhaltensweisen definiert.  Diese Methoden koennen aber nicht in der Klasse ausgefuehrt werden.  Es sind Methoden, die dann auf den Objekten ausgefuehrt werden, aber in der Klasse definiert sind.  Zum Beispiel, man kann prinzipiell theoretisch eine Flasche auf und zu machen.", "start": 177.68, "end": 213.35999999999999}, {"text": "  Um diese Methode dann aber auszufuehren, brauchen wir spezifische Objekte, eine spezifische Flasche, die man auf und zu machen kann.  Diese Objekte muessen erzeugt werden und das passiert waehrend der Laufzeit.  Das nennt sich Instanzierung, das heisst zur Laufzeit wird ein Objekt instanziert durch einen Konstruktor in der Klasse.", "start": 213.35999999999999, "end": 234.16}, {"text": "  Wenn wir hier beim Flaschenbeispiel bleiben, koennen wir mit dem Konstruktor eine 30 cm hohe geschlossene Runde Flasche erzeugen.  Wir haben also die Anfangsattribute den Anfangszustand festgelegt.  Dieses spezifische Objekt kann dann auch ein Verhalten zeigen.  Das heisst, wir koennen eine Methode aufrufen und in diesem Fall zum Beispiel diese 30 cm hohe, runde, geschlossene Flasche oeffnen.", "start": 234.16, "end": 258.8}, {"text": "  Damit haben wir dann ihren Zustand, ihre Attribute geaendert.  Methoden muessen natuerlich nicht immer die Attribute veraendern, aber das ist ein Beispiel fuer eine Methode.  Ausserdem haben Objekte immer eine Identitaet, einen eigenen Platz im Speicher, der sie von anderen Objekten unterscheidet, auch wenn sie die gleichen Attribute haben.", "start": 258.8, "end": 287.08000000000004}, {"text": "  Das heisst auch, dass wenn man zwei exakt gleiche Flaschen haben moechte, muessen diese auch einzeln instanziert werden und bekommen dabei jede eine eigene Identitaet.  Wie wir das implementieren koennen und wie man zum Beispiel einen Konstruktor schreibt, schauen wir uns an einen weiteren Beispiel an, naemlich am Beispiel der Kegelroppe.", "start": 287.08000000000004, "end": 304.6}, {"text": "  Wir ueberlegen uns nun also eine Klasse Kegelroppe und legen Eigenschaften fest, wie Kegelroben haben sollen.  Hier erst einmal einen Namen, ein Alter und eine Groesse.  Nun steht der Kegelroppe nicht ins Gesicht geschrieben, wie sie heisst, also brauchen wir eine Getter Methode, GetName, um den Namen herauszubekommen.", "start": 304.6, "end": 324.96000000000004}, {"text": "  Ausserdem essen Kegelroben gelaehlte ich mal was, also schreiben wir auch noch eine Methode Essen.  Bisher ist das doch nur ein Objekttyp, eine generische Kegelroppe.  Mit dieser Klasse koennen wir dann aber zur Lauchzeit einzelne Kegelroben erzeugen, zum Beispiel die Kegelroppe Paula, die drei Jahre alt ist und 71 gross, oder die Kegelroppe Klaus, der fuenf Jahre alt ist und 32 gross.", "start": 325.08, "end": 354.32}, {"text": "  Die Methode und Attribute koennte man natuerlich beliebig erweitern, aber fuers Erste lassen wir es dabei und implementieren das jetzt so.  Dazu erstellen wir jetzt eine neue Klasse. Kegelrobe.  In der Klasse legen wir uns als erstes unsere Attribute an. Den Namen, das Alter und die Groesse.", "start": 354.96, "end": 381.96}, {"text": "  Und da wir nicht wollen, dass diese Attribute des Objektes einfach von ausserhalb geaendert werden koennen, machen wir sie Private.  Das ermoeglicht die Datenkapselung, ueber die wir gleich noch sprechen.  Da die Klasse jetzt Attribute hat, muessen diese initialisiert werden, wenn man ein Objekt dieser Klasse erstellt.", "start": 382.96, "end": 400.96}, {"text": "  Dazu brauchen wir einen Konstruktor, der dann ein Objekt der Klasse mit bestimmten Attributen instanziert.  Dieser Konstruktor ist oeffentlich, also Public, da das Objekt ja erst erstellt werden muss und das passiert immer von ausserhalb.  Wir schreiben also Public Kegelrobe, also der Klassenname, fuer den Konstruktor und uebergeben die Attribute als Parameter.", "start": 400.96, "end": 423.96}, {"text": "  Es muessen nicht alle Attribute uebergeben werden, es sollten aber alle Attribute im Konstruktor initialisiert werden.  Sonst fuehrt das im weiteren Verlauf zum Beispiel zu Null-Point der Exceptions oder falschen Ergebnissen.", "start": 423.96, "end": 441.96}, {"text": " Welcher war dann ein Attribut entweder mit Null initialisiert oder hier zum Beispiel die Groesse,  wo der Zahl Null initialisiert, was man dann gegebenenfalls benutzt, ohne zu erwarten, dass es falsch ist.  Wir koennten bereits ein Objekt der Klasse Kegelrobe erstellen.  Vorher aber schreiben wir noch schnell unsere beiden Methoden.  Zuerst die GetName-Methode.", "start": 445.96, "end": 462.96}, {"text": "  Das ist eine typische Getter-Methode, die sie haeufig gebraucht wird, um auf private Variablen zuzugreifen.  Sie ist Public und hat das Rueckgabefamat String und gibt den Namen zurueck.  Fuer das Alter und die Groesse geht das natuerlich auch.", "start": 462.96, "end": 481.96}, {"text": " Wenn Sie die Aufgabe bis hierhin programmiert haben, koennen Sie zur Uebung hier alle anderen Getter-Methode schreiben,  sowie die Setter-Methode fuer die Groesse und das Alter.  Dabei sollten Sie darauf achten, dass nur sinnvolle Werte gesetzt werden koennen.  Ein Kriterium waere, dass Kegelroben fuer gewoehnlich nicht juenger und nicht kleiner werden koennen.  Wir gehen jetzt zu unserer Methode, Essen.", "start": 481.96, "end": 502.96}, {"text": "  In der Methode geben wir nur aus, ich esse Fisch.  Wir nutzen hier die Abkuerzung, es out fuer system.out.println,  und schreiben den String, den wir ausgeben wollen, da rein.  Eine Erweiterung, die Sie gerne ausprobieren koennen, waere ein neues Attribut einzufuehren,  welches modelliert, ob die Robo-Hungry ist oder nicht,  und dann die Methode Essen, diesbezueglich anzupassen.", "start": 502.96, "end": 537.96}, {"text": "  Die Klasse an sich waere jetzt fertig.  Wir haben aber noch nicht getestet, ob sie auch funktioniert.  Deshalb schreiben wir noch eine Mail-Methode und testen die Funktionalitaet unserer Klasse.  Wir erstellen zunaechst ein neues Objekt Kegelrobe mithilfe des New-Operators,  die Kegelrobe Paula, die 3 Jahre alt ist und 71 gross.", "start": 537.96, "end": 571.96}, {"text": " Wenn wir die Methode getName aufrufen und ausfuehren,  zum Beispiel mit dem kleinen gruenen Pfeil links neben unserem Code,  kommt es zumindest nicht zu einem Runtime-Fehler.  Es waere aber auch schoen, das Ergebnis noch auszugeben, deswegen machen wir das jetzt.  Und wenn wir es nun ausfuehren, steht da Paula.  Wunderbar.", "start": 571.96, "end": 594.96}, {"text": "  Als naechstes erstellen wir ein Array von Kegelroben, indem wir 2 ekelklammern vor Gruppe setzen  und dann die Dimension bzw. die Anzahl der Robben rechts eingeben.  Die Objekte sind dann aber noch nicht initialisiert.  Dafuer muessen wir noch den Konstruktor aufrufen  oder das Objekt auf ein bereits bestehendes Objekt setzen.  Das machen wir jetzt fuer die Kegelroben Paula, Klaus und Leo.", "start": 594.96, "end": 618.96}, {"text": "  Es bestehen jetzt keine 2 Kegelroben Paula,  wir haben ja kein zweites Mal den Konstruktor aufrufen.  Wir haben lediglich Paula der Gruppe hinzugefuegt.  Wenn wir jetzt ueber diese Gruppe etirieren wollen, koennen wir statt mit dem Index,  also Int, zu arbeiten, auch mit den Objekten in dem Array arbeiten.", "start": 618.96, "end": 644.96}, {"text": " Das heisst, wir koennen schreiben Kegelrombe K, Doppelpunkt Gruppe  und die Vorschleife etiriert ueber den Array.  Dann rufen wir fuer jedes K die Methode Essen auf und fuehren die Main nochmal aus.  Wir wuerden erwarten, dass da steht Paula und 3 Mal ich esse Fisch.", "start": 644.96, "end": 654.96}]}]