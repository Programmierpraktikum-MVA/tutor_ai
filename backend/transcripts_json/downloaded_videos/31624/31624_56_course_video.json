[{"lecture": "31624_56_course_video", "Timestamps": [{"text": "  In diesem Video werden wir uns die Grundlagen der Programmierung anschauen, welche schon  durch vorherige Kurse wie zum Beispiel Einfuehrung in die Programmierung bekannt sein sollten.  Im Speziellen werde ich hier auf die Themen Variablen, Bedingungen und Schleifen eingehen.  Variablen werden in unserem Programm benutzt, um Informationen oder Werte zu speichern.", "start": 0.0, "end": 27.12}, {"text": "Diese  Informationen koennen abhaengig vom Datentyp unterschiedlich sein. Wir koennen zum Beispiel  ganze Zahlen oder Komma-Zahlen in einer Variable speichern, aber auch kompliziertere Informationen,  wie zum Beispiel ganze Saetze. Diese Variablen koennen wir dann verwenden, um mit ihnen Berechnung  durchzufuehren, Vergleiche auszufuehren oder Ergebnisse auszugeben.", "start": 27.12, "end": 51.2}, {"text": "Variablen bilden somit die Basis  einer Programmiersprache. Sie beinhalten alle wichtigen Informationen, die benoetigt werden,  um ein Algorithmus auszufuehren. Hierbei muss jede Variable einen eindeutigen Namen erhalten.  Ausserdem muss jede Variable deklariert und initialisiert werden. Bei der Deklaration gebe  ich einen Datentypen an und anschliessend den eindeutigen Namen.", "start": 51.2, "end": 78.92}, {"text": "Bei der Initialisierung  weise ich mittels des Istgleichs ein Wert zu. Das Ganze kann ich auch in einem Schritt machen,  indem ich erst den Datentyp angebe, dann den Namen der Variable und anschliessend mit dem  Istgleich ein Wertzuweise. Abhaengig davon, welche Informationen ich in einer Variable  speichern moechte, gibt es unterschiedliche Datentypen.", "start": 78.96000000000001, "end": 103.84}, {"text": "In Java sind dies hier die gaengigsten  Datentypen. Moechte ich ganze Zahlen speichern, dann kann ich die folgenden Datentypen verwenden.  Byte, Short, Int, was fuer Integer steht und Long. Moechte ich in Gegen-, Zahlen speichern,  kann ich entweder ein Float oder ein Double verwenden. Fuer Zeichen bzw.", "start": 103.84, "end": 126.0}, {"text": "fuer Buchstaben  benutze ich den Datentyp Character, was abgekuerzt wird mit Char und moechte ich lediglich ein  Wahrheitswert speichern, also war oder falsch, benutze ich ein Boolean. Wie euch wahrscheinlich  schon aufgefallen ist, gibt es hier mehrere Moeglichkeiten, ganze Zahlen zu speichern. Wir haben  hier Byte, Short, Int und Long.", "start": 126.0, "end": 153.39999999999998}, {"text": "Diese unterscheiden sich lediglich in der Groesse, die die Variable  im Speicher einnimmt. Je mehr Speicherplatz die Variable bietet, desto groessere Zahlen  koennen in der Variable auch gespeichert werden. Moechte ich also beispielsweise eine sehr,  sehr grosse ganze Zahl speichern, bietet sich nicht unbedingt ein Byte an, sondern eher ein Long.", "start": 153.39999999999998, "end": 170.92000000000002}, {"text": "  Das gleiche sind wir auch bei den Komma-Zahlen. Hier haben wir den Float, welcher 32-bit gross ist  und ein Double, welcher 64-bit gross ist. Ein Double kann somit groessere und auch genauere  Komma-Zahlen speichern.", "start": 170.92000000000002, "end": 198.56}, {"text": "Am gaengigsten in der Programmierung und fuer uns auch erst mal nur  wichtig sind lediglich der Integer fuer ganze Zahlen, Double fuer Komma-Zahlen, Character fuer Zeichen  und Buchstaben und Boolean fuer Wahrheitswerte. Darueber hinaus gibt es noch weitere Datentypen,  wie zum Beispiel die Strings. Strings sind eine Zeichenkette aus mehreren Charaktern.", "start": 198.56, "end": 212.92}, {"text": "Im Gegensatz  zu C haben sie in Java einen eigenen Datentypen.", "start": 212.92, "end": 230.6}, {"text": "Wenn wir ein String deklarieren und initialisieren  wollen, koennen wir also einfach als Datentyp das Wort String benutzen, dann geben wir einen Namen  fuer die Variable und anschliessend koennen wir diese initialisieren, indem wir in Anfuehrungsstrichen  unseren String schreiben.", "start": 230.6, "end": 235.79999999999998}, {"text": "Hier muesst ihr allerdings aufpassen, dass ihr die richtigen Anfuehrungszeichen  verwendet. Moechtet ihr ein String initialisieren, muesst ihr diese doppelten Anfuehrungszeichen  verwenden, bei einem Character die Einfachen. Java erlaubt darueber hinaus auch das Typecasting  von Variablen.", "start": 235.8, "end": 256.08000000000004}, {"text": "Das bedeutet eine Variable von einem bestimmten Datentyp wird umgewandelt in  einen anderen Datentypen. Je nachdem welcher Datentyp in welchem Datentyp umgewandelt hat,  kann es dabei allerdings zu Problemen kommen.", "start": 256.08000000000004, "end": 273.0}, {"text": "Moechten wir zum Beispiel eine sehr sehr grosse  Zahl, welche in einem Long gespeichert ist, umwandeln in einen Byte, kann es passieren, dass dabei  Informationen verloren gehen, da die grosse Zahl nicht in ein Byte passt.", "start": 273.0, "end": 284.68}, {"text": "Weiterhin geht  beispielsweise bei der Umwandlung von einem Double in ein Integer die Komma-Zahl verloren und es bleibt  nur der ganz zahlige Teil der Zahl uebrig. Welches Typecasting allerdings kein Problem darstellt,  ist den kleineren Datentypen in den groesseren Datentypen umzuwandeln.", "start": 284.68, "end": 298.91999999999996}, {"text": "Wir koennen beispielsweise  ein Byte ohne Probleme umwandeln in ein Short oder in ein Int oder in ein Long. Genauso koennen wir  einen Float umwandeln in ein Double ohne Informationen zu verlieren. Natuerlich koennen wir auch ein  Byte in einen Float umwandeln beispielsweise, da hierbei keine Informationen verloren gehen.", "start": 298.91999999999996, "end": 317.15999999999997}, {"text": "  Anders herum, also wenn wir den Float in ein Byte umwandeln, wuerden wir zum einen die Komma-Stelle  verlieren und zum anderen, wenn die Zahl vor dem Komma zu gross ist, wuerde diese auch nicht in ein  Byte passen und somit wuerden weiterhin Informationen verloren gehen.", "start": 317.20000000000005, "end": 335.68}, {"text": "Bedenkt also immer, in welchem  Wertebereich eure Zahlen liegen und ob es ganze Zahlen oder Komma-Zahlen sind und waehlt entsprechend  immer den richtigen Datentypen. Wir koennen nun also schon mal Informationen invariablen speichern.  Weiterhin koennen wir mit diesen variablen Berechnungen durchfuehren.", "start": 335.68, "end": 353.68}, {"text": "Hier ist einmal eine  Uebersicht ueber die einfachsten Berechnung, die ihr mit variablen durchfuehren koennt. Hierbei wird  auf der rechten Seite immer ein Wert berechnet, in dem Falle die Summe aus A und B und diese wird  dann der Variable, die auf der linken Seite steht, zugewiesen.", "start": 353.68, "end": 376.24}, {"text": "Das bedeutet, wenn in A zum Beispiel  eine 5 steht, in B steht eine 2, dann wird das Ergebnis 7 in der Variable x gespeichert. Auf der  rechten Seite koennt ihr natuerlich auch statt B zum Beispiel 2 verwenden oder ihr verwendet 3  verschiedene Variablen. Das haengt davon ab, welche Berechnung ihr durchfuehrt.", "start": 376.24, "end": 392.36}, {"text": "Diese Berechnung  koennt ihr auch mit verschiedenen Datentypen durchfuehren, wobei ihr beachten muesst, dass zum  Beispiel bei der Division eine Kommazahl entstehen kann. Den sogenannten Modulo-Operator kann man sich  vorstellen, als Rest einer ganz zahligen Division und der wird spaeter im Kurs noch interessant  werden.", "start": 392.36, "end": 416.08000000000004}, {"text": "Nun koennen wir also schon Informationen invariablen speichern und wir koennen diese  Informationen miteinander verknuepfen, indem wir diese mit verschiedensten Berechnungen verbinden.  Allerdings fehlt uns noch die Moeglichkeit, bestimmte Teile des Programms nur auszufuehren,  wenn irgendeine Bedingung gilt. Hierfuer gibt es die sogenannten IF-Bedingungen.", "start": 417.08, "end": 435.44}, {"text": "Diese ermoeglichen  eine Verzweigung im Code, in dem eine bestimmte Bedingung ueberprueft wird und nur wenn diese  gilt, wird ein bestimmter Teil des Codes ausgefuehrt. Die Suendung sieht dann folgendermassen aus,  wir haben an der Stelle ein IF, dann folgt in Klammern die Bedingung, die gelten muss.", "start": 435.44, "end": 459.32}, {"text": "Hier  koennte zum Beispiel stehen, dass eine Variable groesser als irgendetwas ist, zum Beispiel ist  meine Variable A groesser als 0, weiterhin koennte hier stehen, dass etwas kleiner ist als etwas  anderes, zum Beispiel ist x kleiner als y oder zwei Werte sind gleich, zum Beispiel A ist gleich B.", "start": 459.32, "end": 480.03999999999996}, {"text": " Hierbei ist zu beachten, dass ein Ist-Gleichzeichen immer bedeutet, dass ich etwas zuweise, wie bei der  Initialisierung von Variablen, moechte ich also vergleichen, ob etwas gleich ist wie etwas anderes,  muss ich zwei Ist-Gleichzeichen verwenden.", "start": 480.03999999999996, "end": 493.03999999999996}, {"text": "Bedingungen koennen ausserdem verknuepft werden, wenn zum Beispiel  A groesser sein muss als 0 und B groesser sein muss als 0, dann koennen diese beiden Bedingungen mit einem  und verknuepft werden, was sich in Java mit zwei Ist-Gleichzeichen ausdruecken laesst.", "start": 493.04, "end": 509.36}, {"text": "Neben dem  und kann ich Bedingungen auch noch mit einem oder verknuepfen, das wird dann in Java mit zwei  senkrechten Strichen ausgedrueckt. Moechte ich eine Bedingung verneinen, dann kann ich das mit dem  Ausrufezeichen machen. Haben wir unsere Bedingungen nun formuliert, folgen geschweifte Klammern.", "start": 509.36, "end": 521.6800000000001}, {"text": "Ist  die Bedingung wahr, die wir hier formuliert haben, dann wird der Teil ausgefuehrt, der hier in den  geschweiften Klammern steht, ansonsten nicht. Darueber hinaus haben wir die Moeglichkeit, hinter dem  if noch ein erst zu schreiben, was so viel heisst wie, wenn diese Bedingung nicht gilt, dann fuehre  nicht diesen Teil aus, sondern alternativ den Teil, der im erst Block steht.", "start": 521.68, "end": 547.76}, {"text": "Schauen wir uns das  ganze noch einmal hier auf der rechten Seite an, wir haben den Code, der ausgefuehrt wird,  bevor die erste if Bedingung kommt.", "start": 547.84, "end": 567.6}, {"text": "Dann ueberpruefen wir die if Bedingung, wenn diese wahr ist,  fuehren wir den Code im if Block aus und anschliessend nicht mehr den erst Teil, sondern das, was nach  der if erst Bedingung kommt. Ist die Bedingung allerdings falsch, fuehren wir nur den Code im  erst Block aus und anschliessend der ganze Code, der danach kommt.", "start": 567.6, "end": 579.24}, {"text": "Habe ich kein erst Block,  ueberpruefe ich die Bedingung, wenn diese wahr ist, fuehre ich den Code im if Block aus und danach  den Code nach der Bedingung. Ist die Bedingung allerdings falsch, ueberspringe ich den Code im  if Block und fuehre direkt den Code nach der Bedingung aus.", "start": 579.24, "end": 599.16}, {"text": "Wir koennen nun also Informationen  in variablen Speichern, diese Information mit Berechnungen veraendern und abhaengig von Bedingungen,  Berechnungen durchfuehren oder eben nicht. Oft basieren Algorithmen allerdings auch darauf,  bestimmte Operation immer und immer wieder zu wiederholen, dafuer gibt es die sogenannten Schleifen.", "start": 599.88, "end": 618.36}, {"text": "  Diese werden wie bereits gesagt benutzt, um Operation immer und immer wieder zu wiederholen,  und zwar so lange, bis eine bestimmte Bedingung nicht mehr erfuellt ist.", "start": 618.36, "end": 641.48}, {"text": "Das ganze sieht dann  in der Suendung so aus, dass wir das Wort While haben, anschliessend in Klammern wieder eine Bedingung,  wie bei der if Bedingung und geschweifte Klammern, nur dass in diesem Fall der Code,  der in der While Schleife steht, so oft ausgefuehrt wird, bis diese Bedingung nicht mehr gilt.", "start": 641.48, "end": 651.4}, {"text": " Wenn wir uns das ganze in diesem Fluss Diagramm anschauen, dann haben wir wieder den Code,  der vor der Schleife ausgefuehrt wird. Anschliessend ueberpruefen wir die Bedingung,  wenn diese While ist, dann fuehren wir den ganzen Code in der Schleife aus und ueberpruefen  anschliessend die Bedingung wieder.", "start": 652.12, "end": 668.6}, {"text": "Wenn diese wieder While ist, dann fuehren wir wieder den Code in  der Schleife aus und so weiter, bis irgendwann die Bedingung falsch ist und dann springen wir aus  der Schleife heraus und fuehren den Code nach der Schleife aus. Wenn sich keine Variable, die in  der Bedingung steht, aendert, dann wird diese Schleife unendlich lange laufen.", "start": 668.6, "end": 685.9599999999999}, {"text": "  Ein Beispiel einer einfachen Schleife waere, alle Zahlen von 1 bis 10 auszugeben,  dann waere unsere Bedingung zum Beispiel, dass wir eine bestimmte Variable x haben und die muss  kleiner gleich 10 sein. Wenn das erfuellt ist, geben wir die Zahl aus und erhoehen diese Zahl,  das ist der wichtige Punkt.", "start": 685.9599999999999, "end": 708.5999999999999}, {"text": "Anschliessend ueberpruefen wir wieder die Bedingung und irgendwann ist die  Zahl eben nicht mehr kleiner gleich 10, sondern hat 11 erreicht und dann bricht unsere Schleife ab.  Neben der While-Schleife gibt es noch die Vorschleife. Diese funktioniert eben genau  nach diesem Zaehler-Prinzip.", "start": 709.64, "end": 727.56}, {"text": "Wir initialisieren zu Beginn einen Zaehler und zaehlen diesen nach  jedem Schleifen-Durchlauf einmal hoch und fuehren dann die Schleife so lange aus, bis der Zaehler  einen bestimmten Wert erreicht hat.", "start": 727.56, "end": 746.28}, {"text": "Die Suendung sieht folgendermassen aus, wir haben zuerst das  Schluesselwort vor, anschliessend folgen Klammern, indem wir zuerst den Zaehler initialisieren,  dann die Bedingung definieren und dann die Inkrementierung des Zaehlers festlegen.", "start": 747.88, "end": 758.6800000000001}, {"text": " Das Programm wird dann folgendermassen ausgefuehrt, zuerst wieder der Code vor der Schleife,  dann folgt einmalig die Initialisierung, zum Beispiel setzen wir hier ein Zaehler i auf 0,  dann ueberpruefen wir die Bedingung, wenn diese war ist, fuehren wir den Code in der Schleife aus  und nachdem wir den gesamten Code in der Schleife ausgefuehrt haben,", "start": 758.76, "end": 772.8399999999999}, {"text": " erhoehen wir unseren Zaehler, indem wir zum Beispiel schreiben i++,  das bedeutet unser Zaehler i wird um 1 erhoeht. Anschliessend ueberpruefen wir wieder die Bedingung,  wenn sie wieder war ist, gehen wir den naechsten Schleifen-Durchlauf, wenn sie irgendwann falsch  ist, dann fuehren wir den Code nach der Schleife aus.", "start": 773.56, "end": 800.28}, {"text": " Prinzipiell laesst sich statt jeder Vorschleife auch eine Weisschleife verwenden,  wo wir vor der Schleife ein Zaehler initialisieren und am Ende jedes Schleifen-Durchlaufs erhoehen.  Im Allgemeinen nutzt man Weisschleifen allerdings, wenn unbekannt ist, wie lange die Schleife laufen  muss und Vorschleifen, wenn wir genau wissen, wieviel Schleifen-Durchlaeufe wir erwarten.", "start": 801.72, "end": 813.0}]}]