[{"lecture": "31624_99_course_video", "Timestamps": [{"text": "  In der Hausaufgabe geht es um Derangements.  Die Rangements oder fixpunktfreie Permutationen sind Permutationen, bei denen kein Element  an seinem Platz bleibt.  Nehmen wir den Vektor 123 als Beispiel zu Hand.  Die Identitaet, die 123 auf 123 abbildet, ist keine fixpunktfreie Permutation, weil alle  Elemente an ihrem Platz bleiben.", "start": 0.0, "end": 31.0}, {"text": "  Die Permutation 132 und 233 sowie die Permutation 321 erfuellen die Bedingung auch nicht, weil  jeweils ein Element nicht veraendert wird.  Es bleiben also als Derangements 231 und 312.  Dieses Problem wird in einer der ingegebene Dateien naemlich einer Subklasse der Klasse  Permutation Variation geloest, und zwar mithilfe von Backtracking.", "start": 31.0, "end": 53.58}, {"text": "  Fuer unser Beispiel 123 sieht der passende Baum der Teilloesung dann so aus.  Alles, was mit 1 anfaengt, koennen wir direkt ausschliessen, und dann gehen wir die moeglichen  Schritte der Reihe nach durch, wobei sie rueckgaengig gemacht werden, wenn ein Schritt nicht zur  Loesung fuehrt.  Wir gehen den Baum vollstaendig durch und speichern alle moeglichen fixpunktfreien Permutationen.", "start": 53.58, "end": 72.86}, {"text": "  Nun, wie bereits gesagt, ist die richtige Loesung schon implementiert, aber auch mehrere  falsche.  Ihnen liegen zwei Loesungsversuche als Testfaelle vor, und ihrer Aufgabe ist es, JUnit-Tests  zu schreiben, die die Eigenschaften von den Testklassen ueberpruefen.", "start": 72.86, "end": 92.42}, {"text": " Wir testen dann Ihre Tests an weiteren Testfaellen, die Sie nicht haben, um sicher zu gehen,  dass Ihre Tests zuverlaessig alle Eigenschaften pruefen, die fuer Klassen wichtig sind.  Aufgeteilt sind diese Eigenschaften in die Ueberpruefung des Konstruktors, die Ueberpruefung  der Derangement-Eigenschaften und die Ueberpruefung, ob es sich ueberhaupt um eine Permutation  handelt.", "start": 92.42, "end": 109.14}, {"text": "  Der Sinn von Tests ist, alle moeglichen zukuenftigen und aktuellen Logikfehler aufzudecken.  Versuchen Sie also auch selbst, Ihre eigenen Tests auszudricksen.  Ueberlegen Sie sich spezifische falsche Loesung, d.h.  Loesung, die genau eine Eigenschaft missachten, und schauen Sie, ob Ihre Tests diese abfangen  wuerden.", "start": 109.14, "end": 127.34}, {"text": "  Wenn Sie Ihre eigenen Testfaelle implementieren, achten Sie darauf, dass die Testfaelle immer  von der Klasse Permutation Variation erben.  Und so gut erletzt.  Wenn Sie Ihre Hausaufgabe abgeben, achten Sie darauf, dass Sie die Vorlagen nicht veraendert  haben.", "start": 127.34, "end": 136.42000000000002}]}]