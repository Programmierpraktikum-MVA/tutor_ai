[{"lecture": "31624_101_course_video", "Timestamps": [{"text": "  So, dann wollen wir uns jetzt mit der Aufgabe 1.2-Beschaeftigen,  Qs und Stacks in Java. Dazu soll man in der Klasse  die Graftrage eine Main machen und in dieser Main soll man  ja, Bartischlagen, also Qs oder Stacks machen.  Ja, fahren wir ein Stack an, das ist glaube ich ein bisschen einfacher.", "start": 0.0, "end": 28.0}, {"text": " Also machen wir ein Stack, dann ist das ein generischer Datentyp,  das heisst, wir muessen nur angeben, wovon man ueberhaupt ein Stack machen will.  Wir machen erstmal von dem Integer, dann kriegt er noch einen Namen  und das ist gleich ein neuer Stack.", "start": 28.04, "end": 45.480000000000004}, {"text": " So, was kann man jetzt mit diesem Integer Stack schoenes machen?  Naja, auf dieses Stack kann man jetzt auch pruefen, ob der Layer ist,  man kann das O-Restediment betrachten, man kann das O-Restediment  rausholen vom Stack oder man kann da Sachen aufpushen.", "start": 45.480000000000004, "end": 59.44}, {"text": " Man sieht schon, auf dieses Stack kann man nur Integer pushen,  das heisst, wenn wir jetzt da was pushen wollen, muss das ein Integer sein,  so kann man zum Beispiel eine 1 pushen, eine 3 und dann eine 5.", "start": 59.44, "end": 71.84}, {"text": " Und wenn man jetzt alle Zahlen vom Stack wieder poppen wollen wuerde,  dann koennte man sich eine kleine Schleife machen,  solange der Stack nicht leer ist,  also, solange man das O-Restediment betrachtet vom Stack,  dann ist das halt nicht nahe.  Ist das aktuelle Int, weil wir haben ein Integer Stack  und dann kann man sich noch ausgeben, was man da ueberhaupt...  runtergurgelt hat vom Stack.", "start": 71.84, "end": 92.72}, {"text": "  Und um das Ganze auszufuehren, muss man das hier noch eingeben  und anschliessend kann man auf diesen Grund ein File klicken  und das Ganze ausfuehren.  Und hier da ist gab es einen Fehler.  Die Zahlen werden ausgegeben und anschliessend gibt es einen Fehler,  und zwar empty Stack Exception, das heisst, der Stack ist empty  und versuchen da immer was draufzumachen.", "start": 92.72, "end": 115.12}, {"text": "  Naja, und das ist ja auch irgendwie logisch.  Wir gucken immer ein Stack rein.  Und wenn wir alle Zahlen vom Stack genommen haben,  dann ist der Stack leer und versuchen immer noch aufzugucken.  Deswegen ist es viel besser zu gucken,  ob der Stack denn nicht empty ist,  also lange erhaltend nicht empty ist,  die Sachen vom Stack zu holen.  Und jetzt versuchen wir das Ganze nochmal.", "start": 115.28, "end": 138.0}, {"text": "  Wir fuehren das aus und sie hat wunderbar funktioniert.  Anschliessend sollte man auch noch mal eine Queue erstellen.  Das wollen wir auch machen.  Also eine Queue.  Das ist wieder ein generischer Datentyp.  Das heisst, wir muessen irgendwie sagen, was wir ueberhaupt in diese Queue packen  und wir sagen wieder, okay, wir wollen jetzt wieder in die Queue packen.", "start": 138.56, "end": 158.04}, {"text": "  Dann gibt es auch einen schoenen Namen fuer.  Und wenn man jetzt versucht, eine neue Queue zu erstellen,  naja, dann klappt das Ganze nicht.  Denn das steht auch in der Aufgabenstellung.  Wenn man das von halt aufpassen soll,  dass die Queue als Interface implementiert sind.  Das heisst, das Ganze geht es noch nicht.", "start": 158.04, "end": 187.84}, {"text": " Was aber geht, ist, dass wir sagen, okay,  wir wollen eine neue Integer Queue  und wenden das Ganze auf eine Linked List an.  Jetzt haben wir eine Linked List,  die alle Funktionen einer Queue erfuellt.  Okay, und werden wir jetzt in die Queue  ein Element adden.  Zum Beispiel 1, 3 und 5, so wie um auch.  Und dann koennen wir die alle wieder aus der Queue holen.", "start": 187.84, "end": 212.04}, {"text": "  Und da kann man die Size nachschauen.  Denn es ist eine Linked List.  Und solange die Size der Linked List nicht null ist,  das heisst, es gibt noch Elemente in der Queue,  kann man von der Queue auch die Elemente holen.  Das macht man mit Poll und das Ganze sich ausbinden lassen.  Okay, werden wir das jetzt ausfuehren.  Dann gibt es einmal 5, 3, 1.  Das ist der Stack.", "start": 212.04, "end": 235.68}, {"text": "  Also beim Stack werden die Elemente  in umgekehrter Reihenfolge wieder ausgegeben,  bis sie darauf gepolst werden.  Und anschliessend die Queue.  Bei der Queue kommen sie halt  first in first out in der richtigen Reihenfolge wieder raus.  Also 5, 3, 1 vom Stack und 1, 3, 5 von der Queue.", "start": 235.68, "end": 253.8}, {"text": " Genau, und der Witz ist halt,  dass man jetzt nicht nur Queues oder Stacks machen kann,  sondern auch das Interjun,  sondern man kann auch einen Stack machen  von Druckauftraegen zum Beispiel.  Und jetzt kann man auf diesen Stack von Druckauftraegen,  kann man jetzt Druckauftraege pushen.  Und dafuer erstellen wir uns mal einen neuen Druckauftrag.  Den nennen wir ganz spannend Test.", "start": 253.8, "end": 273.0}, {"text": "  Das ist ein neuer Druckauftrag.  Und dafuer brauchen wir noch einen Auftraggeber.  Der Auftraggeber, das ist 1.  Und die seinen Zahl sind zum Beispiel 10.  Und jetzt kann man auf diesen Stack  den Druckauftrag pushen.  Und wir machen mal ein paar mehr.  So, und jetzt kann man so lange der Stack nicht empty ist.  Dann kann man jetzt Druckauftraege vom Stack holen.", "start": 273.0, "end": 311.48}, {"text": "  Und wir haben ja eine schoene Metoole Report geschrieben.  Und jetzt kann man einfach mal nachschauen,  welche Druckauftraege man von Stack geholt hat.  Und wer wird das Ganze jetzt machen?  Dann holen wir zuerst den letzten Druckauftrag,  den wir auf den Stack pushen haben,  raus dann den vorletzten und dann den vorverletzten,  also den ersten.  Genau, und das war es, Stack und Queue.", "start": 311.48, "end": 340.68}, {"text": "  Das Ganze funktioniert mit der Queue natuerlich auch.  Das heisst, zusammengefasst kann man nicht nur Stacks und Queues  von Standard-Datentypen, so was wie Integer, Doppel oder so erstellen,  sondern halt auch von Objekten.  Und das sieht daran, es war Generics verwenden.", "start": 340.68, "end": 357.16}]}]