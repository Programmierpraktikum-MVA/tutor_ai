[{"lecture": "25797_61_course_video", "Timestamps": [{"text": "  Video zur Darstellung von Bildern als Vektoren. In diesem Video moechte ich euch einmal erklaeren,  wie man Bilder als Vektoren auffassen kann und darauf aufbauen werde ich Ihnen zeigen,  dass man dazu dann auch fuer diese Bilder eine Basis in einem bestimmten Vektorraum findet.", "start": 0.0, "end": 38.760000000000005}, {"text": " Und auf Basis von Vektoren kann man dann auch zwei Bilder miteinander vergleichen und auch eine Menge  von mehreren Bildern als Matrix darstellen. Zuerst betrachten wir eben nur, wir betrachten  schwarz-weiss Bilder, das heisst Graustufenbilder und bei denen ist es so, dass wir eben jeden Pixel  einem, dass wir halt weiss und schwarz jeweils einen minimalen, maximalen Pixel zuordnen.", "start": 38.760000000000005, "end": 65.96}, {"text": "Bei uns ist  das dann 0 und 1 und dann kann man eben ein solches Bild als eine Matrix auffassen.", "start": 65.96, "end": 90.76}, {"text": "Und zwar eben wie  hier, wir haben ein Bild mit 116 mal 98 Pixel und das koennen wir jetzt einfach als eine Matrix  auffassen mit dieser, mit diesem Dimension und intuitiv ist das halt so, die erste Zeile sind  alle diese Pixel, die zweite Zeile sind die ganzen Pixel daneben und das heisst, wenn wir zum Beispiel", "start": 90.76, "end": 102.56}, {"text": " den ersten Pixel haben wollen, dann nehmen wir eben quasi den Eintrag der Matrix an der Nullen und  an der Nullen Stelle.", "start": 102.56, "end": 130.96}, {"text": "Diese Matrix koennen wir wiederum aber auch als Vektor auffassen, beziehungsweise  dieses Bild, weil wir haben ja insgesamt so viele Pixel wie Eintraege in dieser Matrix, also 116 mal  98 Pixel haben wir in unserem Bild und man kann jetzt einfach einen Vektor nehmen mit der entsprechenden  Anzahl von Eintraegen, also mit dessen Dimension, die genau diese Anzahl an Eintraegen hat.", "start": 130.96, "end": 146.72}, {"text": "Bei uns ist  das 98 mal 116 Pixel haben wir, also haben wir insgesamt 1368 Pixel und jetzt kann man sich  eben einfach einen Vektor definieren aus dem, aus diesem hochdimensionalen Vektoraum, bei dem je  ein Eintrag ein Pixel eben entspricht.", "start": 146.72, "end": 173.95999999999998}, {"text": "Und hier ist es wichtig, dass die Reihenfolge klar ist, wie wir von  dieser Matrix zu einem Vektor kommen. Das heisst, wir koennten uns zum Beispiel ueberlegen, immer die,  zum Beispiel die Zeilen hintereinander in diesen Vektor reinzuspeichern. Aber wir koennten das auch  zufaellig machen, sagen, das hier ist der erste Pixel, also Eintrag im Vektor, hier ist der zweite.", "start": 173.95999999999998, "end": 201.20000000000002}, {"text": "Das  Wichtige ist, dass wir uns, dass diese Reihenfolge klar ist, weil wenn wir mehrere Bilder miteinander  vergleichen wollen, dann muessen wir natuerlich die gleiche Reihenfolge haben fuer die Pixel,  weil wir die Pixel untereinander, miteinander vergleichen wollen.", "start": 201.20000000000002, "end": 226.51999999999998}, {"text": "Und wie wir gerade gesehen  haben, koennen wir also Bilder als Vektoren auffassen und das heisst, das sind Vektoren aus  einem bestimmten Vektoraum und fuer diesen Vektoraum koennen wir dann auch eine Basis finden. Und die  einfachste Basis ist die Standardbasis, die hier gezeigt ist.", "start": 226.51999999999998, "end": 244.2}, {"text": "Und das waeren dann zum Beispiel  einfach jeweils immer Bilder, die einen schwarzen Pixel haben und der Rest ist weiss. Und aus dieser  Basis kann man dann jedes Bild reproduzieren, quasi, dass die Dimension hat. Und das ist hier  gezeigt als Linearkombination von diesen Basisfektoren.", "start": 244.2, "end": 272.04}, {"text": "In diesem Fall ist jetzt dieser Vorfaktor  I00, eben gerade der Grauwert des entsprechenden Pixels. Diese, wie wir sehen werden, ist diese  Basis aber auch sehr unpraktisch, weil wir insgesamt die Basisfektoren haben. Jetzt moechte ich euch  einmal ein Beispiel zur Bildern als Vektoren aus Numpel zeigen.", "start": 272.04, "end": 295.32}, {"text": "Und das habe ich hier  praepariert. Also ich lese erst eine Bilddatei ein aus einer Datenbank, ein zufaelliges Bild,  von Gesichtsbildern. Und wie ihr sehen koennt, ist das eben genauso ein Array mit 11.368 Eintraegen.  Also man kann es eben verstehen als ein Vektor der Dimension 11.368.", "start": 295.32, "end": 322.48}, {"text": "Und mit Hilfe der Funktion  im Show koennen wir dann eben dieses Bild darstellen in Python. Und hier habe ich das auch  wieder als Matrix dargestellt. Das heisst, wir koennen mit Reshape eben wieder zurueck zur Matrix  oder hin zur Matrix.", "start": 322.48, "end": 351.8}, {"text": "Genau, wenn wir jetzt mehrere Bilder haben, koennen wir eben diese  Darstellung der Bilder als Vektoren ausnutzen, um unsere Menge an Bildern eben auch wie  darum als ein Objekt der linearen Allgeber darzustellen.", "start": 351.8, "end": 368.15999999999997}, {"text": "Und zwar, wenn wir zum Beispiel 50  Bilder haben, koennen wir diese Menge von 50 Bildern auch als eine Matrix darstellen mit eben  dieser entsprechenden Dimension. Und in dieser Matrix entspricht dann eben jede Spalte einem Bild,  sowie hier.", "start": 369.12, "end": 385.84000000000003}, {"text": "Und diese Matrix, also was wir dann spaeter machen werden mit der Berechnung von  Eigenfaces und der Hauptkomponentenanalyse, die basieren eben auf Eigenzerlegungen von einer  Matrix, die auf den Daten basiert. Und das hier ist eben schon mal die Matrix der Daten.  Als naechstes moechte ich euch erklaeren, wie man zwei Bilder nun miteinander vergleichen kann.", "start": 385.84000000000003, "end": 407.4}, {"text": "Wir  haben ja jetzt gesehen, dass wir Bilder als Vektoren aus einem Vektoraum darstellen koennen. Und jetzt  koennen wir einfach die Vektor-Num des Abstands von zwei Bildern bilden. Und die gibt uns also  ein Mass, wie nah diese zwei Bilder im Vektor-Aum aneinander liegen, also quasi wie aehnlich die  Pixel, die einzelnen Pixel zueinander sind. Und damit koennen wir dann also auch Sachen berechnen.", "start": 407.4, "end": 445.08}, {"text": "  Und eben intuitiv bedeutet, dass dann je naeher diese zwei Vektoren aneinander sind, desto  aehnlicher sind sich die Bilder, zum Beispiel eben auch Gesichtsbilder. Das heisst, wenn wir  jetzt zum Beispiel entscheiden wollen, wir haben ein neues Gesicht, ein Foto von einem neuen Gesicht,  und wir haben eine Datenbank von zum Beispiel 50 Bildern.", "start": 445.08, "end": 470.92}, {"text": "Und wir wollen jetzt dieses neue Gesicht  einer Person oder einem Gesicht zuordnen. Und dann nehmen wir einfach das Bild, dessen Abstand  zu diesem Bild minimal ist. Was hier ist beschrieben in diesem Ausdruck.", "start": 470.92, "end": 496.52}, {"text": "Und jetzt ist hier noch wichtig  zu sehen, bei jedes Mal, wenn wir diese Vektor-Num bilden, vergleichen wir, somieren wir insgesamt  D-Komponenten miteinander auf. Und je mehr Pixel wir haben, desto mehr Komponenten muessen wir  ausrechnen und miteinander aufsummieren.", "start": 496.52, "end": 511.0}, {"text": "Das heisst, fuer eine grosse Anzahl von Pixel kann  dieser Abstandsnorm auch problematisch werden. Das heisst, jetzt als kurze Zusammenfassung,  wir haben eben gesehen, wir koennen diese Bilder als Vektoren da beschreiben und wir koennen die  miteinander vergleichen, aber diese Dimension ist irgendwie problematisch.", "start": 511.0, "end": 527.44}, {"text": "Auch sehen wir,  dass nicht jeder Vektor aus diesem Vektoraum ein sinnvolles Gesichtsbild ergibt. Zum Beispiel,  habe ich hier einmal einen Zufallsvektor aus diesem Vektoraum generiert und den als Bild  geplottet und wir sehen, dass es einfach nur rauschen.", "start": 527.44, "end": 549.24}, {"text": "Aber mit der Basis, die wir vorher so  definiert hatten, koennen wir dieses Bild genauso gut darstellen, genauso effektiv darstellen wie  jetzt ein Gesichtsbild. Und deswegen kann man sich fragen, ob es nicht eine bessere Basis gibt  fuer eine gegebenen Menge an Gesichtsbildern, um diese Bilder darzustellen.", "start": 549.24, "end": 565.1999999999999}, {"text": "Und das werdet  ihr in den zukuenftigen Videos noch sehen, dass man das machen kann. Also eine neue Basis zu finden  fuer diese Gesichtsbilder und diese Basis basiert dann auf der Eigenzeitlegung der Matrix, eine  Matrix, die auf den Daten basiert.", "start": 565.1999999999999, "end": 585.36}, {"text": "Das heisst, wir haben dann Informationen ueber die Daten in  unserer Basis drin. Und fuer Bilder sieht das dann aus, dass wir eben eine Eigenbasis fuer die Bilder  finden und wir koennen diese Bilder mithilfe von Vektoren, die auch Bilder sind, darstellen.", "start": 585.36, "end": 606.32}, {"text": "Und  wie man darauf kommt, das wird in den Videos zur Singulaerwaertszelligung und zur Principle  Component Analysis noch einmal erlaeutert und veranschaulich. Ich moechte euch noch einmal zeigen,  wie das dann aussieht.", "start": 606.32, "end": 620.8399999999999}, {"text": "Also wir haben dann eine bestimmte Menge an Gesichtsbildern, wie dieses Bild  hier, ungefaehr 100 davon. Und auf dieser Menge von Gesichtsbildern fuehren wir dann eben die Hauptkomponentenanalyse  aus und finden eine neue Basis. Und jetzt habe ich hier mal vier dieser Basisvektoren fuer euch  geplottet. Das sind ja auch wiederum Bilder oder Vektoren, die wir als Bilder auffassen koennen.", "start": 620.8399999999999, "end": 641.28}, {"text": "Und  hier sehen wir, dass diese Eigenvektoren eben Aehnlichkeiten mit Gesichtern haben. Das heisst,  wir koennen damit irgendwie schon besser Gesichtsbilder rekonstruieren.", "start": 641.28, "end": 645.3199999999999}]}]